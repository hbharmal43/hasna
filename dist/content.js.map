{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;;AAA8C;AAC9C,qBAAqB,uDAAc;AACnC,iEAAe,YAAY,EAAC;AAC5B;;;;;;;;;;;;;;;ACH0C;AAC1C,mBAAmB,qDAAY;AAC/B,iEAAe,UAAU,EAAC;AAC1B;;;;;;;;;;;;;;;;;ACHA,cAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACsG;AACzD;AACF;AAC5B;AACf,kBAAkB,sBAAsB,UAAU;AAClD;AACA;AACA,qBAAqB,0DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oDAAQ,wBAAwB,SAAS,gBAAgB,MAAM;AACjF;AACA;AACA;AACA,aAAa;AACb,qBAAqB;AACrB;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,yBAAyB,oDAAQ,wBAAwB,SAAS;AAClE,wBAAwB,2BAA2B;AACnD;AACA;AACA,uBAAuB,qDAAa;AACpC,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU;AAC9B,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ,wBAAwB,SAAS;AAClE;AACA;AACA,uBAAuB,6DAAqB;AAC5C;AACA,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ,wBAAwB,SAAS;AAClE;AACA;AACA,uBAAuB,qDAAa;AACpC,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,mCAAmC,oDAAQ,uBAAuB,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,uBAAuB,8DAAsB;AAC7C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,wDAAwD;AACxD,kCAAkC,IAAI;AACtC,iBAAiB;AACjB;AACA;AACA,qBAAqB,oCAAoC;AACzD;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ,uBAAuB,SAAS,eAAe,IAAI;AACpF;AACA,uBAAuB,qDAAa;AACpC,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ,uBAAuB,SAAS,eAAe,IAAI;AACpF;AACA;AACA,uBAAuB,qDAAa;AACpC,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,oDAAQ,0BAA0B,SAAS,eAAe,GAAG;AACtF;AACA;AACA;AACA,iBAAiB;AACjB,uBAAuB,qDAAa;AACpC,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc,QAAQ,oDAAQ,uBAAuB,SAAS,eAAe,cAAc;AAC/G;AACA;AACA,6BAA6B,QAAQ,SAAS;AAC9C,iBAAiB;AACjB,aAAa;AACb,qBAAqB;AACrB;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAQ,0BAA0B,SAAS,eAAe,cAAc,WAAW,UAAU;AAC5H;AACA,aAAa;AACb,qBAAqB;AACrB;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACxQ8C;AAC4G;AACiK;AAC1M;AACkH;AAC9I;AAChC;AACb;AAC6B;AACrE,kEAAkB,IAAI;AACtB;AACA,SAAS,sDAAU;AACnB,gBAAgB,uDAAW;AAC3B;AACA;AACA;AACA,aAAa,2DAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,uDAAS;AAC5C;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAc;AACvC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB,0DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAS;AAC1B,wBAAwB,qDAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kEAAoB;AACxC,mCAAmC,mEAAmB;AACtD;AACA;AACA;AACA,mCAAmC,6EAAyB;AAC5D;AACA;AACA;AACA;AACA;AACA,2BAA2B,6EAAyB;AACpD;AACA,YAAY,uDAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB,GAAG,iDAAO,CAAC,IAAI,yBAAyB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,oEAAsB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uDAAS;AACzB,wBAAwB,cAAc;AACtC;AACA;AACA,wBAAwB,6EAAgC;AACxD;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,yBAAyB;AACzB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA,2BAA2B,yDAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAQ,wBAAwB,SAAS;AACvE;AACA;AACA,sMAAsM;AACtM,4CAA4C,0JAA0J;AACtM,iBAAiB;AACjB,uBAAuB,wDAAgB;AACvC,aAAa;AACb,oBAAoB,cAAc;AAClC;AACA,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,eAAe;AAC5C;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA,iEAAiE,uEAAyB;AAC1F;AACA,4BAA4B,oDAAQ,wBAAwB,SAAS;AACrE;AACA;AACA;AACA;AACA;AACA,uIAAuI;AACvI,gDAAgD,uFAAuF;AACvI;AACA;AACA,qBAAqB;AACrB,2BAA2B,wDAAgB;AAC3C,iBAAiB;AACjB;AACA;AACA,wBAAwB,2BAA2B;AACnD,4BAA4B,oDAAQ,wBAAwB,SAAS;AACrE;AACA;AACA;AACA;AACA,uIAAuI;AACvI;AACA,gDAAgD,uFAAuF;AACvI,qBAAqB;AACrB,2BAA2B,wDAAgB;AAC3C,iBAAiB;AACjB;AACA;AACA,0BAA0B,oEAA2B;AACrD;AACA,oBAAoB,cAAc;AAClC;AACA,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,eAAe;AAC5C;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD,4BAA4B,oDAAQ,wBAAwB,SAAS;AACrE;AACA;AACA;AACA;AACA,gDAAgD,uFAAuF;AACvI,qBAAqB;AACrB,2BAA2B,gEAAwB;AACnD,iBAAiB;AACjB;AACA;AACA,wBAAwB,2BAA2B;AACnD,4BAA4B,oDAAQ,wBAAwB,SAAS;AACrE;AACA;AACA;AACA;AACA,gDAAgD,uFAAuF;AACvI,qBAAqB;AACrB,2BAA2B,gEAAwB;AACnD,iBAAiB;AACjB;AACA;AACA,0BAA0B,oEAA2B;AACrD;AACA,oBAAoB,cAAc;AAClC;AACA,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA,yBAAyB,QAAQ,2BAA2B,aAAa,sEAA6B;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,wCAAwC,0BAA0B,mCAAmC;AAC3I;AACA;AACA;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kCAAkC,0DAAY,kBAAkB,gBAAgB;AAChF;AACA;AACA,oBAAoB,cAAc,QAAQ,oDAAQ,wBAAwB,SAAS;AACnF;AACA;AACA;AACA;AACA,iBAAiB;AACjB,uBAAuB,wDAAgB;AACvC,aAAa;AACb,kBAAkB,6DAAe,kBAAkB,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA,4BAA4B,+CAA+C;AAC3E,+BAA+B,sEAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oCAAoC,WAAW,sFAAsF;AAC1J;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,+CAA+C;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAgD;AACpE,8BAA8B,oDAAQ,wBAAwB,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uFAAuF;AACnI,iBAAiB;AACjB,uBAAuB,wDAAgB;AACvC,aAAa;AACb,oBAAoB,cAAc;AAClC;AACA,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA,4BAA4B,2BAA2B;AACvD,+BAA+B,sEAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;AACA,iEAAiE,uEAAyB;AAC1F;AACA,wBAAwB,QAAQ,QAAQ,oDAAQ,wBAAwB,SAAS;AACjF;AACA;AACA;AACA,uIAAuI;AACvI;AACA,gDAAgD,uFAAuF;AACvI;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA,wBAAwB,iBAAiB;AACzC,wBAAwB,cAAc,QAAQ,oDAAQ,wBAAwB,SAAS;AACvF;AACA;AACA;AACA,uIAAuI;AACvI;AACA,gDAAgD,uFAAuF;AACvI;AACA,qBAAqB;AACrB,iBAAiB;AACjB,yBAAyB,QAAQ,mGAAmG;AACpI;AACA,sBAAsB,oEAA2B;AACjD;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc,QAAQ,oDAAQ,wBAAwB,SAAS;AACnF;AACA,oDAAoD,aAAa,wBAAwB,+BAA+B;AACxH;AACA,uBAAuB,wDAAgB;AACvC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,eAAe;AAC5C;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,uEAAyB;AACtF;AACA,yBAAyB,oDAAQ,wBAAwB,SAAS;AAClE,8FAA8F,8BAA8B,iCAAiC,kCAAkC,wBAAwB,YAAY,yIAAyI;AAC5W,wBAAwB,wBAAwB;AAChD,gCAAgC,qGAAqG;AACrI;AACA,uBAAuB,oDAAY;AACnC,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,QAAQ,SAAS,yBAAyB;AAClE;AACA;AACA;AACA,8BAA8B,gEAAuB;AACrD,wBAAwB,QAAQ,QAAQ,oDAAQ,uBAAuB,SAAS;AAChF;AACA;AACA,iBAAiB;AACjB,yBAAyB,QAAQ,2BAA2B;AAC5D,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,SAAS;AACzC;AACA,wBAAwB,uBAAuB;AAC/C,wBAAwB,QAAQ,QAAQ,oDAAQ;AAChD;AACA;AACA;AACA;AACA,gDAAgD,uFAAuF;AACvI,qBAAqB;AACrB;AACA,iBAAiB;AACjB,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA,wBAAwB,uBAAuB;AAC/C,wBAAwB,cAAc,QAAQ,oDAAQ;AACtD;AACA;AACA;AACA;AACA,gDAAgD,uFAAuF;AACvI,qBAAqB;AACrB,iBAAiB;AACjB,yBAAyB,QAAQ,mGAAmG;AACpI;AACA,sBAAsB,oEAA2B;AACjD;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0DAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,4DAAgB;AAClF;AACA,0DAA0D,0BAA0B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,uEAAuE;AACvE;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,yBAAyB,QAAQ,yBAAyB;AAC1D;AACA,oBAAoB,iBAAiB;AACrC;AACA,yBAAyB,QAAQ,eAAe;AAChD;AACA,qBAAqB,QAAQ,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6BAA6B,oDAAQ,uBAAuB,SAAS;AACrE;AACA;AACA,2BAA2B,qDAAa;AACxC,iBAAiB;AACjB;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ,YAAY,aAAa,gEAAuB;AACrF;AACA,6BAA6B,oDAAQ,uBAAuB,SAAS;AACrE;AACA;AACA,2BAA2B,qDAAa;AACxC,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,oBAAoB,sEAAyB;AAC7C;AACA;AACA;AACA,0BAA0B,6DAAe,kBAAkB,gBAAgB;AAC3E;AACA,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,SAAS;AACT;AACA,8CAA8C;AAC9C;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA;AACA;AACA;AACA,8BAA8B,gEAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,uEAAyB;AAC1F;AACA,wBAAwB,yBAAyB,QAAQ,oDAAQ,uBAAuB,SAAS;AACjG;AACA;AACA,wDAAwD,iBAAiB,2EAA2E;AACpJ;AACA,2BAA2B,qDAAa;AACxC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ,oBAAoB;AACrD,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,gEAAuB;AACjD;AACA;AACA;AACA;AACA;AACA,4BAA4B,8DAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA,6BAA6B,QAAQ,2BAA2B;AAChE;AACA;AACA,6BAA6B,QAAQ,2BAA2B;AAChE;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,6BAA6B;AAC1D;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gEAAuB;AACrD;AACA,wBAAwB,iBAAiB;AACzC;AACA,6BAA6B,QAAQ,2BAA2B;AAChE;AACA;AACA,6BAA6B,QAAQ,2BAA2B;AAChE;AACA,yBAAyB,QAAQ,6BAA6B;AAC9D,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uDAAS;AAC1B,0BAA0B,uEAA8B;AACxD;AACA;AACA;AACA;AACA,0BAA0B,uEAA8B;AACxD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kCAAkC,uEAA8B;AAChE;AACA;AACA;AACA;AACA,kCAAkC,uEAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uEAA8B;AAC5D,wBAAwB,cAAc;AACtC;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ,2CAA2C;AAC5E;AACA,oBAAoB,2GAA2G;AAC/H;AACA,0BAA0B,uEAA8B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,yEAA6B;AACzE,8FAA8F,kBAAkB,gCAAgC,UAAU;AAC1J;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ,oCAAoC;AACjE;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,mCAAmC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0DAAY,kBAAkB,gBAAgB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA,SAAS;AACT;AACA,qBAAqB,QAAQ,IAAI,iBAAiB;AAClD;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA,yBAAyB;AACzB;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA,0BAA0B,2DAAc;AACxC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,sBAAsB,6DAAe,kBAAkB,gBAAgB;AACvE;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ,SAAS,WAAW;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA,yDAAyD,uEAAyB;AAClF;AACA;AACA;AACA,yBAAyB,oDAAQ,wBAAwB,SAAS;AAClE;AACA;AACA;AACA;AACA,4CAA4C,qCAAqC;AACjF,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA,qBAAqB,QAAQ,6EAA6E;AAC1G;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA,wBAAwB,cAAc;AACtC;AACA;AACA,6DAA6D,SAAS;AACtE;AACA;AACA;AACA;AACA,iBAAiB;AACjB,6BAA6B,oDAAQ;AACrC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gBAAgB,uDAAS;AACzB;AACA;AACA,qBAAqB,QAAQ,2FAA2F;AACxH;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2CAA2C;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,cAAc;AACtC;AACA;AACA;AACA,6BAA6B,oDAAQ,0BAA0B,SAAS,mBAAmB,qBAAqB;AAChH;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6BAA6B;AAC/E;AACA;AACA;AACA;AACA,yBAAyB,uDAAS;AAClC;AACA,0BAA0B,mDAAK,kCAAkC;AACjE;AACA;AACA,6BAA6B,oDAAQ,wBAAwB,SAAS;AACtE,4BAA4B,6BAA6B;AACzD;AACA,2BAA2B,wDAAgB;AAC3C,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,oBAAoB,sEAAyB;AAC7C;AACA,mEAAmE,yEAA6B;AAChG,aAAa;AACb;AACA;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB,QAAQ,2BAA2B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,uDAAS;AACrB;AACA;AACA,iBAAiB,QAAQ,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yIAAyI,4DAAgB;AACzJ,iDAAiD,iCAAiC,yBAAyB,4DAAgB,CAAC;AAC5H;AACA;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA,6BAA6B,sEAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gEAAuB;AAC7C;AACA;AACA;AACA;AACA;AACA,gDAAgD,6BAA6B;AAC7E;AACA;AACA,0CAA0C,kDAAQ;AAClD,oBAAoB,cAAc;AAClC;AACA;AACA;AACA,0BAA0B,gEAAuB;AACjD;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAW;AAC3B,iCAAiC;AACjC,qBAAqB,sEAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D,gEAAgE,UAAU;AAC1E;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,gCAAgC,mBAAmB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,0DAAY;AAC1B;AACA;AACA;AACA,cAAc,6DAAe;AAC7B;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,uDAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wBAAwB;AACtE;AACA;AACA;AACA;AACA;AACA,uEAAuE,yEAA6B;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ,SAAS,IAAI;AACzD;AACA;AACA;AACA;AACA;AACA,kGAAkG,yEAA6B;AAC/H,+FAA+F,gBAAgB,sBAAsB,yEAA6B,CAAC,2BAA2B,uEAA2B,EAAE;AAC3N,kDAAkD,uEAA2B;AAC7E;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mDAAmD,+DAAuB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,uDAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,qBAAqB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,6BAA6B;AACpE;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA,qCAAqC,mCAAmC;AACxE;AACA;AACA,+DAA+D,uEAAyB;AACxF;AACA,mCAAmC,kCAAkC;AACrE,0CAA0C,wCAAwC;AAClF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B;AAC7E;AACA,kBAAkB,IAAI,GAAG,oBAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA,6BAA6B;AAC7B;AACA,6BAA6B,oDAAQ,0BAA0B,SAAS,WAAW,gBAAgB;AACnG;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAyC;AACjE;AACA,6BAA6B;AAC7B;AACA,6CAA6C,oEAAoE,qCAAqC,sBAAsB,IAAI,uBAAuB;AACvM,wBAAwB,cAAc,QAAQ,oDAAQ,wBAAwB,SAAS;AACvF;AACA;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B;AAC7B;AACA;AACA,4DAA4D,QAAQ,kBAAkB;AACtF;AACA,yBAAyB;AACzB,aAAa;AACb;AACA;AACA,gBAAgB,wDAAW;AAC3B,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yCAAyC;AACrE;AACA,iCAAiC;AACjC;AACA,4BAA4B,cAAc,QAAQ,oDAAQ,wBAAwB,SAAS,WAAW,gBAAgB;AACtH,gCAAgC,qDAAqD;AACrF;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC;AACA,4DAA4D,6DAA6D;AACzH;AACA,6BAA6B;AAC7B,iBAAiB;AACjB;AACA;AACA,oBAAoB,wDAAW;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yCAAyC;AACrE;AACA,iCAAiC;AACjC;AACA,iCAAiC,oDAAQ,wBAAwB,SAAS,WAAW,gBAAgB;AACrG,gCAAgC,yBAAyB;AACzD;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,oBAAoB,wDAAW;AAC/B,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,gBAAgB,6CAA6C;AAC7D;AACA,SAAS;AACT;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,gBAAgB,QAAQ,MAAM,sBAAsB;AACpD;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ,SAAS,yBAAyB;AAClE;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,gCAAgC,uEAAuE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,QAAQ,uDAAuD;AACxF,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC17D8C;AACJ;AACA;AACJ;AAC4B;AACtC;AACC;AAC8E;AAC3G;;;;;;;;;;;;;;;;;;;;;;;;ACRoC;AACpC;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACA;AACA;AACA;AACA,0BAA0B,8BAA8B,6CAAO,CAAC;AAChE;AACP;AACA;AACA;AACO;AACA;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzcAAc,SAAI,IAAI,SAAI;AAC1B;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACoE;AACmB;AAC6C;AACpI;AACA;AACO;AACP;AACA,SAAS,gEAAsB;AAC/B,kBAAkB,4DAAuB;AACzC;AACA;AACA;AACA,kBAAkB,4DAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qDAAgB;AAClC;AACA;AACA,+BAA+B,iEAAuB;AACtD;AACA,wCAAwC,oDAAY;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0DAAqB;AAC3C;AACA;AACA;AACA,kBAAkB,0DAAqB;AACvC;AACA;AACA;AACA;AACA;AACA,kBAAkB,4DAAuB;AACzC;AACA,cAAc,iDAAY;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qCAAqC,kCAAkC,gBAAgB;AACvF;AACA,yCAAyC;AACzC;AACO;AACP;AACA,oCAAoC;AACpC,iBAAiB,+DAAuB;AACxC,gBAAgB,+DAAuB,IAAI,oDAAY;AACvD;AACA;AACA,6CAA6C,YAAY;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT,yJAAyJ,sBAAsB;AAC/K;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA,kBAAkB,4DAAuB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iCAAiC,mDAAS;AAC1C;AACA;AACA;AACA,aAAa,QAAQ,eAAe;AACpC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,QAAQ,MAAM;AAC3B;AACO;AACP,aAAa;AACb;AACO;AACP,YAAY,uEAAuE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvLsD;AAC/C;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,cAAc,EAAE,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,8BAA8B,kKAA8B,SAAS,gBAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACO;AACP;AACA,yCAAyC,EAAE,gBAAgB,EAAE,eAAe,EAAE;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE;AAC9B;AACP,4CAA4C,+DAAuB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACtRiD;AACjD;AACA;AACA;AACO;AACP;AACA,aAAa,8DAAoB;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,8DAAoB;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,8DAAoB;AACjC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO,6CAA6C;AACpD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACzCiD;AACjD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,8DAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iHAAiH,KAAK;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sBAAsB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kGAAkG,KAAK;AACvG,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClLA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACzBU;AACV;;;;;;;;;;;;;;ACDO;AACP;;;;;;;;;;;;;;;;ACDA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACwC;AACgE;AACjG;AACP,uBAAuB,YAAY,wBAAwB,kDAAc,QAAQ,IAAI;AACrF;AACA;AACA;AACA,qBAAqB,qDAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,wBAAwB,sCAAsC;AAC9D;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS,GAAG,aAAa;AAC9E;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA,iBAAiB;AACjB,8BAA8B,uDAAmB;AACjD,iBAAiB;AACjB;AACA;AACA,8BAA8B,uDAAmB;AACjD;AACA;AACA,8BAA8B,sDAAkB;AAChD;AACA,uIAAuI;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;ACjHO;AACP;AACA;AACA;AACA;AACA;AACA,8BAA8B,kKAA8B,SAAS,gBAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACbO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;;;;;;;;;;;;;;;;;;ACzCa;;AAEb;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC,yCAAyC;AACzC,eAAe,qBAAM,oBAAoB,OAAO,qBAAM;AACtD;AACA;;AAEA;;AAEO;;AAEP,iEAAe,qCAAqC,EAAC;;AAE9C;AACA;AACA;;;;;;;;;;;ACrBM;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA,qCAAqC,mBAAO,CAAC,4EAAsB;AACnE,yCAAyC,mBAAO,CAAC,0FAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,aAAa;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oCAAoC,6HAA6H,IAAI,2EAA2E;AAChP,oCAAoC,oHAAoH;AACxJ;AACA,iCAAiC,mHAAmH;AACpJ,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,aAAa;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA,0BAA0B,YAAY,cAAc,IAAI,cAAc;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC5Na;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gDAAgD,mBAAO,CAAC,wGAAyB;AACjF,iDAAiD,mBAAO,CAAC,0GAA0B;AACnF,oBAAoB,mBAAO,CAAC,gFAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY,mBAAmB,IAAI;AAC1D;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS,GAAG,SAAS;AACpD;AACA,qCAAqC;AACrC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI,oCAAoC,IAAI;AACjE;AACA,+BAA+B,SAAS,OAAO,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,EAAE,iBAAiB,OAAO,MAAM;AACxG;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACzHa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;ACjBa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oDAAoD,mBAAO,CAAC,gHAA6B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,EAAE,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,EAAE,oBAAoB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,EAAE,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,0BAA0B,EAAE;AAC5B,SAAS;AACT;AACA,oDAAoD,cAAc;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA,sDAAsD,EAAE,iBAAiB;AACzE;AACA;AACA;AACA,uDAAuD,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA,sDAAsD,EAAE,iBAAiB;AACzE;AACA;AACA;AACA,uDAAuD,sBAAsB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA,sDAAsD,EAAE,iBAAiB;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe,IAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE,gDAAgD,SAAS,KAAK,WAAW,GAAG,MAAM;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,SAAS,GAAG,MAAM;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gDAAgD,IAAI;AACtE,yCAAyC,gBAAgB;AACzD,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS,GAAG,MAAM;AAClE;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC5Xa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iDAAiD,mBAAO,CAAC,0GAA0B;AACnF;AACA,uBAAuB,YAAY,kBAAkB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uBAAuB,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,MAAM;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+BAA+B,IAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,OAAO;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,qEAAqE,IAAI;AAC9F;AACA,8CAA8C,sCAAsC;AACpF;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,OAAO;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,SAAS,IAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS,IAAI;AAC1B;AACA;AACA;AACA,yCAAyC,MAAM;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC9Qa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2CAA2C,mBAAO,CAAC,8FAAoB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8EAA8E,IAAI;AACtG,yCAAyC,gBAAgB;AACzD;AACA,0CAA0C,mBAAmB,cAAc,QAAQ,EAAE,OAAO,GAAG,2BAA2B,EAAE,0EAA0E;AACtM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gDAAgD,IAAI;AACvE,0EAA0E,gBAAgB;AAC1F,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAgD,IAAI;AAC1E,iFAAiF,gBAAgB;AACjG,+EAA+E,gBAAgB;AAC/F,gDAAgD,KAAK;AACrD;AACA,+CAA+C,cAAc;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,qGAAqG,IAAI;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,SAAS,OAAO,aAAa,GAAG,UAAU,SAAS;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,cAAc;AAC/D;AACA;AACA;AACA;AACA;AACA,kBAAe;AACf;;;;;;;;;;AC7Na;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,kBAAkB,mBAAO,CAAC,4EAAW;AACrC,uBAAuB,KAAK,iCAAiC,kBAAkB;AAC/E;;;;;;;;;;ACLa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,wBAAwB,GAAG,iCAAiC,GAAG,8BAA8B,GAAG,6BAA6B,GAAG,uBAAuB;AAChL;AACA,0CAA0C,mBAAO,CAAC,4FAAmB;AACrE,uBAAuB;AACvB,gDAAgD,mBAAO,CAAC,wGAAyB;AACjF,6BAA6B;AAC7B,iDAAiD,mBAAO,CAAC,0GAA0B;AACnF,8BAA8B;AAC9B,oDAAoD,mBAAO,CAAC,gHAA6B;AACzF,iCAAiC;AACjC,2CAA2C,mBAAO,CAAC,8FAAoB;AACvE,wBAAwB;AACxB,yCAAyC,mBAAO,CAAC,0FAAkB;AACnE,sBAAsB;AACtB,kBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC3Ba;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf,eAAe;AACf;;;;;;;;;;;;;;;;;;;;;ACJmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,EAAE,0CAAK;;AASR;;AAED;AACA,iEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AC3BgE;AACnC;AACE;AACkB;AACC;AACE;AAC9C;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,wFAAwF;AAClF;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,sDAAsD;AAChD;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,8DAA8D;AACxD,gCAAgC,0DAAc;AACrD;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA,sBAAsB,YAAY;AAClC;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA;AACA;AACA,yBAAyB,yBAAyB;AAClD,wBAAwB,SAAS;AACjC;AACA,SAAS;AACT;AACA,4BAA4B,iDAAI,OAAO,0DAAc;AACrD,+BAA+B,kDAAK;AACpC;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gDAAgD,YAAY,EAAE,gBAAgB;AAC9E,yBAAyB,0DAAc;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gDAAgD,WAAW;AAC3D,yBAAyB,0DAAc;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,kDAAkD,WAAW;AAC7D,yBAAyB,0DAAc;AACvC;AACA,SAAS;AACT,iBAAiB,0DAAc,UAAU;AACzC;AACA,SAAS;AACT,4BAA4B,yDAAgB;AAC5C;AACA,YAAY,kEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,UAAU,yCAAyC,IAAI;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;AACA,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,iBAAiB;AACrD;AACA,gCAAgC,UAAU,8BAA8B,IAAI;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,4BAA4B,6BAA6B;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,oBAAoB,mCAAmC;AACvD;AACA,4BAA4B,6BAA6B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA,gDAAgD,WAAW;AAC3D,0BAA0B,0DAAc;AACxC;AACA;AACA;AACA;AACA;AACA,kCAAkC,iDAAI,OAAO,0DAAc,UAAU;AACrE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,0CAA0C;AAC1C;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oFAAoF,cAAc,2BAA2B;AAC7H;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM,QAAQ,WAAW;AAC7D;AACA,4BAA4B,iDAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4BAA4B,EAAE,0DAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,4BAA4B,gDAAgD;AAC5E;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,+BAA+B;AAC/B;AACA;AACA,mEAAmE;AACnE;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,8BAA8B,0DAAc;AAC5C;AACA;AACA;AACA,8BAA8B,0DAAc;AAC5C;AACA;AACA;AACA,8BAA8B,0DAAc;AAC5C;AACA;AACA;AACA,8BAA8B,0DAAc;AAC5C;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0DAAc,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,0DAAc;AACnC;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mBAAmB;AACnB;AACA;AACA,0BAA0B,gEAA8B;AACxD;AACA;AACA,0BAA0B,gEAA8B;AACxD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjfuJ;AAC7G;AACV;AACqB;AACL;AAChD;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA,GAAG,EAAE;AACU;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G,eAAe,KAAK,IAAI,IAAI;AAC3I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAe;AACtC;AACA,uBAAuB,2DAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kKAA8B,SAAS,gBAAgB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS,GAAG,sDAAU,WAAW;AAC5D,4BAA4B,kEAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kDAAK;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,QAAQ,uKAAY,SAAS,aAAa;AAC1C;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,iBAAiB,KAAK,+CAAG,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yDAAa;AAC9B,uBAAuB,4DAAgB;AACvC,iBAAiB,yDAAa;AAC9B,uBAAuB,4DAAgB;AACvC,iBAAiB,yDAAa;AAC9B,uBAAuB,4DAAgB;AACvC;AACA,uBAAuB,4DAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,4DAAgB;AAC1D;AACA,8BAA8B,YAAY;AAC1C,yBAAyB,wDAAe,aAAa,MAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,6BAA6B;AAC7C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,4BAA4B,OAAO,EAAE,OAAO,GAAG,IAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sGAAsG,WAAW;AACjH,2GAA2G,WAAW;AACtH;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA,kCAAkC,0DAAc;AAChD;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,2DAAe;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA,mCAAmC,sBAAsB,EAAE,OAAO,EAAE,OAAO,EAAE,+BAA+B;AAC5G;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,eAAe;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0DAAc;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,IAAI,EAAE,OAAO,EAAE,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,gCAAgC;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpeA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,0EAA0E;AAC5D;AACf;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS,8BAA8B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,wCAAwC;AACxC,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,gDAAgD,eAAe;AAC/D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC,eAAe;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+BAA+B;AAC3C,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,cAAc,4CAA4C;AAC1D,cAAc;AACd;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/N8C;AAC0H;AAChF;AAC0H;AAClN;;;;;;;;;;;;;;;;;;;;;;;ACJoC;AAC7B,0BAA0B,gCAAgC,6CAAO,CAAC;AAClE;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AAClC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AAClC;AACP;AACA;AACA,CAAC,gCAAgC;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;;;;;;;;;;;;;;;ACxCmD;AACpC;AACf;AACA;AACA;AACA;AACA;AACA,iDAAiD,aAAa;AAC9D;AACA;AACA,4CAA4C,YAAY,2DAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,sCAAsC;AACtC,SAAS;AACT;AACA;AACA;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACpGA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA,YAAY,2BAA2B,IAAI;AAC3C,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB;AACA,gCAAgC,iCAAiC,GAAG,0BAA0B,IAAI,6BAA6B,IAAI;AACnI,SAAS;AACT;AACO,wDAAwD;AAC/D;AACA;AACA;AACA;AACA;AACA,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,2BAA2B,IAAI;AAC3C,WAAW,QAAQ;AACnB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA,mCAAmC,iCAAiC,GAAG,0BAA0B,IAAI,8BAA8B;AACnI;AACA,mCAAmC,iCAAiC,GAAG,0BAA0B,IAAI,8BAA8B;AACnI;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,MAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB,oDAAoD;AAC1E;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxNO;AACP;;;;;;;;;;;;;;;;ACDuD;AACI;AACpD,4BAA4B,kEAAgB;AACnD,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gEAAc;AACjC;AACA;AACA;;;;;;;;;;;;;;;ACfoC;AAC7B,0BAA0B,+BAA+B,6CAAO,CAAC;AACxE;;;;;;;;;;;;;;;;;ACFO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC/BA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACgE;AACpB;AAC5C;AACA;AACA,sBAAsB,yDAAe;AACrC;AACA;AACA;AACA;AACA,uBAAuB,oDAAe;AACtC,SAAS;AACT;AACA,uBAAuB,wDAAmB;AAC1C,SAAS;AACT;AACA;AACA,mBAAmB,wDAAmB;AACtC;AACA,CAAC;AACD;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qCAAqC,oCAAoC;AACzE;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,KAAK;AACL;AACO;AACP;AACA,kFAAkF,cAAc,qBAAqB;AACrH,KAAK;AACL;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;AChFA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA,8BAA8B,kKAA8B,SAAS,gBAAgB;AACrF;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,sBAAsB,kKAA8B;AACpD;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;;;;;AC3CA;AACO;AACP;;;;;;;;;;;;;;;;;;ACFA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACmD;AACJ;AACO;AACR;AAC/B;AACf,iCAAiC;AACjC;AACA,qDAAqD,EAAE,2DAAe;AACtE,qBAAqB,0DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAG,gBAAgB,SAAS,YAAY,uBAAuB;AAClG,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAG,gBAAgB,SAAS,UAAU,GAAG,KAAK,uBAAuB;AACxG,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mCAAmC,gDAAI,gBAAgB,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,uBAAuB;AAC5C,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAG,gBAAgB,SAAS,UAAU,GAAG;AAC5E;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI,uBAAuB;AAC5C,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAI,gBAAgB,SAAS,UAAU,GAAG,WAAW,IAAI,uBAAuB;AACnH,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kDAAM,gBAAgB,SAAS,UAAU,GAAG,KAAK,IAAI,uBAAuB;AAC/G,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;;AClKA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACkF;AAC3B;AACS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACe;AACf,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB,0DAAY;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,4DAA4D,yCAAyC,oCAAoC;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA,gDAAgD,SAAS,UAAU,MAAM,mBAAmB,6BAA6B,0EAA0E,yBAAyB,IAAI;AAChO;AACA;AACA;AACA,gCAAgC,kDAAkD;AAClF;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,MAAM;AACxE;AACA;AACA;AACA,gDAAgD,qCAAqC;AACrF,8DAA8D,mBAAmB,oCAAoC;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,qBAAqB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gCAAgC,qCAAqC;AACrE;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA,mCAAmC,gDAAI,gBAAgB,SAAS,sBAAsB,MAAM,KAAK,IAAI,SAAS;AAC9G;AACA;AACA;AACA,8BAA8B,qDAAY;AAC1C;AACA,yBAAyB,QAAQ,wCAAwC;AACzE;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAI,gBAAgB,SAAS;AAChE;AACA;AACA;AACA;AACA,iBAAiB,IAAI,uBAAuB;AAC5C,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAI,gBAAgB,SAAS;AAChE;AACA;AACA;AACA;AACA,iBAAiB,IAAI,uBAAuB;AAC5C,yBAAyB,QAAQ,gBAAgB;AACjD;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gDAAI,gBAAgB,SAAS,eAAe,MAAM,mBAAmB,WAAW,6EAA6E,+BAA+B,IAAI,MAAM,uBAAuB;AAC9P;AACA,mCAAmC,kDAAkD;AACrF;AACA,+CAA+C,SAAS,EAAE,eAAe,EAAE,mBAAmB;AAC9F,yBAAyB;AACzB,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gDAAI,gBAAgB,SAAS,eAAe,cAAc,KAAK,kBAAkB,IAAI,uBAAuB;AAC/I;AACA,mCAAmC,kDAAkD;AACrF;AACA;AACA,6EAA6E,YAAY;AACzF,2CAA2C,SAAS,EAAE,gBAAgB,EAAE,mBAAmB;AAC3F,oCAAoC;AACpC;AACA;AACA;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mJAAmJ;AACnJ,0DAA0D,oBAAoB;AAC9E;AACA;AACA,kCAAkC,+CAAG,gBAAgB,SAAS,GAAG,WAAW,GAAG,MAAM,EAAE,YAAY;AACnG;AACA;AACA,iBAAiB;AACjB;AACA,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+CAAG,gBAAgB,SAAS,eAAe,MAAM;AACpF;AACA,iBAAiB;AACjB,yBAAyB,MAAM,8DAAgB;AAC/C;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAI,gBAAgB,SAAS,UAAU,MAAM;AACnE;AACA,iBAAiB;AACjB,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc,4BAA4B,4DAAmB;AACjF;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kDAAkD;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,+IAA+I;AAC/I;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA,oBAAoB,wBAAwB,SAAS,GAAG,WAAW,UAAU,MAAM,EAAE,YAAY,IAAI;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kDAAM,gBAAgB,SAAS,UAAU,cAAc,KAAK,iBAAiB,IAAI,uBAAuB;AAC3I,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS,YAAY,GAAG,KAAK,uBAAuB;AACrG,oBAAoB;AACpB,WAAW;AACX;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAS,YAAY,GAAG;AACxC,eAAe,SAAS;AACxB,eAAe;AACf;AACA,oBAAoB;AACpB,WAAW;AACX;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,uCAAuC,oBAAoB;AACpI,mCAAmC,gDAAI,gBAAgB,SAAS,eAAe,cAAc,WAAW,uBAAuB;AAC/H,yBAAyB;AACzB;AACA;AACA,oBAAoB,2DAAc;AAClC,6BAA6B;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc,GAAG,KAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACriBA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACyD;AACC;AACF;AACsB;AACgD;AAClF;AAC6B;AACX;AAC9D;AACA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gEAAkB;AAC/C,8BAA8B,aAAa;AAC3C,0BAA0B,aAAa;AACvC,6BAA6B,aAAa;AAC1C,+BAA+B,aAAa;AAC5C;AACA,wCAAwC,6CAA6C;AACrF;AACA,gBAAgB,8DAAkB;AAClC,sBAAsB,oEAAwB;AAC9C,gDAAgD,EAAE,gEAAoB,KAAK,+BAA+B;AAC1G,oBAAoB,kEAAsB;AAC1C;AACA,yBAAyB,kEAAoB,sDAAsD;AACnG;AACA;AACA;AACA,6GAA6G;AAC7G;AACA;AACA;AACA,oCAAoC;AACpC;AACA,iJAAiJ,cAAc;AAC/J,iBAAiB;AACjB,aAAa;AACb;AACA,qBAAqB,yDAAa;AAClC,iEAAiE,qEAAqE;AACtI,wBAAwB,mEAAe,IAAI,aAAa;AACxD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAe;AAClC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,+DAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iBAAiB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,SAAS;AACT;AACA,8BAA8B,mGAAmG;AACjI;AACA,qCAAqC,iBAAiB;AACtD,uBAAuB,iBAAiB;AACxC;AACA,mBAAmB,uEAAkB;AACrC;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,iEAAc,iDAAiD,cAAc,wBAAwB,0BAA0B,qEAAqE;AACvN;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnO8C;AACZ;AACuB;AAC8E;AACjG;AACuB;AAC7D;AACA;AACA;AACO;AACP,eAAe,uDAAc;AAC7B;AACA;;;;;;;;;;;;;;;ACZ+C;AACxC,iCAAiC,yDAAU;AAClD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACNoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,gCAAgC,OAAO,GAAG,6CAAO,CAAC;AAC5E;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;AC7BA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AAC8E;AACvE;AACP;AACA;AACA;AACA;AACA;AACA,iBAAiB,4DAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,eAAe,yDAAgB;AAC/B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA,0DAA0D,WAAW,SAAS;AAC9E,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;AC9CA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACO;AACA;AACP,YAAY,sFAAsF;AAClG,YAAY,0HAA0H;AACtI;AACA,0CAA0C;AAC1C,4CAA4C;AAC5C,gDAAgD;AAChD,8CAA8C;AAC9C,0EAA0E,YAAY;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtCO;AACP;;;;;;;;;;ACDa;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC,GAAG,+BAA+B,GAAG,4BAA4B,GAAG,oCAAoC;AAC1I;AACA,iBAAiB,mBAAO,CAAC,iDAAY;AACrC,gEAA+D,EAAE,qCAAqC,mDAAmD,EAAC;AAC1J,wDAAuD,EAAE,qCAAqC,2CAA2C,EAAC;AAC1I,2DAA0D,EAAE,qCAAqC,8CAA8C,EAAC;AAChJ,8DAA6D,EAAE,qCAAqC,iDAAiD,EAAC;;;;;;;;;;;ACZzI;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC,GAAG,+BAA+B,GAAG,4BAA4B,GAAG,oCAAoC;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,MAAM;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,2BAA2B;AACtF;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;;;;ACvIrB;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC,GAAG,yBAAyB;AAC9D,gBAAgB,mBAAO,CAAC,8CAAU;AAClC,mBAAmB,mBAAO,CAAC,oDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;;;;AClFrB;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC,GAAG,yBAAyB;AAC9D;AACA,aAAa,mBAAO,CAAC,iDAAQ;AAC7B,qDAAoD,EAAE,qCAAqC,oCAAoC,EAAC;AAChI,8DAA6D,EAAE,qCAAqC,6CAA6C,EAAC;;;;;;;;;;;ACVrI;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW,cAAc,KAAK;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,UAAU,cAAc,KAAK;AACtF;AACA;AACA;AACA;AACA;AACA,0EAA0E,WAAW;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,WAAW,cAAc,KAAK;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,eAAe;AAC9D,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA,4CAA4C,MAAM;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA,4CAA4C,eAAe;AAC3D,qDAAqD,eAAe;AACpE,qDAAqD,eAAe;AACpE,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,MAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE;AACA,kDAAkD,eAAe;AACjE;AACA,qDAAqD,eAAe;AACpE;AACA,yDAAyD,eAAe;AACxE;AACA,yDAAyD,eAAe;AACxE,gEAAgE,MAAM;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE,kDAAkD,eAAe;AACjE,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,mCAAmC,2BAA2B,iBAAiB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA;AACA,gEAAgE,sCAAsC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE,oDAAoD,eAAe;AACnE,oDAAoD,eAAe;AACnE;AACA;AACA,sCAAsC,uCAAuC;AAC7E;AACA;AACA;AACA;AACA,2DAA2D,YAAY;AACvE;AACA;AACA;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uCAAuC;AACjF;AACA;AACA;AACA,mEAAmE,iBAAiB;AACpaAAa;AACb;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA,mDAAmD,MAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,UAAU;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,iBAAiB,EAAE,oBAAoB;AAC5F;AACA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,sCAAsC;AACxF,8CAA8C,UAAU,UAAU,UAAU,UAAU,UAAU;AAChG;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,UAAU;AACzE;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sDAAsD,iBAAiB,EAAE,oBAAoB;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,gBAAgB;AAClE,8CAA8C,UAAU,UAAU,UAAU,UAAU,UAAU;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,sDAAsD,eAAe;AACrE,qDAAqD,eAAe;AACpE;AACA,kDAAkD,eAAe;AACjE,uDAAuD,oCAAoC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,wBAAwB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa,EAAE,gBAAgB,kBAAkB,QAAQ;AAC5F,sCAAsC,gBAAgB,EAAE,mBAAmB,qBAAqB,QAAQ;AACxG,oCAAoC,cAAc,EAAE,iBAAiB,mBAAmB,QAAQ;AAChG,aAAa;AACb;AACA;AACA;AACA,4DAA4D,MAAM,UAAU,KAAK;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM,QAAQ,SAAS;AAC3D;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS,GAAG,KAAK;AAC/C,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,8BAA8B,SAAS,GAAG,UAAU;AACpD,iDAAiD,OAAO;AACxD;AACA;AACA;AACA,8BAA8B,SAAS,EAAE,KAAK;AAC9C,kDAAkD,OAAO;AACzD;AACA;AACA;AACA;AACA,sBAAsB,SAAS,GAAG,KAAK;AACvC,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA,0BAA0B,SAAS,GAAG,KAAK;AAC3C,oCAAoC,QAAQ,OAAO,OAAO;AAC1D;AACA;AACA,+CAA+C,QAAQ;AACvD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,UAAU;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,sBAAsB;AACtB;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE,+DAA+D,0BAA0B;AACzF,6DAA6D,0BAA0B;AACvF;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D;AACA,kEAAkE,YAAY;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE,sDAAsD,eAAe;AACrE,qEAAqE,YAAY;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,wBAAwB,KAAK,qBAAqB;AACjG,qCAAqC,YAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qCAAqC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,uBAAuB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qBAAqB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,SAAS;AACzD;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO;AACzD;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,YAAY;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,YAAY;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY,OAAO,WAAW;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,MAAM;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,IAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,6CAA6C,wBAAwB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,wBAAwB;AAC5E;AACA;AACA;AACA;AACA;AACA,sDAAsD,0BAA0B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA,yDAAyD,UAAU;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,2BAA2B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,wEAAwE,OAAO;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,OAAO;AAC7E;AACA;AACA;AACA;AACA;AACA,gEAAgE,OAAO;AACvE;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW;AACrE;AACA;AACA,yCAAyC,WAAW,OAAO,aAAa;AACxE;AACA,8BAA8B,cAAc;AAC5C,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW;AACrtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB,mCAAmC,SAAS;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gBAAgB,4CAA4C,SAAS;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA;AACA;AACA,wDAAwD,6BAA6B;AACrF;AACA;AACA,wDAAwD,yBAAyB;AACjF;AACA;AACA,wDAAwD,iCAAiC;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8BAA8B;AAC1F;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA,oBAAoB,kCAAkC,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA,uEAAuE,2BAA2B;AAClG;AACA;AACA;AACA;AACA,4DAA4D,iCAAiC;AAC7F;AACA;AACA;AACA;AACA,wDAAwD,8BAA8B;AACtF;AACA;AACA;AACA;AACA,4DAA4D,WAAW;AACvE;AACA;AACA,wDAAwD,8BAA8B;AACtF;AACA;AACA;AACA,gCAAgC,qCAAqC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,WAAW;AAChE;AACA;AACA,uDAAuD,eAAe;AACtE;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,8BAA8B;AAC1E;AACA;AACA;AACA,oDAAoD,8BAA8B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,oCAAoC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sCAAsC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,8CAA8C,8BAA8B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+BAA+B;AACnD;AACA,mDAAmD,MAAM,GAAG,0BAA0B;AACtF;AACA;AACA;AACA,yDAAyD,WAAW,SAAS,WAAW,mBAAmB,MAAM;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E,yDAAyD,eAAe;AACxE,uDAAuD,eAAe;AACtE;AACA;AACA;AACA,4DAA4D,6BAA6B;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,OAAO;AAClD,wDAAwD,SAAS;AACjE;AACA,4BAA4B,eAAe,qBAAqB,OAAO;AACvE;AACA;AACA,gCAAgC,UAAU;AAC1C;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC,qBAAqB,OAAO;AAC5B,2BAA2B,OAAO;AAClC,wCAAwC,OAAO;AAC/C,kCAAkC,OAAO;AACzC;AACA;AACA;AACA,0CAA0C,UAAU,IAAI,aAAa,QAAQ,kBAAkB;AAC/F;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;AAChE,wEAAwE,OAAO;AAC/E,4BAA4B,YAAY,6BAA6B,OAAO;AAC5E;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO,GAAG,EAAE;AAChC;AACA,KAAK;AACL,mCAAmC,eAAe;AAClD;AACA,yBAAyB,UAAU,cAAc,eAAe,GAAG,uBAAuB;AAC1F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM,KAAK,MAAM,cAAc,QAAQ;AAC3E;AACA;AACA,YAAY,QAAQ,IAAI,MAAM;AAC9B,mBAAmB,MAAM;AACzB,iBAAiB,MAAM;AACvB,sCAAsC,MAAM;AAC5C,wBAAwB,MAAM;AAC9B;AACA,6BAA6B,0BAA0B,0BAA0B,MAAM;AACvF;AACA,oBAAoB,8BAA8B;AAClD;AACA,yBAAyB,MAAM,IAAI,SAAS;AAC5C;AACA;AACA,wDAAwD,MAAM,IAAI,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gCAAgC,OAAO,SAAS,MAAM;AACtD,8CAA8C,YAAY;AAC1D;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA;AACA,0BAA0B,QAAQ,IAAI,MAAM;AAC5C,gDAAgD,WAAW;AAC3D,uCAAuC,MAAM,IAAI,SAAS,YAAY,QAAQ;AAC9E,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,8CAA8C,OAAO,aAAa,QAAQ;AAC1E;AACA;AACA,uCAAuC,OAAO,kBAAkB,QAAQ;AACxE;AACA;AACA;AACA,iDAAiD,OAAO,OAAO,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D,8CAA8C,eAAe;AAC7D,4CAA4C,eAAe;AAC3D;AACA;AACA,qEAAqE,KAAK,YAAY,MAAM;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE,sDAAsD,eAAe;AACrE;AACA;AACA;AACA,sDAAsD,iBAAiB,oBAAoB,yCAAyC;AACpI,qDAAqD,gBAAgB,oBAAoB,wCAAwC;AACjI;AACA;AACA,kDAAkD,UAAU;AAC5D,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,KAAK,YAAY,MAAM,UAAU,IAAI;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,eAAe;AAC/D,iDAAiD,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe;AACjE,sDAAsD,eAAe;AACrE;AACA;AACA;AACA,sDAAsD,iBAAiB,oBAAoB,yCAAyC;AACpI,oDAAoD,eAAe,oBAAoB,uCAAuC;AAC9H,qDAAqD,gBAAgB,oBAAoB,wCAAwC;AACjI;AACA;AACA,kDAAkD,UAAU;AAC5D,uCAAuC,YAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU,KAAK,KAAK,cAAc,QAAQ;AAC7E;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E;AACA,+DAA+D,QAAQ;AACvE;AACA;AACA;AACA;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA,qCAAqC,UAAU,IAAI,GAAG,GAAG,MAAM;AAC/D;AACA;AACA,oDAAoD,UAAU;AAC9D,6CAA6C,aAAa;AAC1D,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,IAAI,MAAM;AACzC,6CAA6C,QAAQ;AACrD,mCAAmC,MAAM,KAAK,KAAK,cAAc,QAAQ;AACzE,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA,qCAAqC,MAAM,IAAI,KAAK;AACpD;AACA;AACA,mDAAmD,OAAO,OAAO,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM,KAAK,MAAM;AACrD,gCAAgC,QAAQ;AACxC;AACA;AACA,YAAY,QAAQ,IAAI,MAAM;AAC9B,mBAAmB,MAAM;AACzB,iBAAiB,MAAM;AACvB,sCAAsC,MAAM;AAC5C,wBAAwB,MAAM;AAC9B;AACA,6BAA6B,0BAA0B,0BAA0B,MAAM;AACvF;AACA,oBAAoB,8BAA8B;AAClD;AACA,yBAAyB,MAAM,IAAI,SAAS;AAC5C;AACA;AACA;AACA,wDAAwD,OAAO,kBAAkB,SAAS;AAC1F;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO,cAAc,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gCAAgC,OAAO,SAAS,MAAM;AACtD,8CAA8C,YAAY;AAC1D;AACA;AACA,6CAA6C,OAAO;AACpD;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,0BAA0B,QAAQ,IAAI,MAAM;AAC5C,gDAAgD,WAAW;AAC3D,uCAAuC,MAAM,IAAI,QAAQ;AACzD,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,8CAA8C,OAAO,aAAa,QAAQ;AAC1E;AACA;AACA,uCAAuC,OAAO,kBAAkB,QAAQ;AACxE;AACA;AACA;AACA,iDAAiD,OAAO,OAAO,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU,KAAK,KAAK;AACvD;AACA;AACA;AACA,+CAA+C,MAAM;AACrD;AACA;AACA;AACA,4BAA4B,QAAQ,IAAI,UAAU;AAClD,2BAA2B,QAAQ,IAAI,UAAU;AACjD,kDAAkD,aAAa;AAC/D,iDAAiD,YAAY;AAC7D,+CAA+C,aAAa;AAC5D,8CAA8C,YAAY;AAC1D;AACA;AACA;AACA;AACA;AACA,qCAAqC,UAAU,IAAI,GAAG,GAAG,MAAM;AAC/D;AACA;AACA,oDAAoD,UAAU;AAC9D,6CAA6C,aAAa;AAC1D,4CAA4C,YAAY;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,IAAI,MAAM;AACzC,6CAA6C,QAAQ;AACrD,mCAAmC,MAAM,KAAK,KAAK;AACnD,8CAA8C,QAAQ;AACtD;AACA;AACA;AACA,qCAAqC,MAAM,IAAI,KAAK;AACpD;AACA;AACA,mDAAmD,OAAO,OAAO,QAAQ;AACzE;AACA;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,gDAAgD,WAAW,UAAU,WAAW,UAAU,mBAAmB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,GAAG,GAAG,KAAK;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA,8CAA8C,SAAS,UAAU,SAAS,UAAU,iBAAiB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,GAAG,GAAG,KAAK;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mBAAmB;AACxE,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA,uEAAuE,mBAAmB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,mBAAmB,0BAA0B,WAAW;AACrH;AACA;AACA,uDAAuD,WAAW;AAClE;AACA;AACA,+DAA+D,WAAW;AAC1E;AACA;AACA;AACA;AACA,qEAAqE,mBAAmB;AACxF;AACA;AACA,2CAA2C,mBAAmB,6CAA6C,2CAA2C;AACtJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,mBAAmB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,mBAAmB,wBAAwB,aAAa;AACvH;AACA;AACA,wEAAwE,aAAa;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,mBAAmB,0BAA0B,aAAa;AACnI;AACA;AACA,2EAA2E,aAAa;AACxF;AACA;AACA;AACA,mFAAmF,aAAa;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,aAAa;AACvF;AACA;AACA;AACA;AACA;AACA,0EAA0E,mBAAmB;AAC7F;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB,8BAA8B,mBAAmB;AAChH;AACA;AACA,iCAAiC,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE,yDAAyD,eAAe;AACxE,uDAAuD,eAAe;AACtE,yCAAyC,IAAI;AAC7C;AACA;AACA,+DAA+D,mBAAmB;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kCAAkC,GAAG,qBAAqB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,UAAU;AAC1D;AACA;AACA,sEAAsE,mBAAmB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kCAAkC,GAAG,mBAAmB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,UAAU;AACxD;AACA;AACA,oEAAoE,mBAAmB;AACvF;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,aAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,kBAAkB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,WAAW;AAC9E;AACA;AACA;AACA;AACA,6EAA6E,YAAY,MAAM,WAAW;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY;AAChE;AACA,gCAAgC,YAAY;AAC5C,gCAAgC,YAAY;AAC5C,yCAAyC,gCAAgC;AACzE,sCAAsC,8CAA8C;AACpF,mCAAmC,YAAY;AAC/C,mCAAmC,0BAA0B;AAC7D;AACA;AACA;AACA;AACA,yEAAyE,SAAS;AAClF;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,KAAK;AACjF;AACA;AACA;AACA;AACA,oEAAoE,YAAY;AAChF;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA,sDAAsD,YAAY;AAClE,qEAAqE;AACrE;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA,6DAA6D,YAAY;AACzE;AACA;AACA;AACA,yBAAyB,aAAa;AACtC;AACA;AACA;AACA,oEAAoE,aAAa;AACjF;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA,qEAAqE,aAAa;AAClF;AACA,qEAAqE;AACrE;AACA;AACA;AACA,iEAAiE,aAAa;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,wBAAwB;AACzD;AACA;AACA;AACA;AACA,yBAAyB,MAAM,IAAI,oBAAoB,KAAK,iBAAiB;AAC7E,KAAK;AACL;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA,wDAAwD,MAAM,GAAG,wBAAwB;AACzF,+BAA+B,uBAAuB;AACtD,mCAAmC,qBAAqB;AACxD,oCAAoC,0BAA0B;AAC9D,kCAAkC,oBAAoB,GAAG,oBAAoB,IAAI,+BAA+B,GAAG,uBAAuB;AAC1I;AACA;AACA,gCAAgC,mBAAmB,uDAAuD,MAAM;AAChH;AACA;AACA,sDAAsD,OAAO,cAAc,MAAM,aAAa,mBAAmB;AACjH;AACA,oEAAoE;AACpE;AACA;AACA,kEAAkE,mBAAmB;AACrF;AACA;AACA;AACA;AACA,gDAAgD,OAAO,WAAW,mBAAmB;AACrF;AACA;AACA,oDAAoD,MAAM,GAAG,uBAAuB;AACpF;AACA;AACA,wEAAwE,OAAO;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yBAAyB;AAC1D;AACA;AACA;AACA;AACA,yBAAyB,MAAM,IAAI,qCAAqC,OAAO,yCAAyC;AACxH,KAAK;AACL;AACA;AACA;AACA,oBAAoB,6BAA6B;AACjD;AACA,kDAAkD,MAAM,GAAG,yBAAyB;AACpF,8CAA8C,MAAM;AACpD,kCAAkC,wCAAwC;AAC1E,kCAAkC,mCAAmC;AACrE,iCAAiC,qDAAqD;AACtF,+BAA+B,uBAAuB;AACtD,kCAAkC,+BAA+B,GAAG,+BAA+B,IAAI,6BAA6B,GAAG,4BAA4B;AACnK;AACA;AACA,gCAAgC,wBAAwB,iDAAiD,MAAM;AAC/G;AACA;AACA,sDAAsD,OAAO,cAAc,MAAM,aAAa,wBAAwB;AACtH;AACA,oEAAoE;AACpE;AACA;AACA,kEAAkE,wBAAwB;AAC1F;AACA;AACA;AACA;AACA,gDAAgD,OAAO,WAAW,mBAAmB;AACrF;AACA;AACA,8CAA8C,MAAM,GAAG,wBAAwB;AAC/E;AACA;AACA,kEAAkE,OAAO;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mBAAmB;AACtE,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,mBAAmB,IAAI,WAAW;AACnF,8CAA8C,YAAY;AAC1D;AACA;AACA,sEAAsE,mBAAmB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA,oBAAoB,8BAA8B,OAAO;AACzD;AACA,gDAAgD,MAAM,GAAG,8BAA8B;AACvF,+BAA+B,QAAQ;AACvC;AACA;AACA,gCAAgC,sBAAsB,+CAA+C,MAAM;AAC3G;AACA;AACA,sDAAsD,OAAO,cAAc,MAAM,aAAa,sBAAsB;AACpH;AACA,oEAAoE;AACpE;AACA;AACA,kEAAkE,sBAAsB;AACxF;AACA;AACA;AACA;AACA,gDAAgD,OAAO,WAAW,mBAAmB;AACrF;AACA;AACA,4CAA4C,MAAM,GAAG,6BAA6B,IAAI,QAAQ;AAC9F;AACA;AACA,gEAAgE,OAAO;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0CAA0C;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,oBAAoB,EAAE,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,+JAA+J;AACzK,UAAU,iJAAiJ;AAC3J,UAAU,iKAAiK;AAC3K,UAAU,yIAAyI;AACnJ,UAAU;AACV;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM,oBAAoB,WAAW;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM,eAAe,SAAS;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,MAAM,KAAK,aAAa;AACjE;AACA;AACA;AACA;AACA,mEAAmE,aAAa;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA,kEAAkE,aAAa,UAAU,OAAO;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,sCAAsC,WAAW,MAAM;AACzG;AACA;AACA,0EAA0E,MAAM;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,aAAa;AAC5E;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA,mDAAmD,mBAAmB,SAAS,wBAAwB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK;AAC3D;AACA;AACA;AACA;AACA,sDAAsD,WAAW;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,8CAA8C,eAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,kBAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,yBAAyB;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,iBAAiB,GAAG,iBAAiB;AAC/E;AACA;AACA;AACA;AACA,6CAA6C,WAAW,eAAe,MAAM;AAC7E;AACA;AACA;AACA;AACA,8BAA8B,WAAW,sBAAsB,aAAa;AAC5E;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA,0CAA0C,yCAAyC,EAAE,UAAU;AAC/F;AACA;AACA;AACA,8CAA8C,WAAW;AACzD;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB,uBAAuB,UAAU;AAC7E;AACA,uDAAuD,UAAU;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,UAAU,KAAK,WAAW;AAClF;AACA;AACA;AACA;AACA;AACA,kDAAkD,WAAW,UAAU,YAAY;AACnF,6BAA6B,WAAW,4CAA4C,sBAAsB;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO,qBAAqB,OAAO,QAAQ,UAAU;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,OAAO,aAAa,OAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,MAAM,OAAO,SAAS;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D,8CAA8C,eAAe;AAC7D,8DAA8D,YAAY;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mBAAmB,EAAE,iDAAiD;AAClG,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA,oDAAoD,MAAM,GAAG,IAAI,GAAG,KAAK;AACzE,6CAA6C,MAAM,SAAS,IAAI,UAAU,KAAK;AAC/E;AACA;AACA;AACA,6DAA6D,MAAM,GAAG,IAAI,GAAG,KAAK;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,gBAAgB;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,iDAAiD,iBAAiB;AAClE;AACA;AACA;AACA;AACA,4BAA4B,gCAAgC;AAC5D;AACA;AACA;AACA;AACA,+DAA+D,YAAY;AAC3E;AACA,6BAA6B,UAAU,IAAI,UAAU;AACrD,SAAS;AACT;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,iBAAiB,GAAG,iBAAiB;AAC9E;;;;;;;;;;;ACxlIa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,0BAA0B;AAC1B;AACA,kBAAkB,mBAAO,CAAC,6DAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mDAAmD;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACreAAe;AAC9E,gEAAgE,eAAe;AAC/E;AACA,4CAA4C,WAAW;AACvD,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA,qDAAqD,cAAc;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;ACxLa;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,uBAAuB;AAChD,eAAe,mBAAO,CAAC,gDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA,sBAAsB;;;;;;;;;;;AC5GT;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,gBAAgB,mBAAO,CAAC,mCAAa;AACrC,gBAAgB,mBAAO,CAAC,8CAAU;AAClC,gBAAgB,mBAAO,CAAC,8CAAU;AAClC,eAAe,mBAAO,CAAC,4CAAS;AAChC,qBAAqB,mBAAO,CAAC,wDAAe;AAC5C,sBAAsB,mBAAO,CAAC,0DAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,aAAa,mCAAmC,iBAAiB,kBAAkB,qBAAqB;AACxK;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,UAAU,KAAK,YAAY;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,WAAW,GAAG,WAAW;AAC9F;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wCAAwC;AAC/F,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wCAAwC;AAC/F,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;;;;ACzQb;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,uBAAuB,GAAG,0BAA0B;AAC7E;AACA,aAAa,mBAAO,CAAC,gDAAQ;AAC7B,sDAAqD,EAAE,qCAAqC,qCAAqC,EAAC;AAClI;AACA,gBAAgB,mBAAO,CAAC,sDAAW;AACnC,mDAAkD,EAAE,qCAAqC,qCAAqC,EAAC;AAC/H,kDAAiD,EAAE,qCAAqC,oCAAoC,EAAC;;;;;;;;;;;ACbhH;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B,GAAG,+BAA+B,GAAG,4BAA4B;AAC5F;AACA,kBAAkB,mBAAO,CAAC,sDAAa;AACvC,wDAAuD,EAAE,qCAAqC,4CAA4C,EAAC;AAC3I,2DAA0D,EAAE,qCAAqC,+CAA+C,EAAC;AACjJ,uDAAsD,EAAE,qCAAqC,2CAA2C,EAAC;;;;;;;;;;;ACX5H;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,2BAA2B,GAAG,+BAA+B,GAAG,4BAA4B;AAC5F,yBAAyB,mBAAO,CAAC,0DAAmB;AACpD,qBAAqB,mBAAO,CAAC,wDAAe;AAC5C,mBAAmB,mBAAO,CAAC,iDAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,cAAc,WAAW,iBAAiB,GAAG,YAAY;AAChI;AACA;AACA;AACA,4CAA4C,aAAa,iBAAiB,eAAe;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,aAAa;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,aAAa,GAAG,YAAY;AACjH;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,aAAa,GAAG,YAAY;AACzG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,iFAAiF;AAC3F,UAAU,iFAAiF;AAC3F,UAAU,iFAAiF;AAC3F,UAAU,iFAAiF;AAC3F,UAAU;AACV;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,+CAA+C,MAAM,eAAemCAAmC,iBAAiB;AACpD;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA,2CAA2C,sCAAsC;AACjF;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA,2CAA2C,sCAAsC;AACjF;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA,2CAA2C,sCAAsC;AACjF;AACA,qBAAqB;AACrB;AACA;AACA;AACA,mCAAmC,gCAAgC;AACnE;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA,KAAK;AACL;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,2BAA2B;;;;;;;;;;;AC7ad;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,6BAA6B,GAAG,+BAA+B;AACxF,gBAAgB,mBAAO,CAAC,8CAAU;AAClC,qBAAqB,mBAAO,CAAC,uDAAc;AAC3C,iBAAiB,mBAAO,CAAC,+CAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI,YAAY;AACzB;AACA;AACA,KAAK;AACL;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,sBAAsB;;;;;;;;;;;ACtOT;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,mBAAmB,GAAG,qBAAqB,GAAG,qBAAqB,GAAG,sBAAsB;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;;;;ACjFX;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB,GAAG,6BAA6B,GAAG,+BAA+B,GAAG,wBAAwB,GAAG,mBAAmB,GAAG,qBAAqB,GAAG,qBAAqB,GAAG,sBAAsB,GAAG,0BAA0B,GAAG,2BAA2B,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,iBAAiB,GAAG,oBAAoB;AAC7X;AACA,eAAe,mBAAO,CAAC,+CAAU;AACjC,gDAA+C,EAAE,qCAAqC,iCAAiC,EAAC;AACxH,6CAA4C,EAAE,qCAAqC,8BAA8B,EAAC;AAClH,gDAA+C,EAAE,qCAAqC,iCAAiC,EAAC;AACxH,gDAA+C,EAAE,qCAAqC,iCAAiC,EAAC;AACxH,gDAA+C,EAAE,qCAAqC,iCAAiC,EAAC;AACxH;AACA,mBAAmB,mBAAO,CAAC,uDAAc;AACzC,uDAAsD,EAAE,qCAAqC,4CAA4C,EAAC;AAC1I,sDAAqD,EAAE,qCAAqC,2CAA2C,EAAC;AACxI;AACA,oBAAoB,mBAAO,CAAC,yDAAe;AAC3C,kDAAiD,EAAE,qCAAqC,wCAAwC,EAAC;AACjI,iDAAgD,EAAE,qCAAqC,uCAAuC,EAAC;AAC/H,iDAAgD,EAAE,qCAAqC,uCAAuC,EAAC;AAC/H,+CAA8C,EAAE,qCAAqC,qCAAqC,EAAC;AAC3H,oDAAmD,EAAE,qCAAqC,0CAA0C,EAAC;AACrI;AACA,mBAAmB,mBAAO,CAAC,uDAAc;AACzC,2DAA0D,EAAE,qCAAqC,gDAAgD,EAAC;AAClJ,yDAAwD,EAAE,qCAAqC,8CAA8C,EAAC;AAC9I,kDAAiD,EAAE,qCAAqC,uCAAuC,EAAC;;;;;;;;;;;AC7BnH;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB,GAAG,oBAAoB,GAAG,oBAAoB,GAAG,iBAAiB,GAAG,oBAAoB;AAC7G,eAAe,mBAAO,CAAC,kDAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE,qDAAqD,eAAe;AACpE,sDAAsD,eAAe;AACrE,oDAAoD,eAAe;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE,wDAAwD,eAAe;AACvE,yDAAyD,eAAe;AACxE,uDAAuD,eAAe;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,eAAe;AAClE;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,yBAAyB;AAC/E;AACA;AACA;AACA,kDAAkD,eAAe;AACjE;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;ACpHP;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B,GAAG,2BAA2B;AACxD,eAAe,mBAAO,CAAC,kDAAe;AACtC,iBAAiB,mBAAO,CAAC,+CAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;;;;ACvDb;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB;AACA,cAAc,mBAAO,CAAC,sDAAS;AAC/B,mDAAkD,EAAE,qCAAqC,mCAAmC,EAAC;;;;;;;;;;;ACThH;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,mBAAmB,mBAAO,CAAC,iDAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,uBAAuB;;;;;;;;;;;AC7DV;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,2BAA2B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;AC7DV;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,wBAAwB,GAAG,mBAAmB,GAAG,mBAAmB;AACvF,gBAAgB,mBAAO,CAAC,mCAAa;AACrC,gBAAgB,mBAAO,CAAC,8CAAU;AAClC,oBAAoB,mBAAO,CAAC,oDAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA,gCAAgC,qCAAqC;AACrE;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qCAAqC;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,gBAAgB;;;;;;;;;;;AC1FH;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB,GAAG,wBAAwB,GAAG,mBAAmB,GAAG,mBAAmB,GAAG,uBAAuB,GAAG,2BAA2B;AAC/I;AACA,kBAAkB,mBAAO,CAAC,oDAAa;AACvC,uDAAsD,EAAE,qCAAqC,2CAA2C,EAAC;AACzI,mDAAkD,EAAE,qCAAqC,uCAAuC,EAAC;AACjI;AACA,gBAAgB,mBAAO,CAAC,gDAAW;AACnC,+CAA8C,EAAE,qCAAqC,iCAAiC,EAAC;AACvH,+CAA8C,EAAE,qCAAqC,iCAAiC,EAAC;AACvH,oDAAmD,EAAE,qCAAqC,sCAAsC,EAAC;AACjI,4CAA2C,EAAE,qCAAqC,8BAA8B,EAAC;;;;;;;;;;;AChBpG;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sCAAsC,GAAG,2BAA2B;AACpE;AACA,mBAAmB,mBAAO,CAAC,4DAAc;AACzC,uDAAsD,EAAE,qCAAqC,4CAA4C,EAAC;AAC1I,kEAAiE,EAAE,qCAAqC,uDAAuD,EAAC;;;;;;;;;;;ACVnJ;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sCAAsC,GAAG,2BAA2B;AACpE,gBAAgB,mBAAO,CAAC,mCAAa;AACrC,gBAAgB,mBAAO,CAAC,8CAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,YAAY,qBAAqB,UAAU;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA,yFAAyF,SAAS;AAClG;AACA,8CAA8C,UAAU;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA,wBAAwB,6BAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oBAAoB;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA;AACA;AACA;AACA,iEAAiE,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;;;;;;;;;;;ACtMzB;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC,mBAAmB,mBAAO,CAAC,iDAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB,GAAG,mBAAmB;AACxE;AACA;AACA,8BAA8B;AAC9B,aAAa;AACb,iCAAiC,eAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA,SAAS;AACT,oDAAoD,SAAS,QAAQ,YAAY,SAAS,MAAM;AAChG;AACA;AACA;AACA;AACA,uCAAuC,wCAAwC;AAC/E,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,SAAS,QAAQ,YAAY,SAAS,MAAM;AAC/G;AACA;AACA;AACA,4EAA4E,SAAS,QAAQ,YAAY,SAAS,MAAM;AACxH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;;;;;;;;;;ACvLrB;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kCAAkC;AAClC;AACA,oBAAoB,mBAAO,CAAC,4DAAe;AAC3C,8DAA6D,EAAE,qCAAqC,oDAAoD,EAAC;;;;;;;;;;;ACT5I;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;;;;AC7BX;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,wBAAwB,GAAG,0BAA0B,GAAG,oBAAoB;AACtG,eAAe,mBAAO,CAAC,2CAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,KAAK;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;ACnGV;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,GAAG,wBAAwB,GAAG,0BAA0B,GAAG,oBAAoB,GAAG,wBAAwB,GAAG,aAAa;AACjJ;AACA,aAAa,mBAAO,CAAC,2CAAQ;AAC7B,yCAAwC,EAAE,qCAAqC,wBAAwB,EAAC;AACxG,oDAAmD,EAAE,qCAAqC,mCAAmC,EAAC;AAC9H;AACA,YAAY,mBAAO,CAAC,yCAAO;AAC3B,gDAA+C,EAAE,qCAAqC,8BAA8B,EAAC;AACrH,sDAAqD,EAAE,qCAAqC,oCAAoC,EAAC;AACjI,oDAAmD,EAAE,qCAAqC,kCAAkC,EAAC;AAC7H,mDAAkD,EAAE,qCAAqC,iCAAiC,EAAC;;;;;;;;;;;AChB9G;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,wBAAwB,GAAG,yBAAyB,GAAG,uBAAuB,GAAG,6CAA6C,GAAG,0BAA0B,GAAG,sBAAsB,GAAG,0BAA0B,GAAG,sBAAsB,GAAG,2BAA2B,GAAG,sBAAsB,GAAG,kBAAkB,GAAG,2BAA2B,GAAG,eAAe,GAAG,cAAc,GAAG,gBAAgB;AAC1Y,sBAAsB,mBAAO,CAAC,wFAAuB;AACrD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,4DAA4D,4BAA4B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,wDAAwD,4BAA4B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB,QAAQ,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,gBAAgB,QAAQ,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,gBAAgB,QAAQ,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,qEAAqE,qEAAqE;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW,GAAG,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB,wCAAwC;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uEAAuE,mBAAmB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,+CAA+C,mBAAmB,KAAK,iBAAiB;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,gBAAgB,QAAQ,SAAS,UAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uCAAuC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,2CAA2C,kBAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB,EAAE,iBAAiB;AACtD,iBAAiB,kBAAkB,EAAE,iBAAiB,IAAI,gBAAgB,EAAE,cAAc;AAC1F;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC,iBAAiB,gBAAgB,IAAI,aAAa;AAClD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,mBAAmB,IAAI,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,cAAc;AAC9B,wCAAwC,kBAAkB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,MAAM;AAC9D;AACA;AACA;AACA,kCAAkC,OAAO,0BAA0B,WAAW,YAAY,WAAW;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;;;;;;;;;;;AC7iBX;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB;AACjB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCzCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA;WACA,uBAAuB,4BAA4B;WACnD;WACA;WACA;WACA,iBAAiB,oBAAoB;WACrC;WACA,mGAAmG,YAAY;WAC/G;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,mEAAmE,iCAAiC;WACpG;WACA;WACA;WACA;;;;;WCzCA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA,iCAAiC;;WAEjC;WACA;WACA;WACA,KAAK;WACL,eAAe;WACf;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;WACA;;;;;;;;;;;ACrFa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,qBAAqB,mBAAO,CAAC,uDAAc;AAC3C,yBAAyB,mBAAO,CAAC,+DAAkB;AACnD,iBAAiB,mBAAO,CAAC,+CAAU;AACnC,cAAc,mBAAO,CAAC,yCAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gBAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/AuthAdminApi.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/AuthClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/index.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/constants.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/errors.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/local-storage.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/locks.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/polyfills.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/types.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/auth-js/dist/module/lib/version.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/functions-js/dist/module/FunctionsClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/functions-js/dist/module/helper.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/functions-js/dist/module/types.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/node-fetch/browser.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/constants.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/index.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/cjs/version.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/index.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/lib/push.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/realtime-js/dist/module/lib/version.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/StorageClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/lib/constants.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/lib/errors.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/lib/version.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/index.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/lib/constants.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js","webpack://linkedin-easy-apply-automation/./node_modules/@supabase/supabase-js/dist/module/lib/version.js","webpack://linkedin-easy-apply-automation/./src/content/api/index.ts","webpack://linkedin-easy-apply-automation/./src/content/api/linkedin.ts","webpack://linkedin-easy-apply-automation/./src/content/application/flow.ts","webpack://linkedin-easy-apply-automation/./src/content/application/index.ts","webpack://linkedin-easy-apply-automation/./src/content/autofill/workday.ts","webpack://linkedin-easy-apply-automation/./src/content/autofillEngine.ts","webpack://linkedin-easy-apply-automation/./src/content/automation/control.ts","webpack://linkedin-easy-apply-automation/./src/content/automation/core.ts","webpack://linkedin-easy-apply-automation/./src/content/automation/index.ts","webpack://linkedin-easy-apply-automation/./src/content/events/index.ts","webpack://linkedin-easy-apply-automation/./src/content/events/messaging.ts","webpack://linkedin-easy-apply-automation/./src/content/forms/completion.ts","webpack://linkedin-easy-apply-automation/./src/content/forms/field-types.ts","webpack://linkedin-easy-apply-automation/./src/content/forms/index.ts","webpack://linkedin-easy-apply-automation/./src/content/forms/inputs.ts","webpack://linkedin-easy-apply-automation/./src/content/forms/validation.ts","webpack://linkedin-easy-apply-automation/./src/content/initialization/index.ts","webpack://linkedin-easy-apply-automation/./src/content/initialization/state.ts","webpack://linkedin-easy-apply-automation/./src/content/jobs/detection.ts","webpack://linkedin-easy-apply-automation/./src/content/jobs/finding.ts","webpack://linkedin-easy-apply-automation/./src/content/jobs/index.ts","webpack://linkedin-easy-apply-automation/./src/content/navigation/index.ts","webpack://linkedin-easy-apply-automation/./src/content/navigation/pagination.ts","webpack://linkedin-easy-apply-automation/./src/content/tracking/application.ts","webpack://linkedin-easy-apply-automation/./src/content/tracking/index.ts","webpack://linkedin-easy-apply-automation/./src/content/utils/core.ts","webpack://linkedin-easy-apply-automation/./src/content/utils/dom.ts","webpack://linkedin-easy-apply-automation/./src/content/utils/index.ts","webpack://linkedin-easy-apply-automation/./src/lib/supabase.ts","webpack://linkedin-easy-apply-automation/./src/types.ts","webpack://linkedin-easy-apply-automation/webpack/bootstrap","webpack://linkedin-easy-apply-automation/webpack/runtime/create fake namespace object","webpack://linkedin-easy-apply-automation/webpack/runtime/define property getters","webpack://linkedin-easy-apply-automation/webpack/runtime/ensure chunk","webpack://linkedin-easy-apply-automation/webpack/runtime/get javascript chunk filename","webpack://linkedin-easy-apply-automation/webpack/runtime/global","webpack://linkedin-easy-apply-automation/webpack/runtime/hasOwnProperty shorthand","webpack://linkedin-easy-apply-automation/webpack/runtime/load script","webpack://linkedin-easy-apply-automation/webpack/runtime/make namespace object","webpack://linkedin-easy-apply-automation/webpack/runtime/publicPath","webpack://linkedin-easy-apply-automation/webpack/runtime/jsonp chunk loading","webpack://linkedin-easy-apply-automation/./src/content/content.ts"],"sourcesContent":["import GoTrueAdminApi from './GoTrueAdminApi';\nconst AuthAdminApi = GoTrueAdminApi;\nexport default AuthAdminApi;\n//# sourceMappingURL=AuthAdminApi.js.map","import GoTrueClient from './GoTrueClient';\nconst AuthClient = GoTrueClient;\nexport default AuthClient;\n//# sourceMappingURL=AuthClient.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { _generateLinkResponse, _noResolveJsonResponse, _request, _userResponse, } from './lib/fetch';\nimport { resolveFetch } from './lib/helpers';\nimport { isAuthError } from './lib/errors';\nexport default class GoTrueAdminApi {\n    constructor({ url = '', headers = {}, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.fetch = resolveFetch(fetch);\n        this.mfa = {\n            listFactors: this._listFactors.bind(this),\n            deleteFactor: this._deleteFactor.bind(this),\n        };\n    }\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     * @param scope The logout sope.\n     */\n    async signOut(jwt, scope = 'global') {\n        try {\n            await _request(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\n                headers: this.headers,\n                jwt,\n                noResolveJson: true,\n            });\n            return { data: null, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param options Additional options to be included when inviting.\n     */\n    async inviteUserByEmail(email, options = {}) {\n        try {\n            return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n                body: { email, data: options.data },\n                headers: this.headers,\n                redirectTo: options.redirectTo,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Generates email links and OTPs to be sent via a custom email provider.\n     * @param email The user's email.\n     * @param options.password User password. For signup only.\n     * @param options.data Optional user metadata. For signup only.\n     * @param options.redirectTo The redirect url which should be appended to the generated link\n     */\n    async generateLink(params) {\n        try {\n            const { options } = params, rest = __rest(params, [\"options\"]);\n            const body = Object.assign(Object.assign({}, rest), options);\n            if ('newEmail' in rest) {\n                // replace newEmail with new_email in request body\n                body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\n                delete body['newEmail'];\n            }\n            return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n                body: body,\n                headers: this.headers,\n                xform: _generateLinkResponse,\n                redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return {\n                    data: {\n                        properties: null,\n                        user: null,\n                    },\n                    error,\n                };\n            }\n            throw error;\n        }\n    }\n    // User Admin API\n    /**\n     * Creates a new user.\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async createUser(attributes) {\n        try {\n            return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n                body: attributes,\n                headers: this.headers,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n     */\n    async listUsers(params) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        try {\n            const pagination = { nextPage: null, lastPage: 0, total: 0 };\n            const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n                headers: this.headers,\n                noResolveJson: true,\n                query: {\n                    page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\n                    per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '',\n                },\n                xform: _noResolveJsonResponse,\n            });\n            if (response.error)\n                throw response.error;\n            const users = await response.json();\n            const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\n            const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\n            if (links.length > 0) {\n                links.forEach((link) => {\n                    const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\n                    const rel = JSON.parse(link.split(';')[1].split('=')[1]);\n                    pagination[`${rel}Page`] = page;\n                });\n                pagination.total = parseInt(total);\n            }\n            return { data: Object.assign(Object.assign({}, users), pagination), error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { users: [] }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async getUserById(uid) {\n        try {\n            return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n                headers: this.headers,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async updateUserById(uid, attributes) {\n        try {\n            return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n                body: attributes,\n                headers: this.headers,\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * @param id The user id you want to remove.\n     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.\n     * Defaults to false for backward compatibility.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n    async deleteUser(id, shouldSoftDelete = false) {\n        try {\n            return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n                headers: this.headers,\n                body: {\n                    should_soft_delete: shouldSoftDelete,\n                },\n                xform: _userResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    async _listFactors(params) {\n        try {\n            const { data, error } = await _request(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\n                headers: this.headers,\n                xform: (factors) => {\n                    return { data: { factors }, error: null };\n                },\n            });\n            return { data, error };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    async _deleteFactor(params) {\n        try {\n            const data = await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\n                headers: this.headers,\n            });\n            return { data, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n}\n//# sourceMappingURL=GoTrueAdminApi.js.map","import GoTrueAdminApi from './GoTrueAdminApi';\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN_MS, AUTO_REFRESH_TICK_DURATION_MS, AUTO_REFRESH_TICK_THRESHOLD, GOTRUE_URL, STORAGE_KEY, } from './lib/constants';\nimport { AuthImplicitGrantRedirectError, AuthPKCEGrantCodeExchangeError, AuthInvalidCredentialsError, AuthSessionMissingError, AuthInvalidTokenResponseError, AuthUnknownError, isAuthApiError, isAuthError, isAuthRetryableFetchError, isAuthSessionMissingError, isAuthImplicitGrantRedirectError, } from './lib/errors';\nimport { _request, _sessionResponse, _sessionResponsePassword, _userResponse, _ssoResponse, } from './lib/fetch';\nimport { decodeJWTPayload, Deferred, getItemAsync, isBrowser, removeItemAsync, resolveFetch, setItemAsync, uuid, retryable, sleep, supportsLocalStorage, parseParametersFromURL, getCodeChallengeAndMethod, } from './lib/helpers';\nimport { localStorageAdapter, memoryLocalStorageAdapter } from './lib/local-storage';\nimport { polyfillGlobalThis } from './lib/polyfills';\nimport { version } from './lib/version';\nimport { LockAcquireTimeoutError, navigatorLock } from './lib/locks';\npolyfillGlobalThis(); // Make \"globalThis\" available\nconst DEFAULT_OPTIONS = {\n    url: GOTRUE_URL,\n    storageKey: STORAGE_KEY,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    headers: DEFAULT_HEADERS,\n    flowType: 'implicit',\n    debug: false,\n    hasCustomAuthorizationHeader: false,\n};\nasync function lockNoOp(name, acquireTimeout, fn) {\n    return await fn();\n}\nexport default class GoTrueClient {\n    /**\n     * Create a new client for use in the browser.\n     */\n    constructor(options) {\n        var _a, _b;\n        this.memoryStorage = null;\n        this.stateChangeEmitters = new Map();\n        this.autoRefreshTicker = null;\n        this.visibilityChangedCallback = null;\n        this.refreshingDeferred = null;\n        /**\n         * Keeps track of the async client initialization.\n         * When null or not yet resolved the auth state is `unknown`\n         * Once resolved the the auth state is known and it's save to call any further client methods.\n         * Keep extra care to never reject or throw uncaught errors\n         */\n        this.initializePromise = null;\n        this.detectSessionInUrl = true;\n        this.hasCustomAuthorizationHeader = false;\n        this.suppressGetSessionWarning = false;\n        this.lockAcquired = false;\n        this.pendingInLock = [];\n        /**\n         * Used to broadcast state change events to other tabs listening.\n         */\n        this.broadcastChannel = null;\n        this.logger = console.log;\n        this.instanceID = GoTrueClient.nextInstanceID;\n        GoTrueClient.nextInstanceID += 1;\n        if (this.instanceID > 0 && isBrowser()) {\n            console.warn('Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.');\n        }\n        const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n        this.logDebugMessages = !!settings.debug;\n        if (typeof settings.debug === 'function') {\n            this.logger = settings.debug;\n        }\n        this.persistSession = settings.persistSession;\n        this.storageKey = settings.storageKey;\n        this.autoRefreshToken = settings.autoRefreshToken;\n        this.admin = new GoTrueAdminApi({\n            url: settings.url,\n            headers: settings.headers,\n            fetch: settings.fetch,\n        });\n        this.url = settings.url;\n        this.headers = settings.headers;\n        this.fetch = resolveFetch(settings.fetch);\n        this.lock = settings.lock || lockNoOp;\n        this.detectSessionInUrl = settings.detectSessionInUrl;\n        this.flowType = settings.flowType;\n        this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;\n        if (settings.lock) {\n            this.lock = settings.lock;\n        }\n        else if (isBrowser() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {\n            this.lock = navigatorLock;\n        }\n        else {\n            this.lock = lockNoOp;\n        }\n        this.mfa = {\n            verify: this._verify.bind(this),\n            enroll: this._enroll.bind(this),\n            unenroll: this._unenroll.bind(this),\n            challenge: this._challenge.bind(this),\n            listFactors: this._listFactors.bind(this),\n            challengeAndVerify: this._challengeAndVerify.bind(this),\n            getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n        };\n        if (this.persistSession) {\n            if (settings.storage) {\n                this.storage = settings.storage;\n            }\n            else {\n                if (supportsLocalStorage()) {\n                    this.storage = localStorageAdapter;\n                }\n                else {\n                    this.memoryStorage = {};\n                    this.storage = memoryLocalStorageAdapter(this.memoryStorage);\n                }\n            }\n        }\n        else {\n            this.memoryStorage = {};\n            this.storage = memoryLocalStorageAdapter(this.memoryStorage);\n        }\n        if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n            try {\n                this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n            }\n            catch (e) {\n                console.error('Failed to create a new BroadcastChannel, multi-tab state changes will not be available', e);\n            }\n            (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener('message', async (event) => {\n                this._debug('received broadcast notification from other tab or client', event);\n                await this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n            });\n        }\n        this.initialize();\n    }\n    _debug(...args) {\n        if (this.logDebugMessages) {\n            this.logger(`GoTrueClient@${this.instanceID} (${version}) ${new Date().toISOString()}`, ...args);\n        }\n        return this;\n    }\n    /**\n     * Initializes the client session either from the url or from storage.\n     * This method is automatically called when instantiating the client, but should also be called\n     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n     */\n    async initialize() {\n        if (this.initializePromise) {\n            return await this.initializePromise;\n        }\n        this.initializePromise = (async () => {\n            return await this._acquireLock(-1, async () => {\n                return await this._initialize();\n            });\n        })();\n        return await this.initializePromise;\n    }\n    /**\n     * IMPORTANT:\n     * 1. Never throw in this method, as it is called from the constructor\n     * 2. Never return a session from this method as it would be cached over\n     *    the whole lifetime of the client\n     */\n    async _initialize() {\n        var _a;\n        try {\n            const params = parseParametersFromURL(window.location.href);\n            let callbackUrlType = 'none';\n            if (this._isImplicitGrantCallback(params)) {\n                callbackUrlType = 'implicit';\n            }\n            else if (await this._isPKCECallback(params)) {\n                callbackUrlType = 'pkce';\n            }\n            /**\n             * Attempt to get the session from the URL only if these conditions are fulfilled\n             *\n             * Note: If the URL isn't one of the callback url types (implicit or pkce),\n             * then there could be an existing session so we don't want to prematurely remove it\n             */\n            if (isBrowser() && this.detectSessionInUrl && callbackUrlType !== 'none') {\n                const { data, error } = await this._getSessionFromURL(params, callbackUrlType);\n                if (error) {\n                    this._debug('#_initialize()', 'error detecting session from URL', error);\n                    if (isAuthImplicitGrantRedirectError(error)) {\n                        const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;\n                        if (errorCode === 'identity_already_exists' ||\n                            errorCode === 'identity_not_found' ||\n                            errorCode === 'single_identity_not_deletable') {\n                            return { error };\n                        }\n                    }\n                    // failed login attempt via url,\n                    // remove old session as in verifyOtp, signUp and signInWith*\n                    await this._removeSession();\n                    return { error };\n                }\n                const { session, redirectType } = data;\n                this._debug('#_initialize()', 'detected session in URL', session, 'redirect type', redirectType);\n                await this._saveSession(session);\n                setTimeout(async () => {\n                    if (redirectType === 'recovery') {\n                        await this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n                    }\n                    else {\n                        await this._notifyAllSubscribers('SIGNED_IN', session);\n                    }\n                }, 0);\n                return { error: null };\n            }\n            // no login attempt via callback url try to recover session from storage\n            await this._recoverAndRefresh();\n            return { error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { error };\n            }\n            return {\n                error: new AuthUnknownError('Unexpected error during initialization', error),\n            };\n        }\n        finally {\n            await this._handleVisibilityChange();\n            this._debug('#_initialize()', 'end');\n        }\n    }\n    /**\n     * Creates a new anonymous user.\n     *\n     * @returns A session where the is_anonymous claim in the access token JWT set to true\n     */\n    async signInAnonymously(credentials) {\n        var _a, _b, _c;\n        try {\n            const res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n                headers: this.headers,\n                body: {\n                    data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},\n                    gotrue_meta_security: { captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken },\n                },\n                xform: _sessionResponse,\n            });\n            const { data, error } = res;\n            if (error || !data) {\n                return { data: { user: null, session: null }, error: error };\n            }\n            const session = data.session;\n            const user = data.user;\n            if (data.session) {\n                await this._saveSession(data.session);\n                await this._notifyAllSubscribers('SIGNED_IN', session);\n            }\n            return { data: { user, session }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Creates a new user.\n     *\n     * Be aware that if a user account exists in the system you may get back an\n     * error message that attempts to hide this information from the user.\n     * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n    async signUp(credentials) {\n        var _a, _b, _c;\n        try {\n            let res;\n            if ('email' in credentials) {\n                const { email, password, options } = credentials;\n                let codeChallenge = null;\n                let codeChallengeMethod = null;\n                if (this.flowType === 'pkce') {\n                    ;\n                    [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);\n                }\n                res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n                    headers: this.headers,\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                    body: {\n                        email,\n                        password,\n                        data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        code_challenge: codeChallenge,\n                        code_challenge_method: codeChallengeMethod,\n                    },\n                    xform: _sessionResponse,\n                });\n            }\n            else if ('phone' in credentials) {\n                const { phone, password, options } = credentials;\n                res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n                    headers: this.headers,\n                    body: {\n                        phone,\n                        password,\n                        data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\n                        channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : 'sms',\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                    },\n                    xform: _sessionResponse,\n                });\n            }\n            else {\n                throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n            }\n            const { data, error } = res;\n            if (error || !data) {\n                return { data: { user: null, session: null }, error: error };\n            }\n            const session = data.session;\n            const user = data.user;\n            if (data.session) {\n                await this._saveSession(data.session);\n                await this._notifyAllSubscribers('SIGNED_IN', session);\n            }\n            return { data: { user, session }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Log in an existing user with an email and password or phone and password.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or that the\n     * email/phone and password combination is wrong or that the account can only\n     * be accessed via social login.\n     */\n    async signInWithPassword(credentials) {\n        try {\n            let res;\n            if ('email' in credentials) {\n                const { email, password, options } = credentials;\n                res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n                    headers: this.headers,\n                    body: {\n                        email,\n                        password,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                    },\n                    xform: _sessionResponsePassword,\n                });\n            }\n            else if ('phone' in credentials) {\n                const { phone, password, options } = credentials;\n                res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n                    headers: this.headers,\n                    body: {\n                        phone,\n                        password,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                    },\n                    xform: _sessionResponsePassword,\n                });\n            }\n            else {\n                throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n            }\n            const { data, error } = res;\n            if (error) {\n                return { data: { user: null, session: null }, error };\n            }\n            else if (!data || !data.session || !data.user) {\n                return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() };\n            }\n            if (data.session) {\n                await this._saveSession(data.session);\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\n            }\n            return {\n                data: Object.assign({ user: data.user, session: data.session }, (data.weak_password ? { weakPassword: data.weak_password } : null)),\n                error,\n            };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Log in an existing user via a third-party provider.\n     * This method supports the PKCE flow.\n     */\n    async signInWithOAuth(credentials) {\n        var _a, _b, _c, _d;\n        return await this._handleProviderSignIn(credentials.provider, {\n            redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n            skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect,\n        });\n    }\n    /**\n     * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n     */\n    async exchangeCodeForSession(authCode) {\n        await this.initializePromise;\n        return this._acquireLock(-1, async () => {\n            return this._exchangeCodeForSession(authCode);\n        });\n    }\n    async _exchangeCodeForSession(authCode) {\n        const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);\n        const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : '').split('/');\n        try {\n            const { data, error } = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=pkce`, {\n                headers: this.headers,\n                body: {\n                    auth_code: authCode,\n                    code_verifier: codeVerifier,\n                },\n                xform: _sessionResponse,\n            });\n            await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);\n            if (error) {\n                throw error;\n            }\n            if (!data || !data.session || !data.user) {\n                return {\n                    data: { user: null, session: null, redirectType: null },\n                    error: new AuthInvalidTokenResponseError(),\n                };\n            }\n            if (data.session) {\n                await this._saveSession(data.session);\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\n            }\n            return { data: Object.assign(Object.assign({}, data), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null, redirectType: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Allows signing in with an OIDC ID token. The authentication provider used\n     * should be enabled and configured.\n     */\n    async signInWithIdToken(credentials) {\n        try {\n            const { options, provider, token, access_token, nonce } = credentials;\n            const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n                headers: this.headers,\n                body: {\n                    provider,\n                    id_token: token,\n                    access_token,\n                    nonce,\n                    gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                },\n                xform: _sessionResponse,\n            });\n            const { data, error } = res;\n            if (error) {\n                return { data: { user: null, session: null }, error };\n            }\n            else if (!data || !data.session || !data.user) {\n                return {\n                    data: { user: null, session: null },\n                    error: new AuthInvalidTokenResponseError(),\n                };\n            }\n            if (data.session) {\n                await this._saveSession(data.session);\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\n            }\n            return { data, error };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Log in a user using magiclink or a one-time password (OTP).\n     *\n     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or, that the account\n     * can only be accessed via social login.\n     *\n     * Do note that you will need to configure a Whatsapp sender on Twilio\n     * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n     * channel is not supported on other providers\n     * at this time.\n     * This method supports PKCE when an email is passed.\n     */\n    async signInWithOtp(credentials) {\n        var _a, _b, _c, _d, _e;\n        try {\n            if ('email' in credentials) {\n                const { email, options } = credentials;\n                let codeChallenge = null;\n                let codeChallengeMethod = null;\n                if (this.flowType === 'pkce') {\n                    ;\n                    [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);\n                }\n                const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n                    headers: this.headers,\n                    body: {\n                        email,\n                        data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                        create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        code_challenge: codeChallenge,\n                        code_challenge_method: codeChallengeMethod,\n                    },\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                });\n                return { data: { user: null, session: null }, error };\n            }\n            if ('phone' in credentials) {\n                const { phone, options } = credentials;\n                const { data, error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n                    headers: this.headers,\n                    body: {\n                        phone,\n                        data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\n                        create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                        channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : 'sms',\n                    },\n                });\n                return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };\n            }\n            throw new AuthInvalidCredentialsError('You must provide either an email or phone number.');\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Log in a user given a User supplied OTP or TokenHash received through mobile or email.\n     */\n    async verifyOtp(params) {\n        var _a, _b;\n        try {\n            let redirectTo = undefined;\n            let captchaToken = undefined;\n            if ('options' in params) {\n                redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;\n                captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;\n            }\n            const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n                headers: this.headers,\n                body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),\n                redirectTo,\n                xform: _sessionResponse,\n            });\n            if (error) {\n                throw error;\n            }\n            if (!data) {\n                throw new Error('An error occurred on token verification.');\n            }\n            const session = data.session;\n            const user = data.user;\n            if (session === null || session === void 0 ? void 0 : session.access_token) {\n                await this._saveSession(session);\n                await this._notifyAllSubscribers(params.type == 'recovery' ? 'PASSWORD_RECOVERY' : 'SIGNED_IN', session);\n            }\n            return { data: { user, session }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Attempts a single-sign on using an enterprise Identity Provider. A\n     * successful SSO attempt will redirect the current page to the identity\n     * provider authorization page. The redirect URL is implementation and SSO\n     * protocol specific.\n     *\n     * You can use it by providing a SSO domain. Typically you can extract this\n     * domain by asking users for their email address. If this domain is\n     * registered on the Auth instance the redirect will use that organization's\n     * currently active SSO Identity Provider for the login.\n     *\n     * If you have built an organization-specific login page, you can use the\n     * organization's SSO Identity Provider UUID directly instead.\n     */\n    async signInWithSSO(params) {\n        var _a, _b, _c;\n        try {\n            let codeChallenge = null;\n            let codeChallengeMethod = null;\n            if (this.flowType === 'pkce') {\n                ;\n                [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);\n            }\n            return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n                body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, ('providerId' in params ? { provider_id: params.providerId } : null)), ('domain' in params ? { domain: params.domain } : null)), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined }), (((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken)\n                    ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n                    : null)), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),\n                headers: this.headers,\n                xform: _ssoResponse,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Sends a reauthentication OTP to the user's email or phone number.\n     * Requires the user to be signed-in.\n     */\n    async reauthenticate() {\n        await this.initializePromise;\n        return await this._acquireLock(-1, async () => {\n            return await this._reauthenticate();\n        });\n    }\n    async _reauthenticate() {\n        try {\n            return await this._useSession(async (result) => {\n                const { data: { session }, error: sessionError, } = result;\n                if (sessionError)\n                    throw sessionError;\n                if (!session)\n                    throw new AuthSessionMissingError();\n                const { error } = await _request(this.fetch, 'GET', `${this.url}/reauthenticate`, {\n                    headers: this.headers,\n                    jwt: session.access_token,\n                });\n                return { data: { user: null, session: null }, error };\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n     */\n    async resend(credentials) {\n        try {\n            const endpoint = `${this.url}/resend`;\n            if ('email' in credentials) {\n                const { email, type, options } = credentials;\n                const { error } = await _request(this.fetch, 'POST', endpoint, {\n                    headers: this.headers,\n                    body: {\n                        email,\n                        type,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                    },\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                });\n                return { data: { user: null, session: null }, error };\n            }\n            else if ('phone' in credentials) {\n                const { phone, type, options } = credentials;\n                const { data, error } = await _request(this.fetch, 'POST', endpoint, {\n                    headers: this.headers,\n                    body: {\n                        phone,\n                        type,\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\n                    },\n                });\n                return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };\n            }\n            throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a type');\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Returns the session, refreshing it if necessary.\n     *\n     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n     *\n     * **IMPORTANT:** This method loads values directly from the storage attached\n     * to the client. If that storage is based on request cookies for example,\n     * the values in it may not be authentic and therefore it's strongly advised\n     * against using this method and its results in such circumstances. A warning\n     * will be emitted if this is detected. Use {@link #getUser()} instead.\n     */\n    async getSession() {\n        await this.initializePromise;\n        const result = await this._acquireLock(-1, async () => {\n            return this._useSession(async (result) => {\n                return result;\n            });\n        });\n        return result;\n    }\n    /**\n     * Acquires a global lock based on the storage key.\n     */\n    async _acquireLock(acquireTimeout, fn) {\n        this._debug('#_acquireLock', 'begin', acquireTimeout);\n        try {\n            if (this.lockAcquired) {\n                const last = this.pendingInLock.length\n                    ? this.pendingInLock[this.pendingInLock.length - 1]\n                    : Promise.resolve();\n                const result = (async () => {\n                    await last;\n                    return await fn();\n                })();\n                this.pendingInLock.push((async () => {\n                    try {\n                        await result;\n                    }\n                    catch (e) {\n                        // we just care if it finished\n                    }\n                })());\n                return result;\n            }\n            return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {\n                this._debug('#_acquireLock', 'lock acquired for storage key', this.storageKey);\n                try {\n                    this.lockAcquired = true;\n                    const result = fn();\n                    this.pendingInLock.push((async () => {\n                        try {\n                            await result;\n                        }\n                        catch (e) {\n                            // we just care if it finished\n                        }\n                    })());\n                    await result;\n                    // keep draining the queue until there's nothing to wait on\n                    while (this.pendingInLock.length) {\n                        const waitOn = [...this.pendingInLock];\n                        await Promise.all(waitOn);\n                        this.pendingInLock.splice(0, waitOn.length);\n                    }\n                    return await result;\n                }\n                finally {\n                    this._debug('#_acquireLock', 'lock released for storage key', this.storageKey);\n                    this.lockAcquired = false;\n                }\n            });\n        }\n        finally {\n            this._debug('#_acquireLock', 'end');\n        }\n    }\n    /**\n     * Use instead of {@link #getSession} inside the library. It is\n     * semantically usually what you want, as getting a session involves some\n     * processing afterwards that requires only one client operating on the\n     * session at once across multiple tabs or processes.\n     */\n    async _useSession(fn) {\n        this._debug('#_useSession', 'begin');\n        try {\n            // the use of __loadSession here is the only correct use of the function!\n            const result = await this.__loadSession();\n            return await fn(result);\n        }\n        finally {\n            this._debug('#_useSession', 'end');\n        }\n    }\n    /**\n     * NEVER USE DIRECTLY!\n     *\n     * Always use {@link #_useSession}.\n     */\n    async __loadSession() {\n        this._debug('#__loadSession()', 'begin');\n        if (!this.lockAcquired) {\n            this._debug('#__loadSession()', 'used outside of an acquired lock!', new Error().stack);\n        }\n        try {\n            let currentSession = null;\n            const maybeSession = await getItemAsync(this.storage, this.storageKey);\n            this._debug('#getSession()', 'session from storage', maybeSession);\n            if (maybeSession !== null) {\n                if (this._isValidSession(maybeSession)) {\n                    currentSession = maybeSession;\n                }\n                else {\n                    this._debug('#getSession()', 'session from storage is not valid');\n                    await this._removeSession();\n                }\n            }\n            if (!currentSession) {\n                return { data: { session: null }, error: null };\n            }\n            // A session is considered expired before the access token _actually_\n            // expires. When the autoRefreshToken option is off (or when the tab is\n            // in the background), very eager users of getSession() -- like\n            // realtime-js -- might send a valid JWT which will expire by the time it\n            // reaches the server.\n            const hasExpired = currentSession.expires_at\n                ? currentSession.expires_at * 1000 - Date.now() < EXPIRY_MARGIN_MS\n                : false;\n            this._debug('#__loadSession()', `session has${hasExpired ? '' : ' not'} expired`, 'expires_at', currentSession.expires_at);\n            if (!hasExpired) {\n                if (this.storage.isServer) {\n                    let suppressWarning = this.suppressGetSessionWarning;\n                    const proxySession = new Proxy(currentSession, {\n                        get: (target, prop, receiver) => {\n                            if (!suppressWarning && prop === 'user') {\n                                // only show warning when the user object is being accessed from the server\n                                console.warn('Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.');\n                                suppressWarning = true; // keeps this proxy instance from logging additional warnings\n                                this.suppressGetSessionWarning = true; // keeps this client's future proxy instances from warning\n                            }\n                            return Reflect.get(target, prop, receiver);\n                        },\n                    });\n                    currentSession = proxySession;\n                }\n                return { data: { session: currentSession }, error: null };\n            }\n            const { session, error } = await this._callRefreshToken(currentSession.refresh_token);\n            if (error) {\n                return { data: { session: null }, error };\n            }\n            return { data: { session }, error: null };\n        }\n        finally {\n            this._debug('#__loadSession()', 'end');\n        }\n    }\n    /**\n     * Gets the current user details if there is an existing session. This method\n     * performs a network request to the Supabase Auth server, so the returned\n     * value is authentic and can be used to base authorization rules on.\n     *\n     * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n     */\n    async getUser(jwt) {\n        if (jwt) {\n            return await this._getUser(jwt);\n        }\n        await this.initializePromise;\n        const result = await this._acquireLock(-1, async () => {\n            return await this._getUser();\n        });\n        return result;\n    }\n    async _getUser(jwt) {\n        try {\n            if (jwt) {\n                return await _request(this.fetch, 'GET', `${this.url}/user`, {\n                    headers: this.headers,\n                    jwt: jwt,\n                    xform: _userResponse,\n                });\n            }\n            return await this._useSession(async (result) => {\n                var _a, _b, _c;\n                const { data, error } = result;\n                if (error) {\n                    throw error;\n                }\n                // returns an error if there is no access_token or custom authorization header\n                if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {\n                    return { data: { user: null }, error: new AuthSessionMissingError() };\n                }\n                return await _request(this.fetch, 'GET', `${this.url}/user`, {\n                    headers: this.headers,\n                    jwt: (_c = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : undefined,\n                    xform: _userResponse,\n                });\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                if (isAuthSessionMissingError(error)) {\n                    // JWT contains a `session_id` which does not correspond to an active\n                    // session in the database, indicating the user is signed out.\n                    await this._removeSession();\n                    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);\n                }\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Updates user data for a logged in user.\n     */\n    async updateUser(attributes, options = {}) {\n        await this.initializePromise;\n        return await this._acquireLock(-1, async () => {\n            return await this._updateUser(attributes, options);\n        });\n    }\n    async _updateUser(attributes, options = {}) {\n        try {\n            return await this._useSession(async (result) => {\n                const { data: sessionData, error: sessionError } = result;\n                if (sessionError) {\n                    throw sessionError;\n                }\n                if (!sessionData.session) {\n                    throw new AuthSessionMissingError();\n                }\n                const session = sessionData.session;\n                let codeChallenge = null;\n                let codeChallengeMethod = null;\n                if (this.flowType === 'pkce' && attributes.email != null) {\n                    ;\n                    [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);\n                }\n                const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n                    headers: this.headers,\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                    body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),\n                    jwt: session.access_token,\n                    xform: _userResponse,\n                });\n                if (userError)\n                    throw userError;\n                session.user = data.user;\n                await this._saveSession(session);\n                await this._notifyAllSubscribers('USER_UPDATED', session);\n                return { data: { user: session.user }, error: null };\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Decodes a JWT (without performing any validation).\n     */\n    _decodeJWT(jwt) {\n        return decodeJWTPayload(jwt);\n    }\n    /**\n     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n     * If the refresh token or access token in the current session is invalid, an error will be thrown.\n     * @param currentSession The current session that minimally contains an access token and refresh token.\n     */\n    async setSession(currentSession) {\n        await this.initializePromise;\n        return await this._acquireLock(-1, async () => {\n            return await this._setSession(currentSession);\n        });\n    }\n    async _setSession(currentSession) {\n        try {\n            if (!currentSession.access_token || !currentSession.refresh_token) {\n                throw new AuthSessionMissingError();\n            }\n            const timeNow = Date.now() / 1000;\n            let expiresAt = timeNow;\n            let hasExpired = true;\n            let session = null;\n            const payload = decodeJWTPayload(currentSession.access_token);\n            if (payload.exp) {\n                expiresAt = payload.exp;\n                hasExpired = expiresAt <= timeNow;\n            }\n            if (hasExpired) {\n                const { session: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);\n                if (error) {\n                    return { data: { user: null, session: null }, error: error };\n                }\n                if (!refreshedSession) {\n                    return { data: { user: null, session: null }, error: null };\n                }\n                session = refreshedSession;\n            }\n            else {\n                const { data, error } = await this._getUser(currentSession.access_token);\n                if (error) {\n                    throw error;\n                }\n                session = {\n                    access_token: currentSession.access_token,\n                    refresh_token: currentSession.refresh_token,\n                    user: data.user,\n                    token_type: 'bearer',\n                    expires_in: expiresAt - timeNow,\n                    expires_at: expiresAt,\n                };\n                await this._saveSession(session);\n                await this._notifyAllSubscribers('SIGNED_IN', session);\n            }\n            return { data: { user: session.user, session }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { session: null, user: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Returns a new session, regardless of expiry status.\n     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n     * If the current session's refresh token is invalid, an error will be thrown.\n     * @param currentSession The current session. If passed in, it must contain a refresh token.\n     */\n    async refreshSession(currentSession) {\n        await this.initializePromise;\n        return await this._acquireLock(-1, async () => {\n            return await this._refreshSession(currentSession);\n        });\n    }\n    async _refreshSession(currentSession) {\n        try {\n            return await this._useSession(async (result) => {\n                var _a;\n                if (!currentSession) {\n                    const { data, error } = result;\n                    if (error) {\n                        throw error;\n                    }\n                    currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n                }\n                if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\n                    throw new AuthSessionMissingError();\n                }\n                const { session, error } = await this._callRefreshToken(currentSession.refresh_token);\n                if (error) {\n                    return { data: { user: null, session: null }, error: error };\n                }\n                if (!session) {\n                    return { data: { user: null, session: null }, error: null };\n                }\n                return { data: { user: session.user, session }, error: null };\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { user: null, session: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Gets the session data from a URL string\n     */\n    async _getSessionFromURL(params, callbackUrlType) {\n        try {\n            if (!isBrowser())\n                throw new AuthImplicitGrantRedirectError('No browser detected.');\n            // If there's an error in the URL, it doesn't matter what flow it is, we just return the error.\n            if (params.error || params.error_description || params.error_code) {\n                // The error class returned implies that the redirect is from an implicit grant flow\n                // but it could also be from a redirect error from a PKCE flow.\n                throw new AuthImplicitGrantRedirectError(params.error_description || 'Error in URL with unspecified error_description', {\n                    error: params.error || 'unspecified_error',\n                    code: params.error_code || 'unspecified_code',\n                });\n            }\n            // Checks for mismatches between the flowType initialised in the client and the URL parameters\n            switch (callbackUrlType) {\n                case 'implicit':\n                    if (this.flowType === 'pkce') {\n                        throw new AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.');\n                    }\n                    break;\n                case 'pkce':\n                    if (this.flowType === 'implicit') {\n                        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n                    }\n                    break;\n                default:\n                // there's no mismatch so we continue\n            }\n            // Since this is a redirect for PKCE, we attempt to retrieve the code from the URL for the code exchange\n            if (callbackUrlType === 'pkce') {\n                this._debug('#_initialize()', 'begin', 'is PKCE flow', true);\n                if (!params.code)\n                    throw new AuthPKCEGrantCodeExchangeError('No code detected.');\n                const { data, error } = await this._exchangeCodeForSession(params.code);\n                if (error)\n                    throw error;\n                const url = new URL(window.location.href);\n                url.searchParams.delete('code');\n                window.history.replaceState(window.history.state, '', url.toString());\n                return { data: { session: data.session, redirectType: null }, error: null };\n            }\n            const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type, } = params;\n            if (!access_token || !expires_in || !refresh_token || !token_type) {\n                throw new AuthImplicitGrantRedirectError('No session defined in URL');\n            }\n            const timeNow = Math.round(Date.now() / 1000);\n            const expiresIn = parseInt(expires_in);\n            let expiresAt = timeNow + expiresIn;\n            if (expires_at) {\n                expiresAt = parseInt(expires_at);\n            }\n            const actuallyExpiresIn = expiresAt - timeNow;\n            if (actuallyExpiresIn * 1000 <= AUTO_REFRESH_TICK_DURATION_MS) {\n                console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);\n            }\n            const issuedAt = expiresAt - expiresIn;\n            if (timeNow - issuedAt >= 120) {\n                console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale', issuedAt, expiresAt, timeNow);\n            }\n            else if (timeNow - issuedAt < 0) {\n                console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew', issuedAt, expiresAt, timeNow);\n            }\n            const { data, error } = await this._getUser(access_token);\n            if (error)\n                throw error;\n            const session = {\n                provider_token,\n                provider_refresh_token,\n                access_token,\n                expires_in: expiresIn,\n                expires_at: expiresAt,\n                refresh_token,\n                token_type,\n                user: data.user,\n            };\n            // Remove tokens from URL\n            window.location.hash = '';\n            this._debug('#_getSessionFromURL()', 'clearing window.location.hash');\n            return { data: { session, redirectType: params.type }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { session: null, redirectType: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n     */\n    _isImplicitGrantCallback(params) {\n        return Boolean(params.access_token || params.error_description);\n    }\n    /**\n     * Checks if the current URL and backing storage contain parameters given by a PKCE flow\n     */\n    async _isPKCECallback(params) {\n        const currentStorageContent = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`);\n        return !!(params.code && currentStorageContent);\n    }\n    /**\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n     *\n     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n     *\n     * If using `others` scope, no `SIGNED_OUT` event is fired!\n     */\n    async signOut(options = { scope: 'global' }) {\n        await this.initializePromise;\n        return await this._acquireLock(-1, async () => {\n            return await this._signOut(options);\n        });\n    }\n    async _signOut({ scope } = { scope: 'global' }) {\n        return await this._useSession(async (result) => {\n            var _a;\n            const { data, error: sessionError } = result;\n            if (sessionError) {\n                return { error: sessionError };\n            }\n            const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n            if (accessToken) {\n                const { error } = await this.admin.signOut(accessToken, scope);\n                if (error) {\n                    // ignore 404s since user might not exist anymore\n                    // ignore 401s since an invalid or expired JWT should sign out the current session\n                    if (!(isAuthApiError(error) &&\n                        (error.status === 404 || error.status === 401 || error.status === 403))) {\n                        return { error };\n                    }\n                }\n            }\n            if (scope !== 'others') {\n                await this._removeSession();\n                await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`);\n            }\n            return { error: null };\n        });\n    }\n    /**\n     * Receive a notification every time an auth event happens.\n     * @param callback A callback function to be invoked when an auth event happens.\n     */\n    onAuthStateChange(callback) {\n        const id = uuid();\n        const subscription = {\n            id,\n            callback,\n            unsubscribe: () => {\n                this._debug('#unsubscribe()', 'state change callback with id removed', id);\n                this.stateChangeEmitters.delete(id);\n            },\n        };\n        this._debug('#onAuthStateChange()', 'registered callback with id', id);\n        this.stateChangeEmitters.set(id, subscription);\n        (async () => {\n            await this.initializePromise;\n            await this._acquireLock(-1, async () => {\n                this._emitInitialSession(id);\n            });\n        })();\n        return { data: { subscription } };\n    }\n    async _emitInitialSession(id) {\n        return await this._useSession(async (result) => {\n            var _a, _b;\n            try {\n                const { data: { session }, error, } = result;\n                if (error)\n                    throw error;\n                await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback('INITIAL_SESSION', session));\n                this._debug('INITIAL_SESSION', 'callback id', id, 'session', session);\n            }\n            catch (err) {\n                await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback('INITIAL_SESSION', null));\n                this._debug('INITIAL_SESSION', 'callback id', id, 'error', err);\n                console.error(err);\n            }\n        });\n    }\n    /**\n     * Sends a password reset request to an email address. This method supports the PKCE flow.\n     *\n     * @param email The email address of the user.\n     * @param options.redirectTo The URL to send the user to after they click the password reset link.\n     * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n     */\n    async resetPasswordForEmail(email, options = {}) {\n        let codeChallenge = null;\n        let codeChallengeMethod = null;\n        if (this.flowType === 'pkce') {\n            ;\n            [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey, true // isPasswordRecovery\n            );\n        }\n        try {\n            return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n                body: {\n                    email,\n                    code_challenge: codeChallenge,\n                    code_challenge_method: codeChallengeMethod,\n                    gotrue_meta_security: { captcha_token: options.captchaToken },\n                },\n                headers: this.headers,\n                redirectTo: options.redirectTo,\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Gets all the identities linked to a user.\n     */\n    async getUserIdentities() {\n        var _a;\n        try {\n            const { data, error } = await this.getUser();\n            if (error)\n                throw error;\n            return { data: { identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : [] }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Links an oauth identity to an existing user.\n     * This method supports the PKCE flow.\n     */\n    async linkIdentity(credentials) {\n        var _a;\n        try {\n            const { data, error } = await this._useSession(async (result) => {\n                var _a, _b, _c, _d, _e;\n                const { data, error } = result;\n                if (error)\n                    throw error;\n                const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {\n                    redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n                    scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n                    queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n                    skipBrowserRedirect: true,\n                });\n                return await _request(this.fetch, 'GET', url, {\n                    headers: this.headers,\n                    jwt: (_e = (_d = data.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : undefined,\n                });\n            });\n            if (error)\n                throw error;\n            if (isBrowser() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {\n                window.location.assign(data === null || data === void 0 ? void 0 : data.url);\n            }\n            return { data: { provider: credentials.provider, url: data === null || data === void 0 ? void 0 : data.url }, error: null };\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: { provider: credentials.provider, url: null }, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\n     */\n    async unlinkIdentity(identity) {\n        try {\n            return await this._useSession(async (result) => {\n                var _a, _b;\n                const { data, error } = result;\n                if (error) {\n                    throw error;\n                }\n                return await _request(this.fetch, 'DELETE', `${this.url}/user/identities/${identity.identity_id}`, {\n                    headers: this.headers,\n                    jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined,\n                });\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n    async _refreshAccessToken(refreshToken) {\n        const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;\n        this._debug(debugName, 'begin');\n        try {\n            const startedAt = Date.now();\n            // will attempt to refresh the token with exponential backoff\n            return await retryable(async (attempt) => {\n                if (attempt > 0) {\n                    await sleep(200 * Math.pow(2, attempt - 1)); // 200, 400, 800, ...\n                }\n                this._debug(debugName, 'refreshing attempt', attempt);\n                return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n                    body: { refresh_token: refreshToken },\n                    headers: this.headers,\n                    xform: _sessionResponse,\n                });\n            }, (attempt, error) => {\n                const nextBackOffInterval = 200 * Math.pow(2, attempt);\n                return (error &&\n                    isAuthRetryableFetchError(error) &&\n                    // retryable only if the request can be sent before the backoff overflows the tick duration\n                    Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION_MS);\n            });\n        }\n        catch (error) {\n            this._debug(debugName, 'error', error);\n            if (isAuthError(error)) {\n                return { data: { session: null, user: null }, error };\n            }\n            throw error;\n        }\n        finally {\n            this._debug(debugName, 'end');\n        }\n    }\n    _isValidSession(maybeSession) {\n        const isValidSession = typeof maybeSession === 'object' &&\n            maybeSession !== null &&\n            'access_token' in maybeSession &&\n            'refresh_token' in maybeSession &&\n            'expires_at' in maybeSession;\n        return isValidSession;\n    }\n    async _handleProviderSignIn(provider, options) {\n        const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {\n            redirectTo: options.redirectTo,\n            scopes: options.scopes,\n            queryParams: options.queryParams,\n        });\n        this._debug('#_handleProviderSignIn()', 'provider', provider, 'options', options, 'url', url);\n        // try to open on the browser\n        if (isBrowser() && !options.skipBrowserRedirect) {\n            window.location.assign(url);\n        }\n        return { data: { provider, url }, error: null };\n    }\n    /**\n     * Recovers the session from LocalStorage and refreshes the token\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n     */\n    async _recoverAndRefresh() {\n        var _a;\n        const debugName = '#_recoverAndRefresh()';\n        this._debug(debugName, 'begin');\n        try {\n            const currentSession = await getItemAsync(this.storage, this.storageKey);\n            this._debug(debugName, 'session from storage', currentSession);\n            if (!this._isValidSession(currentSession)) {\n                this._debug(debugName, 'session is not valid');\n                if (currentSession !== null) {\n                    await this._removeSession();\n                }\n                return;\n            }\n            const expiresWithMargin = ((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) * 1000 - Date.now() < EXPIRY_MARGIN_MS;\n            this._debug(debugName, `session has${expiresWithMargin ? '' : ' not'} expired with margin of ${EXPIRY_MARGIN_MS}s`);\n            if (expiresWithMargin) {\n                if (this.autoRefreshToken && currentSession.refresh_token) {\n                    const { error } = await this._callRefreshToken(currentSession.refresh_token);\n                    if (error) {\n                        console.error(error);\n                        if (!isAuthRetryableFetchError(error)) {\n                            this._debug(debugName, 'refresh failed with a non-retryable error, removing the session', error);\n                            await this._removeSession();\n                        }\n                    }\n                }\n            }\n            else {\n                // no need to persist currentSession again, as we just loaded it from\n                // local storage; persisting it again may overwrite a value saved by\n                // another client with access to the same local storage\n                await this._notifyAllSubscribers('SIGNED_IN', currentSession);\n            }\n        }\n        catch (err) {\n            this._debug(debugName, 'error', err);\n            console.error(err);\n            return;\n        }\n        finally {\n            this._debug(debugName, 'end');\n        }\n    }\n    async _callRefreshToken(refreshToken) {\n        var _a, _b;\n        if (!refreshToken) {\n            throw new AuthSessionMissingError();\n        }\n        // refreshing is already in progress\n        if (this.refreshingDeferred) {\n            return this.refreshingDeferred.promise;\n        }\n        const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;\n        this._debug(debugName, 'begin');\n        try {\n            this.refreshingDeferred = new Deferred();\n            const { data, error } = await this._refreshAccessToken(refreshToken);\n            if (error)\n                throw error;\n            if (!data.session)\n                throw new AuthSessionMissingError();\n            await this._saveSession(data.session);\n            await this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n            const result = { session: data.session, error: null };\n            this.refreshingDeferred.resolve(result);\n            return result;\n        }\n        catch (error) {\n            this._debug(debugName, 'error', error);\n            if (isAuthError(error)) {\n                const result = { session: null, error };\n                if (!isAuthRetryableFetchError(error)) {\n                    await this._removeSession();\n                }\n                (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\n                return result;\n            }\n            (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\n            throw error;\n        }\n        finally {\n            this.refreshingDeferred = null;\n            this._debug(debugName, 'end');\n        }\n    }\n    async _notifyAllSubscribers(event, session, broadcast = true) {\n        const debugName = `#_notifyAllSubscribers(${event})`;\n        this._debug(debugName, 'begin', session, `broadcast = ${broadcast}`);\n        try {\n            if (this.broadcastChannel && broadcast) {\n                this.broadcastChannel.postMessage({ event, session });\n            }\n            const errors = [];\n            const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {\n                try {\n                    await x.callback(event, session);\n                }\n                catch (e) {\n                    errors.push(e);\n                }\n            });\n            await Promise.all(promises);\n            if (errors.length > 0) {\n                for (let i = 0; i < errors.length; i += 1) {\n                    console.error(errors[i]);\n                }\n                throw errors[0];\n            }\n        }\n        finally {\n            this._debug(debugName, 'end');\n        }\n    }\n    /**\n     * set currentSession and currentUser\n     * process to _startAutoRefreshToken if possible\n     */\n    async _saveSession(session) {\n        this._debug('#_saveSession()', session);\n        // _saveSession is always called whenever a new session has been acquired\n        // so we can safely suppress the warning returned by future getSession calls\n        this.suppressGetSessionWarning = true;\n        await setItemAsync(this.storage, this.storageKey, session);\n    }\n    async _removeSession() {\n        this._debug('#_removeSession()');\n        await removeItemAsync(this.storage, this.storageKey);\n        await this._notifyAllSubscribers('SIGNED_OUT', null);\n    }\n    /**\n     * Removes any registered visibilitychange callback.\n     *\n     * {@see #startAutoRefresh}\n     * {@see #stopAutoRefresh}\n     */\n    _removeVisibilityChangedCallback() {\n        this._debug('#_removeVisibilityChangedCallback()');\n        const callback = this.visibilityChangedCallback;\n        this.visibilityChangedCallback = null;\n        try {\n            if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n                window.removeEventListener('visibilitychange', callback);\n            }\n        }\n        catch (e) {\n            console.error('removing visibilitychange callback failed', e);\n        }\n    }\n    /**\n     * This is the private implementation of {@link #startAutoRefresh}. Use this\n     * within the library.\n     */\n    async _startAutoRefresh() {\n        await this._stopAutoRefresh();\n        this._debug('#_startAutoRefresh()');\n        const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION_MS);\n        this.autoRefreshTicker = ticker;\n        if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n            // ticker is a NodeJS Timeout object that has an `unref` method\n            // https://nodejs.org/api/timers.html#timeoutunref\n            // When auto refresh is used in NodeJS (like for testing) the\n            // `setInterval` is preventing the process from being marked as\n            // finished and tests run endlessly. This can be prevented by calling\n            // `unref()` on the returned object.\n            ticker.unref();\n            // @ts-expect-error TS has no context of Deno\n        }\n        else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\n            // similar like for NodeJS, but with the Deno API\n            // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\n            // @ts-expect-error TS has no context of Deno\n            Deno.unrefTimer(ticker);\n        }\n        // run the tick immediately, but in the next pass of the event loop so that\n        // #_initialize can be allowed to complete without recursively waiting on\n        // itself\n        setTimeout(async () => {\n            await this.initializePromise;\n            await this._autoRefreshTokenTick();\n        }, 0);\n    }\n    /**\n     * This is the private implementation of {@link #stopAutoRefresh}. Use this\n     * within the library.\n     */\n    async _stopAutoRefresh() {\n        this._debug('#_stopAutoRefresh()');\n        const ticker = this.autoRefreshTicker;\n        this.autoRefreshTicker = null;\n        if (ticker) {\n            clearInterval(ticker);\n        }\n    }\n    /**\n     * Starts an auto-refresh process in the background. The session is checked\n     * every few seconds. Close to the time of expiration a process is started to\n     * refresh the session. If refreshing fails it will be retried for as long as\n     * necessary.\n     *\n     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n     * to call this function, it will be called for you.\n     *\n     * On browsers the refresh process works only when the tab/window is in the\n     * foreground to conserve resources as well as prevent race conditions and\n     * flooding auth with requests. If you call this method any managed\n     * visibility change callback will be removed and you must manage visibility\n     * changes on your own.\n     *\n     * On non-browser platforms the refresh process works *continuously* in the\n     * background, which may not be desirable. You should hook into your\n     * platform's foreground indication mechanism and call these methods\n     * appropriately to conserve resources.\n     *\n     * {@see #stopAutoRefresh}\n     */\n    async startAutoRefresh() {\n        this._removeVisibilityChangedCallback();\n        await this._startAutoRefresh();\n    }\n    /**\n     * Stops an active auto refresh process running in the background (if any).\n     *\n     * If you call this method any managed visibility change callback will be\n     * removed and you must manage visibility changes on your own.\n     *\n     * See {@link #startAutoRefresh} for more details.\n     */\n    async stopAutoRefresh() {\n        this._removeVisibilityChangedCallback();\n        await this._stopAutoRefresh();\n    }\n    /**\n     * Runs the auto refresh token tick.\n     */\n    async _autoRefreshTokenTick() {\n        this._debug('#_autoRefreshTokenTick()', 'begin');\n        try {\n            await this._acquireLock(0, async () => {\n                try {\n                    const now = Date.now();\n                    try {\n                        return await this._useSession(async (result) => {\n                            const { data: { session }, } = result;\n                            if (!session || !session.refresh_token || !session.expires_at) {\n                                this._debug('#_autoRefreshTokenTick()', 'no session');\n                                return;\n                            }\n                            // session will expire in this many ticks (or has already expired if <= 0)\n                            const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION_MS);\n                            this._debug('#_autoRefreshTokenTick()', `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`);\n                            if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {\n                                await this._callRefreshToken(session.refresh_token);\n                            }\n                        });\n                    }\n                    catch (e) {\n                        console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\n                    }\n                }\n                finally {\n                    this._debug('#_autoRefreshTokenTick()', 'end');\n                }\n            });\n        }\n        catch (e) {\n            if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError) {\n                this._debug('auto refresh token tick lock not available');\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    /**\n     * Registers callbacks on the browser / platform, which in-turn run\n     * algorithms when the browser window/tab are in foreground. On non-browser\n     * platforms it assumes always foreground.\n     */\n    async _handleVisibilityChange() {\n        this._debug('#_handleVisibilityChange()');\n        if (!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n            if (this.autoRefreshToken) {\n                // in non-browser environments the refresh token ticker runs always\n                this.startAutoRefresh();\n            }\n            return false;\n        }\n        try {\n            this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);\n            window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\n            // now immediately call the visbility changed callback to setup with the\n            // current visbility state\n            await this._onVisibilityChanged(true); // initial call\n        }\n        catch (error) {\n            console.error('_handleVisibilityChange', error);\n        }\n    }\n    /**\n     * Callback registered with `window.addEventListener('visibilitychange')`.\n     */\n    async _onVisibilityChanged(calledFromInitialize) {\n        const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;\n        this._debug(methodName, 'visibilityState', document.visibilityState);\n        if (document.visibilityState === 'visible') {\n            if (this.autoRefreshToken) {\n                // in browser environments the refresh token ticker runs only on focused tabs\n                // which prevents race conditions\n                this._startAutoRefresh();\n            }\n            if (!calledFromInitialize) {\n                // called when the visibility has changed, i.e. the browser\n                // transitioned from hidden -> visible so we need to see if the session\n                // should be recovered immediately... but to do that we need to acquire\n                // the lock first asynchronously\n                await this.initializePromise;\n                await this._acquireLock(-1, async () => {\n                    if (document.visibilityState !== 'visible') {\n                        this._debug(methodName, 'acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting');\n                        // visibility has changed while waiting for the lock, abort\n                        return;\n                    }\n                    // recover the session\n                    await this._recoverAndRefresh();\n                });\n            }\n        }\n        else if (document.visibilityState === 'hidden') {\n            if (this.autoRefreshToken) {\n                this._stopAutoRefresh();\n            }\n        }\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n     */\n    async _getUrlForProvider(url, provider, options) {\n        const urlParams = [`provider=${encodeURIComponent(provider)}`];\n        if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n            urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\n        }\n        if (options === null || options === void 0 ? void 0 : options.scopes) {\n            urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\n        }\n        if (this.flowType === 'pkce') {\n            const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(this.storage, this.storageKey);\n            const flowParams = new URLSearchParams({\n                code_challenge: `${encodeURIComponent(codeChallenge)}`,\n                code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`,\n            });\n            urlParams.push(flowParams.toString());\n        }\n        if (options === null || options === void 0 ? void 0 : options.queryParams) {\n            const query = new URLSearchParams(options.queryParams);\n            urlParams.push(query.toString());\n        }\n        if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {\n            urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);\n        }\n        return `${url}?${urlParams.join('&')}`;\n    }\n    async _unenroll(params) {\n        try {\n            return await this._useSession(async (result) => {\n                var _a;\n                const { data: sessionData, error: sessionError } = result;\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n                    headers: this.headers,\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                });\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    async _enroll(params) {\n        try {\n            return await this._useSession(async (result) => {\n                var _a, _b;\n                const { data: sessionData, error: sessionError } = result;\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, (params.factorType === 'phone' ? { phone: params.phone } : { issuer: params.issuer }));\n                const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n                    body,\n                    headers: this.headers,\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                });\n                if (error) {\n                    return { data: null, error };\n                }\n                if (params.factorType === 'totp' && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {\n                    data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\n                }\n                return { data, error: null };\n            });\n        }\n        catch (error) {\n            if (isAuthError(error)) {\n                return { data: null, error };\n            }\n            throw error;\n        }\n    }\n    /**\n     * {@see GoTrueMFAApi#verify}\n     */\n    async _verify(params) {\n        return this._acquireLock(-1, async () => {\n            try {\n                return await this._useSession(async (result) => {\n                    var _a;\n                    const { data: sessionData, error: sessionError } = result;\n                    if (sessionError) {\n                        return { data: null, error: sessionError };\n                    }\n                    const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\n                        body: { code: params.code, challenge_id: params.challengeId },\n                        headers: this.headers,\n                        jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                    });\n                    if (error) {\n                        return { data: null, error };\n                    }\n                    await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1000) + data.expires_in }, data));\n                    await this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n                    return { data, error };\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#challenge}\n     */\n    async _challenge(params) {\n        return this._acquireLock(-1, async () => {\n            try {\n                return await this._useSession(async (result) => {\n                    var _a;\n                    const { data: sessionData, error: sessionError } = result;\n                    if (sessionError) {\n                        return { data: null, error: sessionError };\n                    }\n                    return await _request(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\n                        body: { channel: params.channel },\n                        headers: this.headers,\n                        jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\n                    });\n                });\n            }\n            catch (error) {\n                if (isAuthError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#challengeAndVerify}\n     */\n    async _challengeAndVerify(params) {\n        // both _challenge and _verify independently acquire the lock, so no need\n        // to acquire it here\n        const { data: challengeData, error: challengeError } = await this._challenge({\n            factorId: params.factorId,\n        });\n        if (challengeError) {\n            return { data: null, error: challengeError };\n        }\n        return await this._verify({\n            factorId: params.factorId,\n            challengeId: challengeData.id,\n            code: params.code,\n        });\n    }\n    /**\n     * {@see GoTrueMFAApi#listFactors}\n     */\n    async _listFactors() {\n        // use #getUser instead of #_getUser as the former acquires a lock\n        const { data: { user }, error: userError, } = await this.getUser();\n        if (userError) {\n            return { data: null, error: userError };\n        }\n        const factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n        const totp = factors.filter((factor) => factor.factor_type === 'totp' && factor.status === 'verified');\n        const phone = factors.filter((factor) => factor.factor_type === 'phone' && factor.status === 'verified');\n        return {\n            data: {\n                all: factors,\n                totp,\n                phone,\n            },\n            error: null,\n        };\n    }\n    /**\n     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n     */\n    async _getAuthenticatorAssuranceLevel() {\n        return this._acquireLock(-1, async () => {\n            return await this._useSession(async (result) => {\n                var _a, _b;\n                const { data: { session }, error: sessionError, } = result;\n                if (sessionError) {\n                    return { data: null, error: sessionError };\n                }\n                if (!session) {\n                    return {\n                        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n                        error: null,\n                    };\n                }\n                const payload = this._decodeJWT(session.access_token);\n                let currentLevel = null;\n                if (payload.aal) {\n                    currentLevel = payload.aal;\n                }\n                let nextLevel = currentLevel;\n                const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\n                if (verifiedFactors.length > 0) {\n                    nextLevel = 'aal2';\n                }\n                const currentAuthenticationMethods = payload.amr || [];\n                return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };\n            });\n        });\n    }\n}\nGoTrueClient.nextInstanceID = 0;\n//# sourceMappingURL=GoTrueClient.js.map","import GoTrueAdminApi from './GoTrueAdminApi';\nimport GoTrueClient from './GoTrueClient';\nimport AuthAdminApi from './AuthAdminApi';\nimport AuthClient from './AuthClient';\nexport { GoTrueAdminApi, GoTrueClient, AuthAdminApi, AuthClient };\nexport * from './lib/types';\nexport * from './lib/errors';\nexport { navigatorLock, NavigatorLockAcquireTimeoutError, internals as lockInternals, } from './lib/locks';\n//# sourceMappingURL=index.js.map","import { version } from './version';\n/** Current session will be checked for refresh at this interval. */\nexport const AUTO_REFRESH_TICK_DURATION_MS = 30 * 1000;\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nexport const AUTO_REFRESH_TICK_THRESHOLD = 3;\n/*\n * Earliest time before an access token expires that the session should be refreshed.\n */\nexport const EXPIRY_MARGIN_MS = AUTO_REFRESH_TICK_THRESHOLD * AUTO_REFRESH_TICK_DURATION_MS;\nexport const GOTRUE_URL = 'http://localhost:9999';\nexport const STORAGE_KEY = 'supabase.auth.token';\nexport const AUDIENCE = '';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${version}` };\nexport const NETWORK_FAILURE = {\n    MAX_RETRIES: 10,\n    RETRY_INTERVAL: 2, // in deciseconds\n};\nexport const API_VERSION_HEADER_NAME = 'X-Supabase-Api-Version';\nexport const API_VERSIONS = {\n    '2024-01-01': {\n        timestamp: Date.parse('2024-01-01T00:00:00.0Z'),\n        name: '2024-01-01',\n    },\n};\n//# sourceMappingURL=constants.js.map","export class AuthError extends Error {\n    constructor(message, status, code) {\n        super(message);\n        this.__isAuthError = true;\n        this.name = 'AuthError';\n        this.status = status;\n        this.code = code;\n    }\n}\nexport function isAuthError(error) {\n    return typeof error === 'object' && error !== null && '__isAuthError' in error;\n}\nexport class AuthApiError extends AuthError {\n    constructor(message, status, code) {\n        super(message, status, code);\n        this.name = 'AuthApiError';\n        this.status = status;\n        this.code = code;\n    }\n}\nexport function isAuthApiError(error) {\n    return isAuthError(error) && error.name === 'AuthApiError';\n}\nexport class AuthUnknownError extends AuthError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'AuthUnknownError';\n        this.originalError = originalError;\n    }\n}\nexport class CustomAuthError extends AuthError {\n    constructor(message, name, status, code) {\n        super(message, status, code);\n        this.name = name;\n        this.status = status;\n    }\n}\nexport class AuthSessionMissingError extends CustomAuthError {\n    constructor() {\n        super('Auth session missing!', 'AuthSessionMissingError', 400, undefined);\n    }\n}\nexport function isAuthSessionMissingError(error) {\n    return isAuthError(error) && error.name === 'AuthSessionMissingError';\n}\nexport class AuthInvalidTokenResponseError extends CustomAuthError {\n    constructor() {\n        super('Auth session or user missing', 'AuthInvalidTokenResponseError', 500, undefined);\n    }\n}\nexport class AuthInvalidCredentialsError extends CustomAuthError {\n    constructor(message) {\n        super(message, 'AuthInvalidCredentialsError', 400, undefined);\n    }\n}\nexport class AuthImplicitGrantRedirectError extends CustomAuthError {\n    constructor(message, details = null) {\n        super(message, 'AuthImplicitGrantRedirectError', 500, undefined);\n        this.details = null;\n        this.details = details;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n            details: this.details,\n        };\n    }\n}\nexport function isAuthImplicitGrantRedirectError(error) {\n    return isAuthError(error) && error.name === 'AuthImplicitGrantRedirectError';\n}\nexport class AuthPKCEGrantCodeExchangeError extends CustomAuthError {\n    constructor(message, details = null) {\n        super(message, 'AuthPKCEGrantCodeExchangeError', 500, undefined);\n        this.details = null;\n        this.details = details;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n            details: this.details,\n        };\n    }\n}\nexport class AuthRetryableFetchError extends CustomAuthError {\n    constructor(message, status) {\n        super(message, 'AuthRetryableFetchError', status, undefined);\n    }\n}\nexport function isAuthRetryableFetchError(error) {\n    return isAuthError(error) && error.name === 'AuthRetryableFetchError';\n}\n/**\n * This error is thrown on certain methods when the password used is deemed\n * weak. Inspect the reasons to identify what password strength rules are\n * inadequate.\n */\nexport class AuthWeakPasswordError extends CustomAuthError {\n    constructor(message, status, reasons) {\n        super(message, 'AuthWeakPasswordError', status, 'weak_password');\n        this.reasons = reasons;\n    }\n}\nexport function isAuthWeakPasswordError(error) {\n    return isAuthError(error) && error.name === 'AuthWeakPasswordError';\n}\n//# sourceMappingURL=errors.js.map","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { API_VERSIONS, API_VERSION_HEADER_NAME } from './constants';\nimport { expiresAt, looksLikeFetchResponse, parseResponseAPIVersion } from './helpers';\nimport { AuthApiError, AuthRetryableFetchError, AuthWeakPasswordError, AuthUnknownError, AuthSessionMissingError, } from './errors';\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst NETWORK_ERROR_CODES = [502, 503, 504];\nexport async function handleError(error) {\n    var _a;\n    if (!looksLikeFetchResponse(error)) {\n        throw new AuthRetryableFetchError(_getErrorMessage(error), 0);\n    }\n    if (NETWORK_ERROR_CODES.includes(error.status)) {\n        // status in 500...599 range - server had an error, request might be retryed.\n        throw new AuthRetryableFetchError(_getErrorMessage(error), error.status);\n    }\n    let data;\n    try {\n        data = await error.json();\n    }\n    catch (e) {\n        throw new AuthUnknownError(_getErrorMessage(e), e);\n    }\n    let errorCode = undefined;\n    const responseAPIVersion = parseResponseAPIVersion(error);\n    if (responseAPIVersion &&\n        responseAPIVersion.getTime() >= API_VERSIONS['2024-01-01'].timestamp &&\n        typeof data === 'object' &&\n        data &&\n        typeof data.code === 'string') {\n        errorCode = data.code;\n    }\n    else if (typeof data === 'object' && data && typeof data.error_code === 'string') {\n        errorCode = data.error_code;\n    }\n    if (!errorCode) {\n        // Legacy support for weak password errors, when there were no error codes\n        if (typeof data === 'object' &&\n            data &&\n            typeof data.weak_password === 'object' &&\n            data.weak_password &&\n            Array.isArray(data.weak_password.reasons) &&\n            data.weak_password.reasons.length &&\n            data.weak_password.reasons.reduce((a, i) => a && typeof i === 'string', true)) {\n            throw new AuthWeakPasswordError(_getErrorMessage(data), error.status, data.weak_password.reasons);\n        }\n    }\n    else if (errorCode === 'weak_password') {\n        throw new AuthWeakPasswordError(_getErrorMessage(data), error.status, ((_a = data.weak_password) === null || _a === void 0 ? void 0 : _a.reasons) || []);\n    }\n    else if (errorCode === 'session_not_found') {\n        // The `session_id` inside the JWT does not correspond to a row in the\n        // `sessions` table. This usually means the user has signed out, has been\n        // deleted, or their session has somehow been terminated.\n        throw new AuthSessionMissingError();\n    }\n    throw new AuthApiError(_getErrorMessage(data), error.status || 500, errorCode);\n}\nconst _getRequestParams = (method, options, parameters, body) => {\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\n    if (method === 'GET') {\n        return params;\n    }\n    params.headers = Object.assign({ 'Content-Type': 'application/json;charset=UTF-8' }, options === null || options === void 0 ? void 0 : options.headers);\n    params.body = JSON.stringify(body);\n    return Object.assign(Object.assign({}, params), parameters);\n};\nexport async function _request(fetcher, method, url, options) {\n    var _a;\n    const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);\n    if (!headers[API_VERSION_HEADER_NAME]) {\n        headers[API_VERSION_HEADER_NAME] = API_VERSIONS['2024-01-01'].name;\n    }\n    if (options === null || options === void 0 ? void 0 : options.jwt) {\n        headers['Authorization'] = `Bearer ${options.jwt}`;\n    }\n    const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};\n    if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n        qs['redirect_to'] = options.redirectTo;\n    }\n    const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : '';\n    const data = await _handleRequest(fetcher, method, url + queryString, {\n        headers,\n        noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson,\n    }, {}, options === null || options === void 0 ? void 0 : options.body);\n    return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };\n}\nasync function _handleRequest(fetcher, method, url, options, parameters, body) {\n    const requestParams = _getRequestParams(method, options, parameters, body);\n    let result;\n    try {\n        result = await fetcher(url, Object.assign({}, requestParams));\n    }\n    catch (e) {\n        console.error(e);\n        // fetch failed, likely due to a network or CORS error\n        throw new AuthRetryableFetchError(_getErrorMessage(e), 0);\n    }\n    if (!result.ok) {\n        await handleError(result);\n    }\n    if (options === null || options === void 0 ? void 0 : options.noResolveJson) {\n        return result;\n    }\n    try {\n        return await result.json();\n    }\n    catch (e) {\n        await handleError(e);\n    }\n}\nexport function _sessionResponse(data) {\n    var _a;\n    let session = null;\n    if (hasSession(data)) {\n        session = Object.assign({}, data);\n        if (!data.expires_at) {\n            session.expires_at = expiresAt(data.expires_in);\n        }\n    }\n    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\n    return { data: { session, user }, error: null };\n}\nexport function _sessionResponsePassword(data) {\n    const response = _sessionResponse(data);\n    if (!response.error &&\n        data.weak_password &&\n        typeof data.weak_password === 'object' &&\n        Array.isArray(data.weak_password.reasons) &&\n        data.weak_password.reasons.length &&\n        data.weak_password.message &&\n        typeof data.weak_password.message === 'string' &&\n        data.weak_password.reasons.reduce((a, i) => a && typeof i === 'string', true)) {\n        response.data.weak_password = data.weak_password;\n    }\n    return response;\n}\nexport function _userResponse(data) {\n    var _a;\n    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\n    return { data: { user }, error: null };\n}\nexport function _ssoResponse(data) {\n    return { data, error: null };\n}\nexport function _generateLinkResponse(data) {\n    const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, [\"action_link\", \"email_otp\", \"hashed_token\", \"redirect_to\", \"verification_type\"]);\n    const properties = {\n        action_link,\n        email_otp,\n        hashed_token,\n        redirect_to,\n        verification_type,\n    };\n    const user = Object.assign({}, rest);\n    return {\n        data: {\n            properties,\n            user,\n        },\n        error: null,\n    };\n}\nexport function _noResolveJsonResponse(data) {\n    return data;\n}\n/**\n * hasSession checks if the response object contains a valid session\n * @param data A response object\n * @returns true if a session is in the response\n */\nfunction hasSession(data) {\n    return data.access_token && data.refresh_token && data.expires_in;\n}\n//# sourceMappingURL=fetch.js.map","import { API_VERSION_HEADER_NAME } from './constants';\nexport function expiresAt(expiresIn) {\n    const timeNow = Math.round(Date.now() / 1000);\n    return timeNow + expiresIn;\n}\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport const isBrowser = () => typeof window !== 'undefined' && typeof document !== 'undefined';\nconst localStorageWriteTests = {\n    tested: false,\n    writable: false,\n};\n/**\n * Checks whether localStorage is supported on this browser.\n */\nexport const supportsLocalStorage = () => {\n    if (!isBrowser()) {\n        return false;\n    }\n    try {\n        if (typeof globalThis.localStorage !== 'object') {\n            return false;\n        }\n    }\n    catch (e) {\n        // DOM exception when accessing `localStorage`\n        return false;\n    }\n    if (localStorageWriteTests.tested) {\n        return localStorageWriteTests.writable;\n    }\n    const randomKey = `lswt-${Math.random()}${Math.random()}`;\n    try {\n        globalThis.localStorage.setItem(randomKey, randomKey);\n        globalThis.localStorage.removeItem(randomKey);\n        localStorageWriteTests.tested = true;\n        localStorageWriteTests.writable = true;\n    }\n    catch (e) {\n        // localStorage can't be written to\n        // https://www.chromium.org/for-testers/bug-reporting-guidelines/uncaught-securityerror-failed-to-read-the-localstorage-property-from-window-access-is-denied-for-this-document\n        localStorageWriteTests.tested = true;\n        localStorageWriteTests.writable = false;\n    }\n    return localStorageWriteTests.writable;\n};\n/**\n * Extracts parameters encoded in the URL both in the query and fragment.\n */\nexport function parseParametersFromURL(href) {\n    const result = {};\n    const url = new URL(href);\n    if (url.hash && url.hash[0] === '#') {\n        try {\n            const hashSearchParams = new URLSearchParams(url.hash.substring(1));\n            hashSearchParams.forEach((value, key) => {\n                result[key] = value;\n            });\n        }\n        catch (e) {\n            // hash is not a query string\n        }\n    }\n    // search parameters take precedence over hash parameters\n    url.searchParams.forEach((value, key) => {\n        result[key] = value;\n    });\n    return result;\n}\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const looksLikeFetchResponse = (maybeResponse) => {\n    return (typeof maybeResponse === 'object' &&\n        maybeResponse !== null &&\n        'status' in maybeResponse &&\n        'ok' in maybeResponse &&\n        'json' in maybeResponse &&\n        typeof maybeResponse.json === 'function');\n};\n// Storage helpers\nexport const setItemAsync = async (storage, key, data) => {\n    await storage.setItem(key, JSON.stringify(data));\n};\nexport const getItemAsync = async (storage, key) => {\n    const value = await storage.getItem(key);\n    if (!value) {\n        return null;\n    }\n    try {\n        return JSON.parse(value);\n    }\n    catch (_a) {\n        return value;\n    }\n};\nexport const removeItemAsync = async (storage, key) => {\n    await storage.removeItem(key);\n};\nexport function decodeBase64URL(value) {\n    const key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let base64 = '';\n    let chr1, chr2, chr3;\n    let enc1, enc2, enc3, enc4;\n    let i = 0;\n    value = value.replace('-', '+').replace('_', '/');\n    while (i < value.length) {\n        enc1 = key.indexOf(value.charAt(i++));\n        enc2 = key.indexOf(value.charAt(i++));\n        enc3 = key.indexOf(value.charAt(i++));\n        enc4 = key.indexOf(value.charAt(i++));\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n        base64 = base64 + String.fromCharCode(chr1);\n        if (enc3 != 64 && chr2 != 0) {\n            base64 = base64 + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64 && chr3 != 0) {\n            base64 = base64 + String.fromCharCode(chr3);\n        }\n    }\n    return base64;\n}\n/**\n * A deferred represents some asynchronous work that is not yet finished, which\n * may or may not culminate in a value.\n * Taken from: https://github.com/mike-north/types/blob/master/src/async.ts\n */\nexport class Deferred {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-extra-semi\n        ;\n        this.promise = new Deferred.promiseConstructor((res, rej) => {\n            // eslint-disable-next-line @typescript-eslint/no-extra-semi\n            ;\n            this.resolve = res;\n            this.reject = rej;\n        });\n    }\n}\nDeferred.promiseConstructor = Promise;\n// Taken from: https://stackoverflow.com/questions/38552003/how-to-decode-jwt-token-in-javascript-without-using-a-library\nexport function decodeJWTPayload(token) {\n    // Regex checks for base64url format\n    const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i;\n    const parts = token.split('.');\n    if (parts.length !== 3) {\n        throw new Error('JWT is not valid: not a JWT structure');\n    }\n    if (!base64UrlRegex.test(parts[1])) {\n        throw new Error('JWT is not valid: payload is not in base64url format');\n    }\n    const base64Url = parts[1];\n    return JSON.parse(decodeBase64URL(base64Url));\n}\n/**\n * Creates a promise that resolves to null after some time.\n */\nexport async function sleep(time) {\n    return await new Promise((accept) => {\n        setTimeout(() => accept(null), time);\n    });\n}\n/**\n * Converts the provided async function into a retryable function. Each result\n * or thrown error is sent to the isRetryable function which should return true\n * if the function should run again.\n */\nexport function retryable(fn, isRetryable) {\n    const promise = new Promise((accept, reject) => {\n        // eslint-disable-next-line @typescript-eslint/no-extra-semi\n        ;\n        (async () => {\n            for (let attempt = 0; attempt < Infinity; attempt++) {\n                try {\n                    const result = await fn(attempt);\n                    if (!isRetryable(attempt, null, result)) {\n                        accept(result);\n                        return;\n                    }\n                }\n                catch (e) {\n                    if (!isRetryable(attempt, e)) {\n                        reject(e);\n                        return;\n                    }\n                }\n            }\n        })();\n    });\n    return promise;\n}\nfunction dec2hex(dec) {\n    return ('0' + dec.toString(16)).substr(-2);\n}\n// Functions below taken from: https://stackoverflow.com/questions/63309409/creating-a-code-verifier-and-challenge-for-pkce-auth-on-spotify-api-in-reactjs\nexport function generatePKCEVerifier() {\n    const verifierLength = 56;\n    const array = new Uint32Array(verifierLength);\n    if (typeof crypto === 'undefined') {\n        const charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\n        const charSetLen = charSet.length;\n        let verifier = '';\n        for (let i = 0; i < verifierLength; i++) {\n            verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));\n        }\n        return verifier;\n    }\n    crypto.getRandomValues(array);\n    return Array.from(array, dec2hex).join('');\n}\nasync function sha256(randomString) {\n    const encoder = new TextEncoder();\n    const encodedData = encoder.encode(randomString);\n    const hash = await crypto.subtle.digest('SHA-256', encodedData);\n    const bytes = new Uint8Array(hash);\n    return Array.from(bytes)\n        .map((c) => String.fromCharCode(c))\n        .join('');\n}\nfunction base64urlencode(str) {\n    return btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n}\nexport async function generatePKCEChallenge(verifier) {\n    const hasCryptoSupport = typeof crypto !== 'undefined' &&\n        typeof crypto.subtle !== 'undefined' &&\n        typeof TextEncoder !== 'undefined';\n    if (!hasCryptoSupport) {\n        console.warn('WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.');\n        return verifier;\n    }\n    const hashed = await sha256(verifier);\n    return base64urlencode(hashed);\n}\nexport async function getCodeChallengeAndMethod(storage, storageKey, isPasswordRecovery = false) {\n    const codeVerifier = generatePKCEVerifier();\n    let storedCodeVerifier = codeVerifier;\n    if (isPasswordRecovery) {\n        storedCodeVerifier += '/PASSWORD_RECOVERY';\n    }\n    await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier);\n    const codeChallenge = await generatePKCEChallenge(codeVerifier);\n    const codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256';\n    return [codeChallenge, codeChallengeMethod];\n}\n/** Parses the API version which is 2YYY-MM-DD. */\nconst API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;\nexport function parseResponseAPIVersion(response) {\n    const apiVersion = response.headers.get(API_VERSION_HEADER_NAME);\n    if (!apiVersion) {\n        return null;\n    }\n    if (!apiVersion.match(API_VERSION_REGEX)) {\n        return null;\n    }\n    try {\n        const date = new Date(`${apiVersion}T00:00:00.0Z`);\n        return date;\n    }\n    catch (e) {\n        return null;\n    }\n}\n//# sourceMappingURL=helpers.js.map","import { supportsLocalStorage } from './helpers';\n/**\n * Provides safe access to the globalThis.localStorage property.\n */\nexport const localStorageAdapter = {\n    getItem: (key) => {\n        if (!supportsLocalStorage()) {\n            return null;\n        }\n        return globalThis.localStorage.getItem(key);\n    },\n    setItem: (key, value) => {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        globalThis.localStorage.setItem(key, value);\n    },\n    removeItem: (key) => {\n        if (!supportsLocalStorage()) {\n            return;\n        }\n        globalThis.localStorage.removeItem(key);\n    },\n};\n/**\n * Returns a localStorage-like object that stores the key-value pairs in\n * memory.\n */\nexport function memoryLocalStorageAdapter(store = {}) {\n    return {\n        getItem: (key) => {\n            return store[key] || null;\n        },\n        setItem: (key, value) => {\n            store[key] = value;\n        },\n        removeItem: (key) => {\n            delete store[key];\n        },\n    };\n}\n//# sourceMappingURL=local-storage.js.map","import { supportsLocalStorage } from './helpers';\n/**\n * @experimental\n */\nexport const internals = {\n    /**\n     * @experimental\n     */\n    debug: !!(globalThis &&\n        supportsLocalStorage() &&\n        globalThis.localStorage &&\n        globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'),\n};\n/**\n * An error thrown when a lock cannot be acquired after some amount of time.\n *\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\n */\nexport class LockAcquireTimeoutError extends Error {\n    constructor(message) {\n        super(message);\n        this.isAcquireTimeout = true;\n    }\n}\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {\n}\nexport class ProcessLockAcquireTimeoutError extends LockAcquireTimeoutError {\n}\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock(name, acquireTimeout, fn) {\n    if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n    }\n    const abortController = new globalThis.AbortController();\n    if (acquireTimeout > 0) {\n        setTimeout(() => {\n            abortController.abort();\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n            }\n        }, acquireTimeout);\n    }\n    // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n    // Wrapping navigator.locks.request() with a plain Promise is done as some\n    // libraries like zone.js patch the Promise object to track the execution\n    // context. However, it appears that most browsers use an internal promise\n    // implementation when using the navigator.locks.request() API causing them\n    // to lose context and emit confusing log messages or break certain features.\n    // This wrapping is believed to help zone.js track the execution context\n    // better.\n    return await Promise.resolve().then(() => globalThis.navigator.locks.request(name, acquireTimeout === 0\n        ? {\n            mode: 'exclusive',\n            ifAvailable: true,\n        }\n        : {\n            mode: 'exclusive',\n            signal: abortController.signal,\n        }, async (lock) => {\n        if (lock) {\n            if (internals.debug) {\n                console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\n            }\n            try {\n                return await fn();\n            }\n            finally {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\n                }\n            }\n        }\n        else {\n            if (acquireTimeout === 0) {\n                if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\n                }\n                throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\n            }\n            else {\n                if (internals.debug) {\n                    try {\n                        const result = await globalThis.navigator.locks.query();\n                        console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\n                    }\n                    catch (e) {\n                        console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', e);\n                    }\n                }\n                // Browser is not following the Navigator LockManager spec, it\n                // returned a null lock when we didn't use ifAvailable. So we can\n                // pretend the lock is acquired in the name of backward compatibility\n                // and user experience and just run the function.\n                console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\n                return await fn();\n            }\n        }\n    }));\n}\nconst PROCESS_LOCKS = {};\n/**\n * Implements a global exclusive lock that works only in the current process.\n * Useful for environments like React Native or other non-browser\n * single-process (i.e. no concept of \"tabs\") environments.\n *\n * Use {@link #navigatorLock} in browser environments.\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function processLock(name, acquireTimeout, fn) {\n    var _a;\n    const previousOperation = (_a = PROCESS_LOCKS[name]) !== null && _a !== void 0 ? _a : Promise.resolve();\n    const currentOperation = Promise.race([\n        previousOperation.catch(() => {\n            // ignore error of previous operation that we're waiting to finish\n            return null;\n        }),\n        acquireTimeout >= 0\n            ? new Promise((_, reject) => {\n                setTimeout(() => {\n                    reject(new ProcessLockAcquireTimeoutError(`Acquring process lock with name \"${name}\" timed out`));\n                }, acquireTimeout);\n            })\n            : null,\n    ].filter((x) => x))\n        .catch((e) => {\n        if (e && e.isAcquireTimeout) {\n            throw e;\n        }\n        return null;\n    })\n        .then(async () => {\n        // previous operations finished and we didn't get a race on the acquire\n        // timeout, so the current operation can finally start\n        return await fn();\n    });\n    PROCESS_LOCKS[name] = currentOperation.catch(async (e) => {\n        if (e && e.isAcquireTimeout) {\n            // if the current operation timed out, it doesn't mean that the previous\n            // operation finished, so we need contnue waiting for it to finish\n            await previousOperation;\n            return null;\n        }\n        throw e;\n    });\n    // finally wait for the current operation to finish successfully, with an\n    // error or with an acquire timeout error\n    return await currentOperation;\n}\n//# sourceMappingURL=locks.js.map","/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n    if (typeof globalThis === 'object')\n        return;\n    try {\n        Object.defineProperty(Object.prototype, '__magic__', {\n            get: function () {\n                return this;\n            },\n            configurable: true,\n        });\n        // @ts-expect-error 'Allow access to magic'\n        __magic__.globalThis = __magic__;\n        // @ts-expect-error 'Allow access to magic'\n        delete Object.prototype.__magic__;\n    }\n    catch (e) {\n        if (typeof self !== 'undefined') {\n            // @ts-expect-error 'Allow access to globals'\n            self.globalThis = self;\n        }\n    }\n}\n//# sourceMappingURL=polyfills.js.map","export {};\n//# sourceMappingURL=types.js.map","export const version = '2.68.0';\n//# sourceMappingURL=version.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { resolveFetch } from './helper';\nimport { FunctionsFetchError, FunctionsHttpError, FunctionsRelayError, FunctionRegion, } from './types';\nexport class FunctionsClient {\n    constructor(url, { headers = {}, customFetch, region = FunctionRegion.Any, } = {}) {\n        this.url = url;\n        this.headers = headers;\n        this.region = region;\n        this.fetch = resolveFetch(customFetch);\n    }\n    /**\n     * Updates the authorization header\n     * @param token - the new jwt token sent in the authorisation header\n     */\n    setAuth(token) {\n        this.headers.Authorization = `Bearer ${token}`;\n    }\n    /**\n     * Invokes a function\n     * @param functionName - The name of the Function to invoke.\n     * @param options - Options for invoking the Function.\n     */\n    invoke(functionName, options = {}) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { headers, method, body: functionArgs } = options;\n                let _headers = {};\n                let { region } = options;\n                if (!region) {\n                    region = this.region;\n                }\n                if (region && region !== 'any') {\n                    _headers['x-region'] = region;\n                }\n                let body;\n                if (functionArgs &&\n                    ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)) {\n                    if ((typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\n                        functionArgs instanceof ArrayBuffer) {\n                        // will work for File as File inherits Blob\n                        // also works for ArrayBuffer as it is the same underlying structure as a Blob\n                        _headers['Content-Type'] = 'application/octet-stream';\n                        body = functionArgs;\n                    }\n                    else if (typeof functionArgs === 'string') {\n                        // plain string\n                        _headers['Content-Type'] = 'text/plain';\n                        body = functionArgs;\n                    }\n                    else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\n                        // don't set content-type headers\n                        // Request will automatically add the right boundary value\n                        body = functionArgs;\n                    }\n                    else {\n                        // default, assume this is JSON\n                        _headers['Content-Type'] = 'application/json';\n                        body = JSON.stringify(functionArgs);\n                    }\n                }\n                const response = yield this.fetch(`${this.url}/${functionName}`, {\n                    method: method || 'POST',\n                    // headers priority is (high to low):\n                    // 1. invoke-level headers\n                    // 2. client-level headers\n                    // 3. default Content-Type header\n                    headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\n                    body,\n                }).catch((fetchError) => {\n                    throw new FunctionsFetchError(fetchError);\n                });\n                const isRelayError = response.headers.get('x-relay-error');\n                if (isRelayError && isRelayError === 'true') {\n                    throw new FunctionsRelayError(response);\n                }\n                if (!response.ok) {\n                    throw new FunctionsHttpError(response);\n                }\n                let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\n                let data;\n                if (responseType === 'application/json') {\n                    data = yield response.json();\n                }\n                else if (responseType === 'application/octet-stream') {\n                    data = yield response.blob();\n                }\n                else if (responseType === 'text/event-stream') {\n                    data = response;\n                }\n                else if (responseType === 'multipart/form-data') {\n                    data = yield response.formData();\n                }\n                else {\n                    // default to text\n                    data = yield response.text();\n                }\n                return { data, error: null };\n            }\n            catch (error) {\n                return { data: null, error };\n            }\n        });\n    }\n}\n//# sourceMappingURL=FunctionsClient.js.map","export const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\n//# sourceMappingURL=helper.js.map","export class FunctionsError extends Error {\n    constructor(message, name = 'FunctionsError', context) {\n        super(message);\n        this.name = name;\n        this.context = context;\n    }\n}\nexport class FunctionsFetchError extends FunctionsError {\n    constructor(context) {\n        super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context);\n    }\n}\nexport class FunctionsRelayError extends FunctionsError {\n    constructor(context) {\n        super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context);\n    }\n}\nexport class FunctionsHttpError extends FunctionsError {\n    constructor(context) {\n        super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context);\n    }\n}\n// Define the enum for the 'region' property\nexport var FunctionRegion;\n(function (FunctionRegion) {\n    FunctionRegion[\"Any\"] = \"any\";\n    FunctionRegion[\"ApNortheast1\"] = \"ap-northeast-1\";\n    FunctionRegion[\"ApNortheast2\"] = \"ap-northeast-2\";\n    FunctionRegion[\"ApSouth1\"] = \"ap-south-1\";\n    FunctionRegion[\"ApSoutheast1\"] = \"ap-southeast-1\";\n    FunctionRegion[\"ApSoutheast2\"] = \"ap-southeast-2\";\n    FunctionRegion[\"CaCentral1\"] = \"ca-central-1\";\n    FunctionRegion[\"EuCentral1\"] = \"eu-central-1\";\n    FunctionRegion[\"EuWest1\"] = \"eu-west-1\";\n    FunctionRegion[\"EuWest2\"] = \"eu-west-2\";\n    FunctionRegion[\"EuWest3\"] = \"eu-west-3\";\n    FunctionRegion[\"SaEast1\"] = \"sa-east-1\";\n    FunctionRegion[\"UsEast1\"] = \"us-east-1\";\n    FunctionRegion[\"UsWest1\"] = \"us-west-1\";\n    FunctionRegion[\"UsWest2\"] = \"us-west-2\";\n})(FunctionRegion || (FunctionRegion = {}));\n//# sourceMappingURL=types.js.map","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function() {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') { return self; }\n    if (typeof window !== 'undefined') { return window; }\n    if (typeof global !== 'undefined') { return global; }\n    throw new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nexport const fetch = globalObject.fetch;\n\nexport default globalObject.fetch.bind(globalObject);\n\nexport const Headers = globalObject.Headers;\nexport const Request = globalObject.Request;\nexport const Response = globalObject.Response;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst node_fetch_1 = __importDefault(require(\"@supabase/node-fetch\"));\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\nclass PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.isMaybeSingle = builder.isMaybeSingle;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = node_fetch_1.default;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    /**\n     * Set an HTTP header for the request.\n     */\n    setHeader(name, value) {\n        this.headers = Object.assign({}, this.headers);\n        this.headers[name] = value;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n                    if (data.length > 1) {\n                        error = {\n                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                            code: 'PGRST116',\n                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                            hint: null,\n                            message: 'JSON object requested, multiple (or no) rows returned',\n                        };\n                        data = null;\n                        count = null;\n                        status = 406;\n                        statusText = 'Not Acceptable';\n                    }\n                    else if (data.length === 1) {\n                        data = data[0];\n                    }\n                    else {\n                        data = null;\n                    }\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw new PostgrestError_1.default(error);\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => {\n                var _a, _b, _c;\n                return ({\n                    error: {\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                        hint: '',\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\n                    },\n                    data: null,\n                    count: null,\n                    status: 0,\n                    statusText: '',\n                });\n            });\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */\n    returns() {\n        /* istanbul ignore next */\n        return this;\n    }\n    /**\n     * Override the type of the returned `data` field in the response.\n     *\n     * @typeParam NewResult - The new type to cast the response data to\n     * @typeParam Options - Optional type configuration (defaults to { merge: true })\n     * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\n     * @example\n     * ```typescript\n     * // Merge with existing types (default behavior)\n     * const query = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ custom_field: string }>()\n     *\n     * // Replace existing types completely\n     * const replaceQuery = supabase\n     *   .from('users')\n     *   .select()\n     *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\n     * ```\n     * @returns A PostgrestBuilder instance with the new type\n     */\n    overrideTypes() {\n        return this;\n    }\n}\nexports.default = PostgrestBuilder;\n//# sourceMappingURL=PostgrestBuilder.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestQueryBuilder_1 = __importDefault(require(\"./PostgrestQueryBuilder\"));\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nconst constants_1 = require(\"./constants\");\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nclass PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);\n        this.schemaName = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder_1.default(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schemaName,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return new PostgrestClient(this.url, {\n            headers: this.headers,\n            schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, get = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head || get) {\n            method = head ? 'HEAD' : 'GET';\n            Object.entries(args)\n                // params with undefined value needs to be filtered out, otherwise it'll\n                // show up as `?param=undefined`\n                .filter(([_, value]) => value !== undefined)\n                // array values need special syntax\n                .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\n                .forEach(([name, value]) => {\n                url.searchParams.append(name, value);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url,\n            headers,\n            schema: this.schemaName,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestClient;\n//# sourceMappingURL=PostgrestClient.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Error format\n *\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\n */\nclass PostgrestError extends Error {\n    constructor(context) {\n        super(context.message);\n        this.name = 'PostgrestError';\n        this.details = context.details;\n        this.hint = context.hint;\n        this.code = context.code;\n    }\n}\nexports.default = PostgrestError;\n//# sourceMappingURL=PostgrestError.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestTransformBuilder_1 = __importDefault(require(\"./PostgrestTransformBuilder\"));\nclass PostgrestFilterBuilder extends PostgrestTransformBuilder_1.default {\n    /**\n     * Match only rows where `column` is equal to `value`.\n     *\n     * To check if the value of `column` is NULL, you should use `.is()` instead.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    eq(column, value) {\n        this.url.searchParams.append(column, `eq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is not equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    neq(column, value) {\n        this.url.searchParams.append(column, `neq.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gt(column, value) {\n        this.url.searchParams.append(column, `gt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is greater than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    gte(column, value) {\n        this.url.searchParams.append(column, `gte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lt(column, value) {\n        this.url.searchParams.append(column, `lt.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is less than or equal to `value`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    lte(column, value) {\n        this.url.searchParams.append(column, `lte.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    like(column, pattern) {\n        this.url.searchParams.append(column, `like.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches all of `patterns` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    likeAllOf(column, patterns) {\n        this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches any of `patterns` case-sensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    likeAnyOf(column, patterns) {\n        this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches `pattern` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param pattern - The pattern to match with\n     */\n    ilike(column, pattern) {\n        this.url.searchParams.append(column, `ilike.${pattern}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches all of `patterns` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    ilikeAllOf(column, patterns) {\n        this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` matches any of `patterns` case-insensitively.\n     *\n     * @param column - The column to filter on\n     * @param patterns - The patterns to match with\n     */\n    ilikeAnyOf(column, patterns) {\n        this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` IS `value`.\n     *\n     * For non-boolean columns, this is only relevant for checking if the value of\n     * `column` is NULL by setting `value` to `null`.\n     *\n     * For boolean columns, you can also set `value` to `true` or `false` and it\n     * will behave the same way as `.eq()`.\n     *\n     * @param column - The column to filter on\n     * @param value - The value to filter with\n     */\n    is(column, value) {\n        this.url.searchParams.append(column, `is.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows where `column` is included in the `values` array.\n     *\n     * @param column - The column to filter on\n     * @param values - The values array to filter with\n     */\n    in(column, values) {\n        const cleanedValues = Array.from(new Set(values))\n            .map((s) => {\n            // handle postgrest reserved characters\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\n                return `\"${s}\"`;\n            else\n                return `${s}`;\n        })\n            .join(',');\n        this.url.searchParams.append(column, `in.(${cleanedValues})`);\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * `column` contains every element appearing in `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    contains(column, value) {\n        if (typeof value === 'string') {\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n            // keep it simple and accept a string\n            this.url.searchParams.append(column, `cs.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for jsonb, array, and range columns. Match only rows where\n     * every element appearing in `column` is contained by `value`.\n     *\n     * @param column - The jsonb, array, or range column to filter on\n     * @param value - The jsonb, array, or range value to filter with\n     */\n    containedBy(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `cd.${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // array\n            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\n        }\n        else {\n            // json\n            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is greater than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGt(column, range) {\n        this.url.searchParams.append(column, `sr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or greater than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeGte(column, range) {\n        this.url.searchParams.append(column, `nxl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is less than any element in `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLt(column, range) {\n        this.url.searchParams.append(column, `sl.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where every element in\n     * `column` is either contained in `range` or less than any element in\n     * `range`.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeLte(column, range) {\n        this.url.searchParams.append(column, `nxr.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for range columns. Match only rows where `column` is\n     * mutually exclusive to `range` and there can be no element between the two\n     * ranges.\n     *\n     * @param column - The range column to filter on\n     * @param range - The range to filter with\n     */\n    rangeAdjacent(column, range) {\n        this.url.searchParams.append(column, `adj.${range}`);\n        return this;\n    }\n    /**\n     * Only relevant for array and range columns. Match only rows where\n     * `column` and `value` have an element in common.\n     *\n     * @param column - The array or range column to filter on\n     * @param value - The array or range value to filter with\n     */\n    overlaps(column, value) {\n        if (typeof value === 'string') {\n            // range\n            this.url.searchParams.append(column, `ov.${value}`);\n        }\n        else {\n            // array\n            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\n        }\n        return this;\n    }\n    /**\n     * Only relevant for text and tsvector columns. Match only rows where\n     * `column` matches the query string in `query`.\n     *\n     * @param column - The text or tsvector column to filter on\n     * @param query - The query text to match with\n     * @param options - Named parameters\n     * @param options.config - The text search configuration to use\n     * @param options.type - Change how the `query` text is interpreted\n     */\n    textSearch(column, query, { config, type } = {}) {\n        let typePart = '';\n        if (type === 'plain') {\n            typePart = 'pl';\n        }\n        else if (type === 'phrase') {\n            typePart = 'ph';\n        }\n        else if (type === 'websearch') {\n            typePart = 'w';\n        }\n        const configPart = config === undefined ? '' : `(${config})`;\n        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\n        return this;\n    }\n    /**\n     * Match only rows where each column in `query` keys is equal to its\n     * associated value. Shorthand for multiple `.eq()`s.\n     *\n     * @param query - The object to filter with, with column names as keys mapped\n     * to their filter values\n     */\n    match(query) {\n        Object.entries(query).forEach(([column, value]) => {\n            this.url.searchParams.append(column, `eq.${value}`);\n        });\n        return this;\n    }\n    /**\n     * Match only rows which doesn't satisfy the filter.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to be negated to filter with, following\n     * PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    not(column, operator, value) {\n        this.url.searchParams.append(column, `not.${operator}.${value}`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy at least one of the filters.\n     *\n     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure it's properly sanitized.\n     *\n     * It's currently not possible to do an `.or()` filter across multiple tables.\n     *\n     * @param filters - The filters to use, following PostgREST syntax\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to filter on referenced tables\n     * instead of the parent table\n     * @param options.foreignTable - Deprecated, use `referencedTable` instead\n     */\n    or(filters, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = referencedTable ? `${referencedTable}.or` : 'or';\n        this.url.searchParams.append(key, `(${filters})`);\n        return this;\n    }\n    /**\n     * Match only rows which satisfy the filter. This is an escape hatch - you\n     * should use the specific filter methods wherever possible.\n     *\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\n     * follow [PostgREST\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\n     * to make sure they are properly sanitized.\n     *\n     * @param column - The column to filter on\n     * @param operator - The operator to filter with, following PostgREST syntax\n     * @param value - The value to filter with, following PostgREST syntax\n     */\n    filter(column, operator, value) {\n        this.url.searchParams.append(column, `${operator}.${value}`);\n        return this;\n    }\n}\nexports.default = PostgrestFilterBuilder;\n//# sourceMappingURL=PostgrestFilterBuilder.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nclass PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, { head = false, count, } = {}) {\n        const method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n    insert(values, { count, defaultToNull = true, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [];\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n            prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n    upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n            prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, { count, } = {}) {\n        const method = 'PATCH';\n        const prefersHeaders = [];\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({ count, } = {}) {\n        const method = 'DELETE';\n        const prefersHeaders = [];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestQueryBuilder;\n//# sourceMappingURL=PostgrestQueryBuilder.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nclass PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = referencedTable ? `${referencedTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    limit(count, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    range(from, to, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n            this.headers['Accept'] = 'application/json';\n        }\n        else {\n            this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        }\n        this.isMaybeSingle = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * You need to enable the\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n     * setting before using this method.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        var _a;\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\n     */\n    returns() {\n        return this;\n    }\n}\nexports.default = PostgrestTransformBuilder;\n//# sourceMappingURL=PostgrestTransformBuilder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_HEADERS = void 0;\nconst version_1 = require(\"./version\");\nexports.DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version_1.version}` };\n//# sourceMappingURL=constants.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;\n// Always update wrapper.mjs when updating this file.\nconst PostgrestClient_1 = __importDefault(require(\"./PostgrestClient\"));\nexports.PostgrestClient = PostgrestClient_1.default;\nconst PostgrestQueryBuilder_1 = __importDefault(require(\"./PostgrestQueryBuilder\"));\nexports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nexports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;\nconst PostgrestTransformBuilder_1 = __importDefault(require(\"./PostgrestTransformBuilder\"));\nexports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nexports.PostgrestBuilder = PostgrestBuilder_1.default;\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\nexports.PostgrestError = PostgrestError_1.default;\nexports.default = {\n    PostgrestClient: PostgrestClient_1.default,\n    PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,\n    PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,\n    PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,\n    PostgrestBuilder: PostgrestBuilder_1.default,\n    PostgrestError: PostgrestError_1.default,\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\nexports.version = '0.0.0-automated';\n//# sourceMappingURL=version.js.map","import index from '../cjs/index.js'\nconst {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n} = index\n\nexport {\n  PostgrestBuilder,\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n  PostgrestTransformBuilder,\n  PostgrestError,\n}\n\n// compatibility with CJS output\nexport default {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n}\n","import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nimport { httpEndpointURL } from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n    REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\nexport const REALTIME_CHANNEL_STATES = CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nexport default class RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.subTopic = topic.replace(/^realtime:/i, '');\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n            private: false,\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence(this);\n        this.broadcastEndpointURL =\n            httpEndpointURL(this.socket.endPoint) + '/api/broadcast';\n        this.private = this.params.config.private || false;\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (!this.socket.isConnected()) {\n            this.socket.connect();\n        }\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence, private: isPrivate }, } = this.params;\n            this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\n            this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n                private: isPrivate,\n            };\n            if (this.socket.accessTokenValue) {\n                accessTokenPayload.access_token = this.socket.accessTokenValue;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', async ({ postgres_changes }) => {\n                var _a;\n                this.socket.setAuth();\n                if (postgres_changes === undefined) {\n                    callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = postgres_changes && postgres_changes[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    async track(payload, opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'track',\n            payload,\n        }, opts.timeout || this.timeout);\n    }\n    async untrack(opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'untrack',\n        }, opts);\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    /**\n     * Sends a message into the channel.\n     *\n     * @param args Arguments to send to channel\n     * @param args.type The type of event to send\n     * @param args.event The name of the event being sent\n     * @param args.payload Payload to be sent\n     * @param opts Options to be used during the send process\n     */\n    async send(args, opts = {}) {\n        var _a, _b;\n        if (!this._canPush() && args.type === 'broadcast') {\n            const { event, payload: endpoint_payload } = args;\n            const authorization = this.socket.accessTokenValue\n                ? `Bearer ${this.socket.accessTokenValue}`\n                : '';\n            const options = {\n                method: 'POST',\n                headers: {\n                    Authorization: authorization,\n                    apikey: this.socket.apiKey ? this.socket.apiKey : '',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    messages: [\n                        {\n                            topic: this.subTopic,\n                            event,\n                            payload: endpoint_payload,\n                            private: this.private,\n                        },\n                    ],\n                }),\n            };\n            try {\n                const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n                await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n                return response.ok ? 'ok' : 'error';\n            }\n            catch (error) {\n                if (error.name === 'AbortError') {\n                    return 'timed out';\n                }\n                else {\n                    return 'error';\n                }\n            }\n        }\n        else {\n            return new Promise((resolve) => {\n                var _a, _b, _c;\n                const push = this._push(args.type, args, opts.timeout || this.timeout);\n                if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                    resolve('ok');\n                }\n                push.receive('ok', () => resolve('ok'));\n                push.receive('error', () => resolve('error'));\n                push.receive('timeout', () => resolve('timed out'));\n            });\n        }\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    async _fetchWithTimeout(url, options, timeout) {\n        const controller = new AbortController();\n        const id = setTimeout(() => controller.abort(), timeout);\n        const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));\n        clearTimeout(id);\n        return response;\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new Push(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\n//# sourceMappingURL=RealtimeChannel.js.map","import { CHANNEL_EVENTS, CONNECTION_STATE, DEFAULT_HEADERS, DEFAULT_TIMEOUT, SOCKET_STATES, TRANSPORTS, VSN, WS_CLOSE_NORMAL, } from './lib/constants';\nimport Serializer from './lib/serializer';\nimport Timer from './lib/timer';\nimport { httpEndpointURL } from './lib/transformers';\nimport RealtimeChannel from './RealtimeChannel';\nconst noop = () => { };\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nexport default class RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessTokenValue = null;\n        this.apiKey = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.httpEndpoint = '';\n        this.headers = DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = 30000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new Serializer();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.accessToken = null;\n        /**\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\n         *\n         * @internal\n         */\n        this._resolveFetch = (customFetch) => {\n            let _fetch;\n            if (customFetch) {\n                _fetch = customFetch;\n            }\n            else if (typeof fetch === 'undefined') {\n                _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n            }\n            else {\n                _fetch = fetch;\n            }\n            return (...args) => _fetch(...args);\n        };\n        this.endPoint = `${endPoint}/${TRANSPORTS.websocket}`;\n        this.httpEndpoint = httpEndpointURL(endPoint);\n        if (options === null || options === void 0 ? void 0 : options.transport) {\n            this.transport = options.transport;\n        }\n        else {\n            this.transport = null;\n        }\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        const accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n        if (accessTokenValue) {\n            this.accessTokenValue = accessTokenValue;\n            this.apiKey = accessTokenValue;\n        }\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\n            ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\n            ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\n            ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new Timer(async () => {\n            this.disconnect();\n            this.connect();\n        }, this.reconnectAfterMs);\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n        if (options === null || options === void 0 ? void 0 : options.worker) {\n            if (typeof window !== 'undefined' && !window.Worker) {\n                throw new Error('Web Worker is not supported');\n            }\n            this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;\n            this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n        }\n        this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        if (this.transport) {\n            this.conn = new this.transport(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            return;\n        }\n        if (NATIVE_WEBSOCKET_AVAILABLE) {\n            this.conn = new WebSocket(this.endpointURL());\n            this.setupConnection();\n            return;\n        }\n        this.conn = new WSWebSocketDummy(this.endpointURL(), undefined, {\n            close: () => {\n                this.conn = null;\n            },\n        });\n        import('ws').then(({ default: WS }) => {\n            this.conn = new WS(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n        });\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: VSN }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n            // remove open handles\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.reconnectTimer.reset();\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n        const status = await channel.unsubscribe();\n        if (this.channels.length === 0) {\n            this.disconnect();\n        }\n        return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\n        this.disconnect();\n        return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case SOCKET_STATES.connecting:\n                return CONNECTION_STATE.Connecting;\n            case SOCKET_STATES.open:\n                return CONNECTION_STATE.Open;\n            case SOCKET_STATES.closing:\n                return CONNECTION_STATE.Closing;\n            default:\n                return CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === CONNECTION_STATE.Open;\n    }\n    channel(topic, params = { config: {} }) {\n        const chan = new RealtimeChannel(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        const callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n        let tokenToSend = token ||\n            (this.accessToken && (await this.accessToken())) ||\n            this.accessTokenValue;\n        if (tokenToSend) {\n            let parsed = null;\n            try {\n                parsed = JSON.parse(atob(tokenToSend.split('.')[1]));\n            }\n            catch (_error) { }\n            if (parsed && parsed.exp) {\n                let now = Math.floor(Date.now() / 1000);\n                let valid = now - parsed.exp < 0;\n                if (!valid) {\n                    this.log('auth', `InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                    return Promise.reject(`InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                }\n            }\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach((channel) => {\n                tokenToSend && channel.updateJoinPayload({ access_token: tokenToSend });\n                if (channel.joinedOnce && channel._isJoined()) {\n                    channel._push(CHANNEL_EVENTS.access_token, {\n                        access_token: tokenToSend,\n                    });\n                }\n            });\n        }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth();\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\n    }\n    /**\n     * Sets up connection handlers.\n     *\n     * @internal\n     */\n    setupConnection() {\n        if (this.conn) {\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this._onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if (ref && ref === this.pendingHeartbeatRef) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /** @internal */\n    async _onConnOpen() {\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this.reconnectTimer.reset();\n        if (!this.worker) {\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n        }\n        else {\n            if (this.workerUrl) {\n                this.log('worker', `starting worker for from ${this.workerUrl}`);\n            }\n            else {\n                this.log('worker', `starting default worker`);\n            }\n            const objectUrl = this._workerObjectUrl(this.workerUrl);\n            this.workerRef = new Worker(objectUrl);\n            this.workerRef.onerror = (error) => {\n                this.log('worker', 'worker error', error.message);\n                this.workerRef.terminate();\n            };\n            this.workerRef.onmessage = (event) => {\n                if (event.data.event === 'keepAlive') {\n                    this.sendHeartbeat();\n                }\n            };\n            this.workerRef.postMessage({\n                event: 'start',\n                interval: this.heartbeatIntervalMs,\n            });\n        }\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    /** @internal */\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    /** @internal */\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n        let result_url;\n        if (url) {\n            result_url = url;\n        }\n        else {\n            const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' });\n            result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n    }\n}\nclass WSWebSocketDummy {\n    constructor(address, _protocols, options) {\n        this.binaryType = 'arraybuffer';\n        this.onclose = () => { };\n        this.onerror = () => { };\n        this.onmessage = () => { };\n        this.onopen = () => { };\n        this.readyState = SOCKET_STATES.connecting;\n        this.send = () => { };\n        this.url = null;\n        this.url = address;\n        this.close = options.close;\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map","/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map","import RealtimeClient from './RealtimeClient';\nimport RealtimeChannel, { REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES, } from './RealtimeChannel';\nimport RealtimePresence, { REALTIME_PRESENCE_LISTEN_EVENTS, } from './RealtimePresence';\nexport { RealtimePresence, RealtimeChannel, RealtimeClient, REALTIME_LISTEN_TYPES, REALTIME_POSTGRES_CHANGES_LISTEN_EVENT, REALTIME_PRESENCE_LISTEN_EVENTS, REALTIME_SUBSCRIBE_STATES, REALTIME_CHANNEL_STATES, };\n//# sourceMappingURL=index.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `realtime-js/${version}` };\nexport const VSN = '1.0.0';\nexport const DEFAULT_TIMEOUT = 10000;\nexport const WS_CLOSE_NORMAL = 1000;\nexport var SOCKET_STATES;\n(function (SOCKET_STATES) {\n    SOCKET_STATES[SOCKET_STATES[\"connecting\"] = 0] = \"connecting\";\n    SOCKET_STATES[SOCKET_STATES[\"open\"] = 1] = \"open\";\n    SOCKET_STATES[SOCKET_STATES[\"closing\"] = 2] = \"closing\";\n    SOCKET_STATES[SOCKET_STATES[\"closed\"] = 3] = \"closed\";\n})(SOCKET_STATES || (SOCKET_STATES = {}));\nexport var CHANNEL_STATES;\n(function (CHANNEL_STATES) {\n    CHANNEL_STATES[\"closed\"] = \"closed\";\n    CHANNEL_STATES[\"errored\"] = \"errored\";\n    CHANNEL_STATES[\"joined\"] = \"joined\";\n    CHANNEL_STATES[\"joining\"] = \"joining\";\n    CHANNEL_STATES[\"leaving\"] = \"leaving\";\n})(CHANNEL_STATES || (CHANNEL_STATES = {}));\nexport var CHANNEL_EVENTS;\n(function (CHANNEL_EVENTS) {\n    CHANNEL_EVENTS[\"close\"] = \"phx_close\";\n    CHANNEL_EVENTS[\"error\"] = \"phx_error\";\n    CHANNEL_EVENTS[\"join\"] = \"phx_join\";\n    CHANNEL_EVENTS[\"reply\"] = \"phx_reply\";\n    CHANNEL_EVENTS[\"leave\"] = \"phx_leave\";\n    CHANNEL_EVENTS[\"access_token\"] = \"access_token\";\n})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));\nexport var TRANSPORTS;\n(function (TRANSPORTS) {\n    TRANSPORTS[\"websocket\"] = \"websocket\";\n})(TRANSPORTS || (TRANSPORTS = {}));\nexport var CONNECTION_STATE;\n(function (CONNECTION_STATE) {\n    CONNECTION_STATE[\"Connecting\"] = \"connecting\";\n    CONNECTION_STATE[\"Open\"] = \"open\";\n    CONNECTION_STATE[\"Closing\"] = \"closing\";\n    CONNECTION_STATE[\"Closed\"] = \"closed\";\n})(CONNECTION_STATE || (CONNECTION_STATE = {}));\n//# sourceMappingURL=constants.js.map","import { DEFAULT_TIMEOUT } from '../lib/constants';\nexport default class Push {\n    /**\n     * Initializes the Push\n     *\n     * @param channel The Channel\n     * @param event The event, for example `\"phx_join\"`\n     * @param payload The payload, for example `{user_id: 123}`\n     * @param timeout The push timeout in milliseconds\n     */\n    constructor(channel, event, payload = {}, timeout = DEFAULT_TIMEOUT) {\n        this.channel = channel;\n        this.event = event;\n        this.payload = payload;\n        this.timeout = timeout;\n        this.sent = false;\n        this.timeoutTimer = undefined;\n        this.ref = '';\n        this.receivedResp = null;\n        this.recHooks = [];\n        this.refEvent = null;\n    }\n    resend(timeout) {\n        this.timeout = timeout;\n        this._cancelRefEvent();\n        this.ref = '';\n        this.refEvent = null;\n        this.receivedResp = null;\n        this.sent = false;\n        this.send();\n    }\n    send() {\n        if (this._hasReceived('timeout')) {\n            return;\n        }\n        this.startTimeout();\n        this.sent = true;\n        this.channel.socket.push({\n            topic: this.channel.topic,\n            event: this.event,\n            payload: this.payload,\n            ref: this.ref,\n            join_ref: this.channel._joinRef(),\n        });\n    }\n    updatePayload(payload) {\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n    receive(status, callback) {\n        var _a;\n        if (this._hasReceived(status)) {\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n        }\n        this.recHooks.push({ status, callback });\n        return this;\n    }\n    startTimeout() {\n        if (this.timeoutTimer) {\n            return;\n        }\n        this.ref = this.channel.socket._makeRef();\n        this.refEvent = this.channel._replyEventName(this.ref);\n        const callback = (payload) => {\n            this._cancelRefEvent();\n            this._cancelTimeout();\n            this.receivedResp = payload;\n            this._matchReceive(payload);\n        };\n        this.channel._on(this.refEvent, {}, callback);\n        this.timeoutTimer = setTimeout(() => {\n            this.trigger('timeout', {});\n        }, this.timeout);\n    }\n    trigger(status, response) {\n        if (this.refEvent)\n            this.channel._trigger(this.refEvent, { status, response });\n    }\n    destroy() {\n        this._cancelRefEvent();\n        this._cancelTimeout();\n    }\n    _cancelRefEvent() {\n        if (!this.refEvent) {\n            return;\n        }\n        this.channel._off(this.refEvent, {});\n    }\n    _cancelTimeout() {\n        clearTimeout(this.timeoutTimer);\n        this.timeoutTimer = undefined;\n    }\n    _matchReceive({ status, response, }) {\n        this.recHooks\n            .filter((h) => h.status === status)\n            .forEach((h) => h.callback(response));\n    }\n    _hasReceived(status) {\n        return this.receivedResp && this.receivedResp.status === status;\n    }\n}\n//# sourceMappingURL=push.js.map","// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n    constructor() {\n        this.HEADER_LENGTH = 1;\n    }\n    decode(rawPayload, callback) {\n        if (rawPayload.constructor === ArrayBuffer) {\n            return callback(this._binaryDecode(rawPayload));\n        }\n        if (typeof rawPayload === 'string') {\n            return callback(JSON.parse(rawPayload));\n        }\n        return callback({});\n    }\n    _binaryDecode(buffer) {\n        const view = new DataView(buffer);\n        const decoder = new TextDecoder();\n        return this._decodeBroadcast(buffer, view, decoder);\n    }\n    _decodeBroadcast(buffer, view, decoder) {\n        const topicSize = view.getUint8(1);\n        const eventSize = view.getUint8(2);\n        let offset = this.HEADER_LENGTH + 2;\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n        offset = offset + topicSize;\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n        offset = offset + eventSize;\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n        return { ref: null, topic: topic, event: event, payload: data };\n    }\n}\n//# sourceMappingURL=serializer.js.map","/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map","/**\n * Helpers to convert the change Payload into native JS types.\n */\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\nexport var PostgresTypes;\n(function (PostgresTypes) {\n    PostgresTypes[\"abstime\"] = \"abstime\";\n    PostgresTypes[\"bool\"] = \"bool\";\n    PostgresTypes[\"date\"] = \"date\";\n    PostgresTypes[\"daterange\"] = \"daterange\";\n    PostgresTypes[\"float4\"] = \"float4\";\n    PostgresTypes[\"float8\"] = \"float8\";\n    PostgresTypes[\"int2\"] = \"int2\";\n    PostgresTypes[\"int4\"] = \"int4\";\n    PostgresTypes[\"int4range\"] = \"int4range\";\n    PostgresTypes[\"int8\"] = \"int8\";\n    PostgresTypes[\"int8range\"] = \"int8range\";\n    PostgresTypes[\"json\"] = \"json\";\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\n    PostgresTypes[\"money\"] = \"money\";\n    PostgresTypes[\"numeric\"] = \"numeric\";\n    PostgresTypes[\"oid\"] = \"oid\";\n    PostgresTypes[\"reltime\"] = \"reltime\";\n    PostgresTypes[\"text\"] = \"text\";\n    PostgresTypes[\"time\"] = \"time\";\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\n    PostgresTypes[\"timetz\"] = \"timetz\";\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\n})(PostgresTypes || (PostgresTypes = {}));\n/**\n * Takes an array of columns and an object of string values then converts each string value\n * to its mapped type.\n *\n * @param {{name: String, type: String}[]} columns\n * @param {Object} record\n * @param {Object} options The map of various options that can be applied to the mapper\n * @param {Array} options.skipTypes The array of types that should not be converted\n *\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\n * //=>{ first_name: 'Paul', age: 33 }\n */\nexport const convertChangeData = (columns, record, options = {}) => {\n    var _a;\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\n    return Object.keys(record).reduce((acc, rec_key) => {\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\n        return acc;\n    }, {});\n};\n/**\n * Converts the value of an individual column.\n *\n * @param {String} columnName The column that you want to convert\n * @param {{name: String, type: String}[]} columns All of the columns\n * @param {Object} record The map of string values\n * @param {Array} skipTypes An array of types that should not be converted\n * @return {object} Useless information\n *\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\n * //=> 33\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\n * //=> \"33\"\n */\nexport const convertColumn = (columnName, columns, record, skipTypes) => {\n    const column = columns.find((x) => x.name === columnName);\n    const colType = column === null || column === void 0 ? void 0 : column.type;\n    const value = record[columnName];\n    if (colType && !skipTypes.includes(colType)) {\n        return convertCell(colType, value);\n    }\n    return noop(value);\n};\n/**\n * If the value of the cell is `null`, returns null.\n * Otherwise converts the string value to the correct type.\n * @param {String} type A postgres column type\n * @param {String} value The cell value\n *\n * @example convertCell('bool', 't')\n * //=> true\n * @example convertCell('int8', '10')\n * //=> 10\n * @example convertCell('_int4', '{1,2,3,4}')\n * //=> [1,2,3,4]\n */\nexport const convertCell = (type, value) => {\n    // if data type is an array\n    if (type.charAt(0) === '_') {\n        const dataType = type.slice(1, type.length);\n        return toArray(value, dataType);\n    }\n    // If not null, convert to correct type.\n    switch (type) {\n        case PostgresTypes.bool:\n            return toBoolean(value);\n        case PostgresTypes.float4:\n        case PostgresTypes.float8:\n        case PostgresTypes.int2:\n        case PostgresTypes.int4:\n        case PostgresTypes.int8:\n        case PostgresTypes.numeric:\n        case PostgresTypes.oid:\n            return toNumber(value);\n        case PostgresTypes.json:\n        case PostgresTypes.jsonb:\n            return toJson(value);\n        case PostgresTypes.timestamp:\n            return toTimestampString(value); // Format to be consistent with PostgREST\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\n        case PostgresTypes.daterange:\n        case PostgresTypes.int4range:\n        case PostgresTypes.int8range:\n        case PostgresTypes.money:\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\n        case PostgresTypes.text:\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\n        case PostgresTypes.tsrange:\n        case PostgresTypes.tstzrange:\n            return noop(value);\n        default:\n            // Return the value for remaining types\n            return noop(value);\n    }\n};\nconst noop = (value) => {\n    return value;\n};\nexport const toBoolean = (value) => {\n    switch (value) {\n        case 't':\n            return true;\n        case 'f':\n            return false;\n        default:\n            return value;\n    }\n};\nexport const toNumber = (value) => {\n    if (typeof value === 'string') {\n        const parsedValue = parseFloat(value);\n        if (!Number.isNaN(parsedValue)) {\n            return parsedValue;\n        }\n    }\n    return value;\n};\nexport const toJson = (value) => {\n    if (typeof value === 'string') {\n        try {\n            return JSON.parse(value);\n        }\n        catch (error) {\n            console.log(`JSON parse error: ${error}`);\n            return value;\n        }\n    }\n    return value;\n};\n/**\n * Converts a Postgres Array into a native JS array\n *\n * @example toArray('{}', 'int4')\n * //=> []\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\n * @example toArray([1,2,3,4], 'int4')\n * //=> [1,2,3,4]\n */\nexport const toArray = (value, type) => {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    const lastIdx = value.length - 1;\n    const closeBrace = value[lastIdx];\n    const openBrace = value[0];\n    // Confirm value is a Postgres array by checking curly brackets\n    if (openBrace === '{' && closeBrace === '}') {\n        let arr;\n        const valTrim = value.slice(1, lastIdx);\n        // TODO: find a better solution to separate Postgres array data\n        try {\n            arr = JSON.parse('[' + valTrim + ']');\n        }\n        catch (_) {\n            // WARNING: splitting on comma does not cover all edge cases\n            arr = valTrim ? valTrim.split(',') : [];\n        }\n        return arr.map((val) => convertCell(type, val));\n    }\n    return value;\n};\n/**\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\n * See https://github.com/supabase/supabase/issues/18\n *\n * @example toTimestampString('2019-09-10 00:00:00')\n * //=> '2019-09-10T00:00:00'\n */\nexport const toTimestampString = (value) => {\n    if (typeof value === 'string') {\n        return value.replace(' ', 'T');\n    }\n    return value;\n};\nexport const httpEndpointURL = (socketUrl) => {\n    let url = socketUrl;\n    url = url.replace(/^ws/i, 'http');\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\n    return url.replace(/\\/+$/, '');\n};\n//# sourceMappingURL=transformers.js.map","export const version = '2.11.2';\n//# sourceMappingURL=version.js.map","import StorageFileApi from './packages/StorageFileApi';\nimport StorageBucketApi from './packages/StorageBucketApi';\nexport class StorageClient extends StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        super(url, headers, fetch);\n    }\n    /**\n     * Perform file operation in a bucket.\n     *\n     * @param id The bucket id to operate on.\n     */\n    from(id) {\n        return new StorageFileApi(this.url, this.headers, id, this.fetch);\n    }\n}\n//# sourceMappingURL=StorageClient.js.map","import { version } from './version';\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` };\n//# sourceMappingURL=constants.js.map","export class StorageError extends Error {\n    constructor(message) {\n        super(message);\n        this.__isStorageError = true;\n        this.name = 'StorageError';\n    }\n}\nexport function isStorageError(error) {\n    return typeof error === 'object' && error !== null && '__isStorageError' in error;\n}\nexport class StorageApiError extends StorageError {\n    constructor(message, status) {\n        super(message);\n        this.name = 'StorageApiError';\n        this.status = status;\n    }\n    toJSON() {\n        return {\n            name: this.name,\n            message: this.message,\n            status: this.status,\n        };\n    }\n}\nexport class StorageUnknownError extends StorageError {\n    constructor(message, originalError) {\n        super(message);\n        this.name = 'StorageUnknownError';\n        this.originalError = originalError;\n    }\n}\n//# sourceMappingURL=errors.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageApiError, StorageUnknownError } from './errors';\nimport { resolveResponse } from './helpers';\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\n    const Res = yield resolveResponse();\n    if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\n        error\n            .json()\n            .then((err) => {\n            reject(new StorageApiError(_getErrorMessage(err), error.status || 500));\n        })\n            .catch((err) => {\n            reject(new StorageUnknownError(_getErrorMessage(err), err));\n        });\n    }\n    else {\n        reject(new StorageUnknownError(_getErrorMessage(error), error));\n    }\n});\nconst _getRequestParams = (method, options, parameters, body) => {\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\n    if (method === 'GET') {\n        return params;\n    }\n    params.headers = Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers);\n    if (body) {\n        params.body = JSON.stringify(body);\n    }\n    return Object.assign(Object.assign({}, params), parameters);\n};\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            fetcher(url, _getRequestParams(method, options, parameters, body))\n                .then((result) => {\n                if (!result.ok)\n                    throw result;\n                if (options === null || options === void 0 ? void 0 : options.noResolveJson)\n                    return result;\n                return result.json();\n            })\n                .then((data) => resolve(data))\n                .catch((error) => handleError(error, reject, options));\n        });\n    });\n}\nexport function get(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'GET', url, options, parameters);\n    });\n}\nexport function post(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n    });\n}\nexport function put(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n    });\n}\nexport function head(fetcher, url, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'HEAD', url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);\n    });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n    });\n}\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = (...args) => import('@supabase/node-fetch').then(({ default: fetch }) => fetch(...args));\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (typeof Response === 'undefined') {\n        // @ts-ignore\n        return (yield import('@supabase/node-fetch')).Response;\n    }\n    return Response;\n});\nexport const recursiveToCamel = (item) => {\n    if (Array.isArray(item)) {\n        return item.map((el) => recursiveToCamel(el));\n    }\n    else if (typeof item === 'function' || item !== Object(item)) {\n        return item;\n    }\n    const result = {};\n    Object.entries(item).forEach(([key, value]) => {\n        const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ''));\n        result[newKey] = recursiveToCamel(value);\n    });\n    return result;\n};\n//# sourceMappingURL=helpers.js.map","// generated by genversion\nexport const version = '2.7.1';\n//# sourceMappingURL=version.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { DEFAULT_HEADERS } from '../lib/constants';\nimport { isStorageError } from '../lib/errors';\nimport { get, post, put, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nexport default class StorageBucketApi {\n    constructor(url, headers = {}, fetch) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Retrieves the details of all Storage buckets within an existing project.\n     */\n    listBuckets() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n    getBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     * @returns newly created bucket id\n     */\n    createBucket(id, options = {\n        public: false,\n    }) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Updates a Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\n     * The global file size limit takes precedence over this value.\n     * The default value is null, which doesn't set a per bucket file size limit.\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\n     * The default value is null, which allows files with all mime types to be uploaded.\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\n     */\n    updateBucket(id, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield put(this.fetch, `${this.url}/bucket/${id}`, {\n                    id,\n                    name: id,\n                    public: options.public,\n                    file_size_limit: options.fileSizeLimit,\n                    allowed_mime_types: options.allowedMimeTypes,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n    emptyBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n    deleteBucket(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=StorageBucketApi.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError, StorageUnknownError } from '../lib/errors';\nimport { get, head, post, remove } from '../lib/fetch';\nimport { recursiveToCamel, resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                const metadata = options.metadata;\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                    if (metadata) {\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n                    }\n                }\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const headers = Object.assign({}, this.headers);\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\n                    headers['x-upsert'] = 'true';\n                }\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                const data = yield get(this.fetch, `${this.url}/object/info/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: recursiveToCamel(data), error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                yield head(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: true, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error) && error instanceof StorageUnknownError) {\n                    const originalError = error.originalError;\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                        return { data: false, error };\n                    }\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS, } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: 'Authorization' in this.headers,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map","import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { PostgrestError, } from '@supabase/postgrest-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion, } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n    return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};\n//# sourceMappingURL=index.js.map","import { AuthClient } from '@supabase/auth-js';\nexport class SupabaseAuthClient extends AuthClient {\n    constructor(options) {\n        super(options);\n    }\n}\n//# sourceMappingURL=SupabaseAuthClient.js.map","import { version } from './version';\nlet JS_ENV = '';\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n    JS_ENV = 'deno';\n}\nelse if (typeof document !== 'undefined') {\n    JS_ENV = 'web';\n}\nelse if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    JS_ENV = 'react-native';\n}\nelse {\n    JS_ENV = 'node';\n}\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version}` };\nexport const DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nexport const DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nexport const DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nexport const DEFAULT_REALTIME_OPTIONS = {};\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch';\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = nodeFetch;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveHeadersConstructor = () => {\n    if (typeof Headers === 'undefined') {\n        return NodeFetchHeaders;\n    }\n    return Headers;\n};\nexport const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n    const fetch = resolveFetch(customFetch);\n    const HeadersConstructor = resolveHeadersConstructor();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has('apikey')) {\n            headers.set('apikey', supabaseKey);\n        }\n        if (!headers.has('Authorization')) {\n            headers.set('Authorization', `Bearer ${accessToken}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport function stripTrailingSlash(url) {\n    return url.replace(/\\/$/, '');\n}\nexport const isBrowser = () => typeof window !== 'undefined';\nexport function applySettingDefaults(options, defaults) {\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\n    const result = {\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\n        global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions),\n        accessToken: () => __awaiter(this, void 0, void 0, function* () { return ''; }),\n    };\n    if (options.accessToken) {\n        result.accessToken = options.accessToken;\n    }\n    else {\n        // hack around Required<>\n        delete result.accessToken;\n    }\n    return result;\n}\n//# sourceMappingURL=helpers.js.map","export const version = '2.49.1';\n//# sourceMappingURL=version.js.map","\"use strict\";\n/**\n * API handling module exports\n * Re-exports all LinkedIn API handling functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isLinkedInEasyApplyRequest = exports.extractJobIdFromRequest = exports.restoreOriginalFetch = exports.setupLinkedInAPIInterception = void 0;\n// LinkedIn API interception and utilities\nvar linkedin_1 = require(\"./linkedin\");\nObject.defineProperty(exports, \"setupLinkedInAPIInterception\", { enumerable: true, get: function () { return linkedin_1.setupLinkedInAPIInterception; } });\nObject.defineProperty(exports, \"restoreOriginalFetch\", { enumerable: true, get: function () { return linkedin_1.restoreOriginalFetch; } });\nObject.defineProperty(exports, \"extractJobIdFromRequest\", { enumerable: true, get: function () { return linkedin_1.extractJobIdFromRequest; } });\nObject.defineProperty(exports, \"isLinkedInEasyApplyRequest\", { enumerable: true, get: function () { return linkedin_1.isLinkedInEasyApplyRequest; } });\n","\"use strict\";\n/**\n * LinkedIn API handling module for the LinkedIn Easy Apply extension\n * Handles fetch interception, LinkedIn API response processing, and 409 conflict error management\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isLinkedInEasyApplyRequest = exports.extractJobIdFromRequest = exports.restoreOriginalFetch = exports.setupLinkedInAPIInterception = void 0;\n// Store reference to the original fetch function\nlet originalFetch;\n/**\n * Sets up LinkedIn API fetch interception to handle Easy Apply requests and 409 conflicts\n * Patches the global fetch function to intercept LinkedIn API calls and track already-applied jobs\n * @param deps - Dependencies required for API handling\n */\nconst setupLinkedInAPIInterception = (deps) => {\n    // Save the original fetch function\n    originalFetch = window.fetch;\n    // Patch the fetch API to intercept LinkedIn API calls and handle 409 errors\n    window.fetch = async function (input, init) {\n        // Check if this is a LinkedIn Easy Apply API request\n        let url = '';\n        if (typeof input === 'string') {\n            url = input;\n        }\n        else if (input instanceof URL) {\n            url = input.toString();\n        }\n        else if ('url' in input) {\n            // It's a Request object\n            url = input.url;\n        }\n        if (url.includes('voyagerJobsDashOnsiteApplyApplication') && init?.method === 'POST') {\n            try {\n                // Extract the job ID from the URL or body\n                let jobId = '';\n                try {\n                    if (init.body) {\n                        const bodyText = init.body.toString();\n                        // Try to extract the job ID from the request body\n                        const match = bodyText.match(/jobId=(\\d+)/);\n                        if (match && match[1]) {\n                            jobId = match[1];\n                        }\n                    }\n                    if (!jobId) {\n                        // Try to extract from URL\n                        const urlMatch = url.match(/jobId=(\\d+)/);\n                        if (urlMatch && urlMatch[1]) {\n                            jobId = urlMatch[1];\n                        }\n                    }\n                }\n                catch (e) {\n                    // Ignore parsing errors, just continue\n                }\n                // Make the actual request\n                const response = await originalFetch(input, init);\n                // If we get a 409 Conflict and have a job ID\n                if (response.status === 409 && jobId) {\n                    if (!deps.skipped409Jobs.has(jobId)) {\n                        console.log(`🔁 Skipping already-applied job ID: ${jobId}`);\n                        deps.skipped409Jobs.add(jobId);\n                        // Persist to Chrome storage\n                        chrome.storage.local.get(['skipped409Jobs'], result => {\n                            const storedIds = result.skipped409Jobs || [];\n                            if (!storedIds.includes(jobId)) {\n                                storedIds.push(jobId);\n                                chrome.storage.local.set({ skipped409Jobs: storedIds });\n                            }\n                        });\n                    }\n                }\n                return response;\n            }\n            catch (error) {\n                return await originalFetch(input, init);\n            }\n        }\n        // For all other requests, just pass through to the original fetch\n        return await originalFetch(input, init);\n    };\n};\nexports.setupLinkedInAPIInterception = setupLinkedInAPIInterception;\n/**\n * Restores the original fetch function (for cleanup or testing)\n * Removes the LinkedIn API interception and restores normal fetch behavior\n */\nconst restoreOriginalFetch = () => {\n    if (originalFetch) {\n        window.fetch = originalFetch;\n    }\n};\nexports.restoreOriginalFetch = restoreOriginalFetch;\n/**\n * Extracts job ID from LinkedIn API request\n * Utility function to extract job ID from various sources in LinkedIn API calls\n * @param url - The request URL\n * @param body - The request body (optional)\n * @returns The extracted job ID or null if not found\n */\nconst extractJobIdFromRequest = (url, body) => {\n    let jobId = null;\n    try {\n        // Try to extract from request body first\n        if (body) {\n            const bodyText = body.toString();\n            const match = bodyText.match(/jobId=(\\d+)/);\n            if (match && match[1]) {\n                jobId = match[1];\n            }\n        }\n        // Try to extract from URL if not found in body\n        if (!jobId) {\n            const urlMatch = url.match(/jobId=(\\d+)/);\n            if (urlMatch && urlMatch[1]) {\n                jobId = urlMatch[1];\n            }\n        }\n    }\n    catch (e) {\n        // Ignore parsing errors\n    }\n    return jobId;\n};\nexports.extractJobIdFromRequest = extractJobIdFromRequest;\n/**\n * Checks if a URL is a LinkedIn Easy Apply API endpoint\n * @param url - The URL to check\n * @param method - The HTTP method (optional)\n * @returns True if this is a LinkedIn Easy Apply API request\n */\nconst isLinkedInEasyApplyRequest = (url, method) => {\n    return url.includes('voyagerJobsDashOnsiteApplyApplication') &&\n        (!method || method.toUpperCase() === 'POST');\n};\nexports.isLinkedInEasyApplyRequest = isLinkedInEasyApplyRequest;\n","\"use strict\";\n/**\n * Application flow utility functions for the LinkedIn Easy Apply extension\n * These functions handle the flow of the application process, including button clicks and popup management\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleSaveApplicationPopup = exports.handleButtonClick = void 0;\nconst utils_1 = require(\"../utils\");\nconst tracking_1 = require(\"../tracking\");\n/**\n * Handles clicking buttons in the LinkedIn Easy Apply modal\n * Tries multiple button types in order: submit, review, next, and primary buttons\n * @param jobTitle - The title of the job being applied to\n * @param companyName - The name of the company\n * @param jobElement - The job card HTML element\n * @param appliedJobIds - Set of job IDs that have already been processed\n * @returns Promise<boolean> true if a button was clicked, false otherwise\n */\nconst handleButtonClick = async (jobTitle, companyName, jobElement, appliedJobIds) => {\n    // First try to find submit button within the modal\n    const modal = document.querySelector('.artdeco-modal__content.jobs-easy-apply-modal__content');\n    if (!modal)\n        return false;\n    const submitButton = modal.querySelector('button[aria-label=\"Submit application\"]');\n    if (submitButton && (0, utils_1.isElementVisible)(submitButton)) {\n        await (0, utils_1.sleep)(500);\n        submitButton.click();\n        // Track the successful application\n        await (0, tracking_1.trackSuccessfulApplication)(jobTitle, companyName, jobElement, appliedJobIds);\n        // Wait 1 second after submit click\n        await (0, utils_1.sleep)(1000);\n        // Look for and click the close button\n        const closeButton = document.querySelector('button[aria-label=\"Dismiss\"].artdeco-modal__dismiss');\n        if (closeButton && (0, utils_1.isElementVisible)(closeButton)) {\n            await (0, utils_1.sleep)(500);\n            closeButton.click();\n        }\n        return true;\n    }\n    // Try review button within the modal\n    const reviewButton = modal.querySelector('button[aria-label=\"Review your application\"]');\n    if (reviewButton && (0, utils_1.isElementVisible)(reviewButton)) {\n        await (0, utils_1.sleep)(500);\n        reviewButton.click();\n        return true;\n    }\n    // Try next button within the modal\n    const nextButton = modal.querySelector('button[aria-label=\"Continue to next step\"]');\n    if (nextButton && (0, utils_1.isElementVisible)(nextButton)) {\n        await (0, utils_1.sleep)(500);\n        nextButton.click();\n        return true;\n    }\n    // Try finding any primary button with Next text within the modal\n    const primaryButtons = modal.querySelectorAll('.artdeco-button--primary');\n    for (const button of primaryButtons) {\n        if ((0, utils_1.isElementVisible)(button)) {\n            const text = button.textContent?.trim().toLowerCase() || '';\n            if (text.includes('next') || text.includes('continue')) {\n                button.click();\n                return true;\n            }\n        }\n    }\n    return false;\n};\nexports.handleButtonClick = handleButtonClick;\n/**\n * Handles the \"Save Application\" popup that sometimes appears\n * Looks for discard button and clicks it to continue without saving\n * @returns Promise<boolean> true if popup was handled, false if no popup found\n */\nconst handleSaveApplicationPopup = async () => {\n    // Look for any button with the specific data-control-name for discard\n    const discardButton = document.querySelector('button[data-control-name=\"discard_application_confirm_btn\"]');\n    if (discardButton && (0, utils_1.isElementVisible)(discardButton)) {\n        discardButton.click();\n        await (0, utils_1.sleep)(500);\n        return true;\n    }\n    return false;\n};\nexports.handleSaveApplicationPopup = handleSaveApplicationPopup;\n","\"use strict\";\n/**\n * Application module exports\n * Re-exports all application-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleSaveApplicationPopup = exports.handleButtonClick = void 0;\n// Application flow utilities\nvar flow_1 = require(\"./flow\");\nObject.defineProperty(exports, \"handleButtonClick\", { enumerable: true, get: function () { return flow_1.handleButtonClick; } });\nObject.defineProperty(exports, \"handleSaveApplicationPopup\", { enumerable: true, get: function () { return flow_1.handleSaveApplicationPopup; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.autofillWorkday = autofillWorkday;\nconsole.log(\"Workday autofill module loaded - Step by step implementation\");\n// Step 1: Personal Information Selectors (based on actual captured HTML)\nconst WORKDAY_STEP1_SELECTORS = {\n    // Legal Name Section\n    FIRST_NAME: [\n        'input[id=\"name--legalName--firstName\"]',\n        'input[name=\"legalName--firstName\"]',\n        'input[data-automation-id=\"formField-legalName--firstName\"] input'\n    ],\n    MIDDLE_NAME: [\n        'input[id=\"name--legalName--middleName\"]',\n        'input[name=\"legalName--middleName\"]',\n        'input[data-automation-id=\"formField-legalName--middleName\"] input'\n    ],\n    LAST_NAME: [\n        'input[id=\"name--legalName--lastName\"]',\n        'input[name=\"legalName--lastName\"]',\n        'input[data-automation-id=\"formField-legalName--lastName\"] input'\n    ],\n    // Address Section\n    ADDRESS_LINE_1: [\n        'input[id=\"address--addressLine1\"]',\n        'input[name=\"addressLine1\"]',\n        'input[data-automation-id=\"formField-addressLine1\"] input'\n    ],\n    CITY: [\n        'input[id=\"address--city\"]',\n        'input[name=\"city\"]',\n        'input[data-automation-id=\"formField-city\"] input'\n    ],\n    STATE: [\n        'button[id=\"address--countryRegion\"]',\n        'button[name=\"countryRegion\"]',\n        'div[data-automation-id=\"formField-countryRegion\"] button',\n        'select[name*=\"state\"]',\n        'select[name*=\"State\"]',\n        'button[aria-label*=\"State\"]',\n        'div[data-automation-id*=\"state\"] button',\n        'div[data-automation-id*=\"State\"] button'\n    ],\n    POSTAL_CODE: [\n        'input[id=\"address--postalCode\"]',\n        'input[name=\"postalCode\"]',\n        'input[data-automation-id=\"formField-postalCode\"] input'\n    ],\n    // Phone Section\n    PHONE_NUMBER: [\n        'input[id=\"phoneNumber--phoneNumber\"]',\n        'input[name=\"phoneNumber\"]',\n        'input[data-automation-id=\"formField-phoneNumber\"] input'\n    ],\n    PHONE_EXTENSION: [\n        'input[id=\"phoneNumber--extension\"]',\n        'input[name=\"extension\"]',\n        'input[data-automation-id=\"formField-extension\"] input'\n    ],\n    // Country Selection\n    COUNTRY: [\n        'button[id=\"country--country\"]',\n        'button[name=\"country\"]',\n        'div[data-automation-id=\"formField-country\"] button'\n    ],\n    // Phone Device Type Dropdown\n    PHONE_DEVICE_TYPE: [\n        'button[id*=\"phoneDeviceType\"]',\n        'button[name*=\"phoneDeviceType\"]',\n        'div[data-automation-id*=\"phoneDeviceType\"] button',\n        'select[name*=\"phoneDeviceType\"]',\n        'button[aria-label*=\"Phone Device Type\"]'\n    ],\n    // How Did You Hear About Us Dropdown\n    HOW_DID_YOU_HEAR: [\n        'button[id*=\"howDidYouHear\"]',\n        'button[name*=\"howDidYouHear\"]',\n        'div[data-automation-id*=\"howDidYouHear\"] button',\n        'select[name*=\"howDidYouHear\"]',\n        'button[aria-label*=\"How did you hear\"]',\n        'div[data-automation-id*=\"source\"] button'\n    ],\n    // Previous Worker Radio Buttons\n    PREVIOUS_WORKER_NO: [\n        'input[name=\"candidateIsPreviousWorker\"][value=\"false\"]',\n        'input[id*=\"candidateIsPreviousWorker\"][value=\"false\"]'\n    ],\n    PREVIOUS_WORKER_YES: [\n        'input[name=\"candidateIsPreviousWorker\"][value=\"true\"]',\n        'input[id*=\"candidateIsPreviousWorker\"][value=\"true\"]'\n    ]\n};\n// Step 2: My Experience Selectors (based on actual captured HTML)\nconst WORKDAY_STEP2_SELECTORS = {\n    // Skills Section\n    SKILLS_INPUT: [\n        'input[id=\"skills--skills\"]',\n        'input[data-uxi-element-id*=\"selectinput\"]',\n        'div[data-automation-id=\"formField-skills\"] input'\n    ],\n    // Social Network URLs\n    LINKEDIN_URL: [\n        'input[id=\"socialNetworkAccounts--linkedInAccount\"]',\n        'input[name=\"linkedInAccount\"]',\n        'input[data-automation-id=\"formField-linkedInAccount\"] input'\n    ],\n    TWITTER_URL: [\n        'input[id=\"socialNetworkAccounts--twitterAccount\"]',\n        'input[name=\"twitterAccount\"]',\n        'input[data-automation-id=\"formField-twitterAccount\"] input'\n    ],\n    FACEBOOK_URL: [\n        'input[id=\"socialNetworkAccounts--facebookAccount\"]',\n        'input[name=\"facebookAccount\"]',\n        'input[data-automation-id=\"formField-facebookAccount\"] input'\n    ],\n    // Resume Upload\n    RESUME_FILE_INPUT: [\n        'input[data-automation-id=\"file-upload-input-ref\"]',\n        'input[type=\"file\"]',\n        'input[data-automation-id*=\"resume\"]',\n        'input[data-automation-id*=\"attachment\"]',\n        'input[data-automation-id*=\"file\"]',\n        'input[accept*=\".pdf\"]',\n        'input[accept*=\".doc\"]',\n        'div[data-automation-id*=\"resume\"] input[type=\"file\"]',\n        'div[data-automation-id*=\"attachment\"] input[type=\"file\"]',\n        '#resumeAttachments input[type=\"file\"]',\n        '[data-automation-id=\"resume-upload\"] input[type=\"file\"]'\n    ],\n    RESUME_SELECT_BUTTON: [\n        'button[data-automation-id=\"select-files\"]',\n        'button[id=\"resumeAttachments--attachments\"]',\n        'button[data-automation-id*=\"resume\"]',\n        'button[data-automation-id*=\"select-file\"]',\n        'button[data-automation-id*=\"browse\"]',\n        'button[data-automation-id*=\"upload\"]',\n        'button[aria-label*=\"Select File\"]',\n        'button[aria-label*=\"Browse\"]',\n        'button[aria-label*=\"Upload\"]',\n        'button[title*=\"Select File\"]',\n        'button[title*=\"Browse\"]',\n        'button[title*=\"Upload\"]'\n    ],\n    RESUME_UPLOAD_AREA: [\n        'div[data-automation-id*=\"resume-upload\"]',\n        'div[data-automation-id*=\"file-upload\"]',\n        'div[data-automation-id*=\"attachment\"]',\n        '.file-upload-area',\n        '.resume-upload',\n        '[data-automation-id=\"dropzone\"]'\n    ],\n    // Add Buttons for sections that require manual entry\n    WORK_EXPERIENCE_ADD: [\n        'div[aria-labelledby=\"Work-Experience-section\"] button[data-automation-id=\"add-button\"]'\n    ],\n    EDUCATION_ADD: [\n        'div[aria-labelledby=\"Education-section\"] button[data-automation-id=\"add-button\"]',\n        'div[aria-labelledby=\"Education\"] button[data-automation-id=\"add-button\"]',\n        'button[data-automation-id=\"addEducation\"]',\n        'button[data-automation-id=\"education-add-button\"]',\n        'div[data-automation-id=\"Education\"] button',\n        'div[data-automation-id=\"education-section\"] button',\n        '',\n        '',\n        'button[aria-label*=\"Add Education\"]'\n    ],\n    CERTIFICATIONS_ADD: [\n        'div[aria-labelledby=\"Certifications-section\"] button[data-automation-id=\"add-button\"]'\n    ],\n    LANGUAGES_ADD: [\n        'div[aria-labelledby=\"Languages-section\"] button[data-automation-id=\"add-button\"]',\n        'div[data-automation-id*=\"languages\"] button[data-automation-id=\"add-button\"]',\n        'button[data-automation-id*=\"languages-add\"]',\n        'button[aria-label*=\"Add Language\"]',\n        'button[title*=\"Add Language\"]',\n        // Fallback text-based search will be handled separately\n    ],\n    WEBSITES_ADD: [\n        'div[aria-labelledby=\"Websites-section\"] button[data-automation-id=\"add-button\"]'\n    ]\n};\n// Work Experience Modal Selectors (for the form that opens after clicking Add)\nconst WORKDAY_WORK_EXPERIENCE_MODAL = {\n    JOB_TITLE: [\n        'input[name*=\"jobTitle\"]',\n        'input[placeholder*=\"Job Title\"]',\n        'div[data-automation-id*=\"jobTitle\"] input'\n    ],\n    COMPANY: [\n        'input[name*=\"company\"]',\n        'input[name*=\"Company\"]',\n        'div[data-automation-id*=\"company\"] input'\n    ],\n    LOCATION: [\n        'input[name*=\"location\"]',\n        'input[name*=\"Location\"]',\n        'div[data-automation-id*=\"location\"] input'\n    ],\n    CURRENTLY_WORK_HERE: [\n        'input[name*=\"currentlyWork\"]',\n        'input[name*=\"currentJob\"]',\n        'input[id*=\"currentlyWork\"]',\n        'input[id*=\"currentJob\"]',\n        'div[data-automation-id*=\"currentlyWork\"] input[type=\"checkbox\"]',\n        'div[data-automation-id*=\"currentJob\"] input[type=\"checkbox\"]',\n        'input[type=\"checkbox\"][aria-describedby*=\"current\"]',\n        'input[type=\"checkbox\"] + label:contains(\"currently work\")',\n        'label[for*=\"current\"] input[type=\"checkbox\"]'\n    ],\n    FROM_DATE: [\n        'input[placeholder*=\"MM/YYYY\"]',\n        'input[placeholder*=\"MM/YY\"]',\n        'input[placeholder*=\"From Date\"]',\n        'input[name*=\"from\"]',\n        'input[name*=\"startDate\"]',\n        'div[data-automation-id*=\"from\"] input',\n        'div[data-automation-id*=\"startDate\"] input'\n    ],\n    TO_DATE: [\n        'input[placeholder*=\"MM/YYYY\"]:not([name*=\"from\"])',\n        'input[placeholder*=\"MM/YY\"]:not([name*=\"from\"])',\n        'input[placeholder*=\"To Date\"]',\n        'input[name*=\"to\"]',\n        'input[name*=\"endDate\"]',\n        'div[data-automation-id*=\"to\"] input',\n        'div[data-automation-id*=\"endDate\"] input'\n    ],\n    DESCRIPTION: [\n        'textarea[name*=\"description\"]',\n        'textarea[placeholder*=\"Role Description\"]',\n        'div[data-automation-id*=\"description\"] textarea'\n    ],\n    SAVE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_okButton\"]',\n        '',\n        '',\n        'button[title=\"OK\"]'\n    ],\n    ADD_ANOTHER_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_addAnotherButton\"]',\n        '',\n        'button[data-automation-id*=\"addAnother\"]'\n    ],\n    DONE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_doneButton\"]',\n        '',\n        'button[title=\"Done\"]'\n    ]\n};\n// Education Modal Selectors\nconst WORKDAY_EDUCATION_MODAL = {\n    SCHOOL_NAME: [\n        'input[name*=\"school\"]',\n        'input[name*=\"institution\"]',\n        'input[placeholder*=\"School\"]',\n        'div[data-automation-id*=\"school\"] input'\n    ],\n    DEGREE_TYPE: [\n        'button[name*=\"degree\"]',\n        'button[name*=\"degreeType\"]',\n        'div[data-automation-id*=\"degree\"] button'\n    ],\n    FIELD_OF_STUDY: [\n        'input[name*=\"major\"]',\n        'input[name*=\"fieldOfStudy\"]',\n        'input[placeholder*=\"Field of Study\"]',\n        'input[placeholder*=\"Major\"]',\n        'input[data-automation-id*=\"major\"]',\n        'input[data-automation-id*=\"fieldOfStudy\"]',\n        'input[aria-label*=\"Field of Study\"]',\n        'input[aria-label*=\"Major\"]',\n        'div[data-automation-id*=\"major\"] input',\n        'div[data-automation-id*=\"fieldOfStudy\"] input'\n    ],\n    FIELD_OF_STUDY_MULTISELECT: [\n        'div[data-automation-id=\"multiSelectContainer\"] input',\n        'div[data-automation-id=\"multiSelectContainer\"] input[type=\"text\"]',\n        'div[data-automation-id=\"multiSelectContainer\"] input[placeholder*=\"Field\"]',\n        'div[data-automation-id=\"multiSelectContainer\"] input[placeholder*=\"Major\"]',\n        'div[data-automation-id=\"multiSelectContainer\"] input[placeholder*=\"Study\"]',\n        'div[data-automation-id*=\"fieldOfStudy\"] div[data-automation-id=\"multiSelectContainer\"] input',\n        'div[data-automation-id*=\"major\"] div[data-automation-id=\"multiSelectContainer\"] input'\n    ],\n    GPA: [\n        'input[name*=\"gpa\"]',\n        'input[placeholder*=\"GPA\"]',\n        'input[placeholder*=\"Grade Point Average\"]',\n        'input[data-automation-id*=\"gpa\"]',\n        'input[aria-label*=\"GPA\"]',\n        'input[aria-label*=\"Grade Point Average\"]',\n        'div[data-automation-id*=\"gpa\"] input'\n    ],\n    GRADUATION_DATE: [\n        'input[placeholder*=\"MM/YYYY\"]',\n        'input[placeholder*=\"MM/YY\"]',\n        'input[placeholder*=\"Graduation\"]',\n        'input[placeholder*=\"YYYY\"]',\n        'input[name*=\"graduation\"]',\n        'input[name*=\"completionDate\"]',\n        'input[data-automation-id*=\"graduation\"]',\n        'input[data-automation-id*=\"completionDate\"]',\n        'input[aria-label*=\"Graduation\"]',\n        'input[aria-label*=\"Completion Date\"]',\n        'div[data-automation-id*=\"graduation\"] input',\n        'div[data-automation-id*=\"completionDate\"] input'\n    ],\n    SAVE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_okButton\"]',\n        '',\n        '',\n        'button[title=\"OK\"]'\n    ],\n    ADD_ANOTHER_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_addAnotherButton\"]',\n        '',\n        'button[data-automation-id*=\"addAnother\"]'\n    ],\n    DONE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_doneButton\"]',\n        '',\n        'button[title=\"Done\"]'\n    ]\n};\n// Certifications Modal Selectors\nconst WORKDAY_CERTIFICATIONS_MODAL = {\n    CERTIFICATION_NAME: [\n        'input[name*=\"certification\"]',\n        'input[placeholder*=\"Certification\"]',\n        'div[data-automation-id*=\"certification\"] input'\n    ],\n    ISSUING_ORGANIZATION: [\n        'input[name*=\"organization\"]',\n        'input[name*=\"Organization\"]',\n        'div[data-automation-id*=\"organization\"] input'\n    ],\n    ISSUE_DATE: [\n        'input[placeholder*=\"MM/YYYY\"]',\n        'input[name*=\"issue\"]',\n        'div[data-automation-id*=\"issue\"] input'\n    ],\n    CREDENTIAL_ID: [\n        'input[name*=\"credential\"]',\n        'input[name*=\"Credential\"]',\n        'div[data-automation-id*=\"credential\"] input'\n    ],\n    SAVE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_okButton\"]',\n        '',\n        '',\n        'button[title=\"OK\"]'\n    ],\n    ADD_ANOTHER_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_addAnotherButton\"]',\n        '',\n        'button[data-automation-id*=\"addAnother\"]'\n    ],\n    DONE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_doneButton\"]',\n        '',\n        'button[title=\"Done\"]'\n    ]\n};\n// Languages Modal Selectors\nconst WORKDAY_LANGUAGES_MODAL = {\n    LANGUAGE: [\n        'button[name*=\"language\"]',\n        'div[data-automation-id*=\"language\"] button',\n        'button[aria-label*=\"Language\"]',\n        'button[aria-label*=\"Select Language\"]',\n        'div[data-automation-id*=\"formField-language\"] button',\n        'select[name*=\"language\"]',\n        'input[name*=\"language\"]'\n    ],\n    PROFICIENCY: [\n        'button[name*=\"proficiency\"]',\n        'div[data-automation-id*=\"proficiency\"] button',\n        'button[aria-label*=\"Proficiency\"]',\n        'button[aria-label*=\"Select Proficiency\"]',\n        'div[data-automation-id*=\"formField-proficiency\"] button',\n        'select[name*=\"proficiency\"]',\n        'input[name*=\"proficiency\"]'\n    ],\n    SAVE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_okButton\"]',\n        '',\n        '',\n        'button[title=\"OK\"]'\n    ],\n    ADD_ANOTHER_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_addAnotherButton\"]',\n        '',\n        'button[data-automation-id*=\"addAnother\"]'\n    ],\n    DONE_BUTTON: [\n        'button[data-automation-id=\"wd-CommandButton_uic_doneButton\"]',\n        '',\n        'button[title=\"Done\"]'\n    ]\n};\n// Step 3: Application Questions Selectors (Generic questions only)\nconst WORKDAY_STEP3_SELECTORS = {\n    // Generic dropdown questions - using button selectors since they're Workday dropdowns\n    QUESTION_BUTTONS: [\n        'button[aria-haspopup=\"listbox\"][aria-label*=\"Select One Required\"]',\n        'div[data-automation-id*=\"formField-\"] button.css-5bqb1n'\n    ]\n};\n// Step 4: Voluntary Disclosures Selectors\nconst WORKDAY_STEP4_SELECTORS = {\n    // Demographic Information Dropdowns\n    GENDER: [\n        'button[id=\"personalInfoUS--gender\"]',\n        'button[name=\"gender\"]',\n        'div[data-automation-id=\"formField-gender\"] button'\n    ],\n    ETHNICITY: [\n        'button[id=\"personalInfoUS--ethnicity\"]',\n        'button[name=\"ethnicity\"]',\n        'div[data-automation-id=\"formField-ethnicity\"] button'\n    ],\n    VETERAN_STATUS: [\n        'button[id=\"personalInfoUS--veteranStatus\"]',\n        'button[name=\"veteranStatus\"]',\n        'div[data-automation-id=\"formField-veteranStatus\"] button'\n    ],\n    // Terms and Conditions Checkbox\n    TERMS_CHECKBOX: [\n        'input[id=\"termsAndConditions--acceptTermsAndAgreements\"]',\n        'input[name=\"acceptTermsAndAgreements\"]',\n        'div[data-automation-id=\"formField-acceptTermsAndAgreements\"] input[type=\"checkbox\"]'\n    ]\n};\n// Step 5: Self Identify Selectors\nconst WORKDAY_STEP5_SELECTORS = {\n    // Name field\n    NAME: [\n        'input[id=\"selfIdentifiedDisabilityData--name\"]',\n        'input[name=\"name\"]',\n        'div[data-automation-id=\"formField-name\"] input'\n    ],\n    // Employee ID field (optional, usually not filled)\n    EMPLOYEE_ID: [\n        'input[id=\"selfIdentifiedDisabilityData--employeeId\"]',\n        'input[name=\"employeeId\"]',\n        'div[data-automation-id=\"formField-employeeId\"] input'\n    ],\n    // Date field (special Workday date inputs)\n    DATE_MONTH: [\n        'input[id=\"selfIdentifiedDisabilityData--dateSignedOn-dateSectionMonth-input\"]',\n        'input[aria-label=\"Month\"]',\n        'div[id*=\"dateSignedOn\"] input[data-automation-id=\"dateSectionMonth-input\"]'\n    ],\n    DATE_DAY: [\n        'input[id=\"selfIdentifiedDisabilityData--dateSignedOn-dateSectionDay-input\"]',\n        'input[aria-label=\"Day\"]',\n        'div[id*=\"dateSignedOn\"] input[data-automation-id=\"dateSectionDay-input\"]'\n    ],\n    DATE_YEAR: [\n        'input[id=\"selfIdentifiedDisabilityData--dateSignedOn-dateSectionYear-input\"]',\n        'input[aria-label=\"Year\"]',\n        'div[id*=\"dateSignedOn\"] input[data-automation-id=\"dateSectionYear-input\"]'\n    ],\n    // Language dropdown (usually pre-filled)\n    LANGUAGE_DROPDOWN: [\n        'button[id=\"selfIdentifiedDisabilityData--disabilityForm\"]',\n        'button[name=\"disabilityForm\"]',\n        'div[data-automation-id=\"formField-disabilityForm\"] button'\n    ],\n    // Disability Status Checkboxes - these are in a fieldset with ReactVirtualized\n    DISABILITY_CHECKBOXES: [\n        'fieldset[data-automation-id=\"disabilityStatus-CheckboxGroup\"] input[type=\"checkbox\"]',\n        'div[data-automation-id=\"formField-disabilityStatus\"] input[type=\"checkbox\"]',\n        'input[id*=\"disabilityStatus\"][type=\"checkbox\"]'\n    ],\n    // Specific disability status options by ID patterns\n    DISABILITY_YES: [\n        'input[id*=\"64cbff5f364f10000ae7a421cf210000-disabilityStatus\"]', // Yes option ID from HTML\n        'label[for*=\"disabilityStatus\"]:contains(\"Yes, I have a disability\")'\n    ],\n    DISABILITY_NO: [\n        'input[id*=\"64cbff5f364f10000aeec521b4ec0000-disabilityStatus\"]', // No option ID from HTML  \n        'label[for*=\"disabilityStatus\"]:contains(\"No, I do not have a disability\")'\n    ],\n    DISABILITY_NO_ANSWER: [\n        'input[id*=\"64cbff5f364f10000af3af293a050000-disabilityStatus\"]', // No answer option ID from HTML\n        'label[for*=\"disabilityStatus\"]:contains(\"I do not want to answer\")'\n    ]\n};\n// Helper functions\nfunction findElement(selectors) {\n    // Guard against empty or invalid selectors\n    if (!selectors || selectors.length === 0) {\n        console.log(`⚠️ No selectors provided to findElement`);\n        return null;\n    }\n    for (const selector of selectors) {\n        // Skip empty selectors\n        if (!selector || selector.trim() === '') {\n            console.log(`⚠️ Skipping empty selector`);\n            continue;\n        }\n        try {\n            const element = document.querySelector(selector);\n            if (element) {\n                console.log(`✅ Found element with selector: ${selector}`);\n                return element;\n            }\n        }\n        catch (error) {\n            console.log(`❌ Invalid selector: ${selector}`, error);\n        }\n    }\n    console.log(`❌ No element found for selectors:`, selectors);\n    return null;\n}\n// Helper function to find buttons by text content (since :contains() doesn't work)\nfunction findButtonByText(texts) {\n    // Guard against empty texts\n    if (!texts || texts.length === 0) {\n        console.log(`⚠️ No texts provided to findButtonByText`);\n        return null;\n    }\n    const buttons = document.querySelectorAll('button');\n    for (const button of buttons) {\n        const buttonText = button.textContent?.trim().toLowerCase() || '';\n        for (const text of texts) {\n            if (text && buttonText.includes(text.toLowerCase())) {\n                console.log(`✅ Found button with text: \"${buttonText}\" matching \"${text}\"`);\n                return button;\n            }\n        }\n    }\n    console.log(`❌ No button found with texts:`, texts);\n    return null;\n}\n// Function to find checkbox by associated label text\nfunction findCheckboxByLabelText(texts) {\n    console.log(`🔍 Searching for checkbox with label texts:`, texts);\n    // Method 1: Find labels with matching text, then find associated checkbox\n    const labels = document.querySelectorAll('label');\n    for (const label of labels) {\n        const labelText = label.textContent?.trim().toLowerCase() || '';\n        for (const text of texts) {\n            if (labelText.includes(text.toLowerCase())) {\n                console.log(`✅ Found label with text: \"${labelText}\" matching \"${text}\"`);\n                // Try to find checkbox by 'for' attribute\n                if (label.hasAttribute('for')) {\n                    const checkboxId = label.getAttribute('for');\n                    const checkbox = document.getElementById(checkboxId);\n                    if (checkbox && checkbox.type === 'checkbox') {\n                        console.log(`✅ Found associated checkbox by ID: ${checkboxId}`);\n                        return checkbox;\n                    }\n                }\n                // Try to find checkbox inside the label\n                const checkboxInLabel = label.querySelector('input[type=\"checkbox\"]');\n                if (checkboxInLabel) {\n                    console.log(`✅ Found checkbox inside label`);\n                    return checkboxInLabel;\n                }\n                // Try to find checkbox as next sibling\n                const nextSibling = label.nextElementSibling;\n                if (nextSibling && nextSibling.type === 'checkbox') {\n                    console.log(`✅ Found checkbox as next sibling`);\n                    return nextSibling;\n                }\n                // Try to find checkbox as previous sibling\n                const prevSibling = label.previousElementSibling;\n                if (prevSibling && prevSibling.type === 'checkbox') {\n                    console.log(`✅ Found checkbox as previous sibling`);\n                    return prevSibling;\n                }\n            }\n        }\n    }\n    // Method 2: Find checkboxes and check nearby text\n    const checkboxes = document.querySelectorAll('input[type=\"checkbox\"]');\n    for (const checkbox of checkboxes) {\n        const parent = checkbox.parentElement;\n        if (parent) {\n            const parentText = parent.textContent?.trim().toLowerCase() || '';\n            for (const text of texts) {\n                if (parentText.includes(text.toLowerCase())) {\n                    console.log(`✅ Found checkbox with parent text: \"${parentText}\" matching \"${text}\"`);\n                    return checkbox;\n                }\n            }\n        }\n    }\n    console.log(`❌ No checkbox found with label texts:`, texts);\n    return null;\n}\n// React-compatible value setter for Workday forms\nfunction setNativeValue(element, value) {\n    const prototype = Object.getPrototypeOf(element);\n    const valueSetter = Object.getOwnPropertyDescriptor(prototype, 'value')?.set;\n    if (valueSetter) {\n        valueSetter.call(element, value);\n    }\n    else {\n        element.value = value;\n    }\n    // Dispatch React-compatible events\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n    element.dispatchEvent(new Event('change', { bubbles: true }));\n}\n// Comprehensive function for all Workday inputs - handles React + Workday validation (FIXED)\nfunction setWorkdayInputValue(input, value) {\n    console.log(`🔄 Setting input value: \"${value}\" on input:`, input.id);\n    if (!input)\n        return;\n    // Step 1: Focus first (Workday needs to \"see\" user interaction)\n    input.focus();\n    // Step 2: Clear existing value first using React-compatible method (CRITICAL!)\n    setNativeValue(input, '');\n    // Step 3: Set new value using React-compatible method\n    setNativeValue(input, value);\n    // Step 4: Dispatch React events to sync component state\n    input.dispatchEvent(new Event('input', { bubbles: true }));\n    input.dispatchEvent(new Event('change', { bubbles: true }));\n    // Step 5: Blur to commit the value and trigger validation\n    input.blur();\n    // Step 6: Final validation trigger\n    input.dispatchEvent(new Event('blur', { bubbles: true }));\n    input.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));\n    input.dispatchEvent(new FocusEvent('focusout', { bubbles: true }));\n    console.log(`✅ Input value set and committed: \"${input.value}\"`);\n}\nfunction fillInput(element, value) {\n    if (!value || !element)\n        return false;\n    const input = element;\n    try {\n        console.log(`🔄 Filling input with value: \"${value}\"`);\n        // Step 1: Focus the element\n        input.focus();\n        // Step 2: Clear existing value using React-compatible method\n        setNativeValue(input, '');\n        // Step 3: Set new value using React-compatible method\n        setNativeValue(input, value);\n        // Step 4: Fire comprehensive events for Workday validation\n        // Input event (for real-time validation)\n        input.dispatchEvent(new Event('input', { bubbles: true }));\n        // Change event (for form validation)\n        input.dispatchEvent(new Event('change', { bubbles: true }));\n        // Blur event (to trigger field validation)\n        input.dispatchEvent(new FocusEvent('blur', { bubbles: true }));\n        // KeyUp event (some forms listen for this)\n        input.dispatchEvent(new KeyboardEvent('keyup', { bubbles: true }));\n        // Focus out (additional validation trigger)\n        input.dispatchEvent(new FocusEvent('focusout', { bubbles: true }));\n        console.log(`✅ Successfully filled input with value: \"${value}\"`);\n        return true;\n    }\n    catch (error) {\n        console.log(`❌ Error filling input:`, error);\n        return false;\n    }\n}\n// Universal text input filling function for better compatibility\nfunction setTextInputValue(input, value) {\n    if (!input || !value)\n        return false;\n    try {\n        input.focus();\n        input.value = value;\n        input.dispatchEvent(new Event('input', { bubbles: true }));\n        input.dispatchEvent(new Event('change', { bubbles: true }));\n        input.dispatchEvent(new FocusEvent('blur', { bubbles: true }));\n        return true;\n    }\n    catch (error) {\n        console.log(`❌ Error with setTextInputValue:`, error);\n        return false;\n    }\n}\nfunction clickRadioButton(element) {\n    if (!element)\n        return false;\n    const radio = element;\n    radio.checked = true;\n    radio.click();\n    // Trigger change event\n    radio.dispatchEvent(new Event('change', { bubbles: true }));\n    console.log(`✅ Selected radio button: ${radio.value}`);\n    return true;\n}\n// Specialized function for handling Workday checkboxes\nasync function clickWorkdayCheckbox(element, shouldCheck = true) {\n    if (!element)\n        return false;\n    const checkbox = element;\n    try {\n        console.log(`🔄 Attempting to ${shouldCheck ? 'check' : 'uncheck'} checkbox. Current state: ${checkbox.checked}`);\n        // Method 1: Direct manipulation for React checkboxes\n        if (checkbox.checked !== shouldCheck) {\n            // Focus the checkbox first\n            checkbox.focus();\n            await new Promise(resolve => setTimeout(resolve, 100));\n            // Click to toggle state\n            checkbox.click();\n            await new Promise(resolve => setTimeout(resolve, 200));\n            // Verify the state changed correctly\n            if (checkbox.checked === shouldCheck) {\n                console.log(`✅ Checkbox ${shouldCheck ? 'checked' : 'unchecked'} successfully via click`);\n                return true;\n            }\n        }\n        else {\n            console.log(`✅ Checkbox already in desired state: ${shouldCheck ? 'checked' : 'unchecked'}`);\n            return true;\n        }\n        // Method 2: Force state and trigger events\n        console.log(`🔄 Trying direct state manipulation`);\n        checkbox.checked = shouldCheck;\n        // Trigger comprehensive events for React\n        checkbox.dispatchEvent(new Event('change', { bubbles: true }));\n        checkbox.dispatchEvent(new Event('input', { bubbles: true }));\n        checkbox.dispatchEvent(new Event('click', { bubbles: true }));\n        await new Promise(resolve => setTimeout(resolve, 100));\n        if (checkbox.checked === shouldCheck) {\n            console.log(`✅ Checkbox ${shouldCheck ? 'checked' : 'unchecked'} via direct manipulation`);\n            return true;\n        }\n        // Method 3: Try clicking the associated label\n        console.log(`🔄 Trying to click associated label`);\n        const label = document.querySelector(`label[for=\"${checkbox.id}\"]`);\n        if (label) {\n            label.click();\n            await new Promise(resolve => setTimeout(resolve, 200));\n            if (checkbox.checked === shouldCheck) {\n                console.log(`✅ Checkbox ${shouldCheck ? 'checked' : 'unchecked'} via label click`);\n                return true;\n            }\n        }\n        // Method 4: Find parent label and click it\n        console.log(`🔄 Trying to click parent label`);\n        const parentLabel = checkbox.closest('label');\n        if (parentLabel) {\n            parentLabel.click();\n            await new Promise(resolve => setTimeout(resolve, 200));\n            if (checkbox.checked === shouldCheck) {\n                console.log(`✅ Checkbox ${shouldCheck ? 'checked' : 'unchecked'} via parent label click`);\n                return true;\n            }\n        }\n        console.log(`❌ All checkbox methods failed. Final state: ${checkbox.checked}`);\n        return false;\n    }\n    catch (error) {\n        console.log(`❌ Error handling checkbox:`, error);\n        return false;\n    }\n}\nfunction clickWorkdayButton(element) {\n    if (!element)\n        return false;\n    element.click();\n    console.log(`✅ Clicked Workday button`);\n    return true;\n}\n// Helper function to map common majors to likely Workday field of study options\nfunction mapFieldOfStudyValue(major) {\n    const lowerMajor = major.toLowerCase();\n    // Return array of possible matches (in order of preference)\n    const mappings = {\n        'computer science': ['Computer Information Systems', 'Computer Science', 'Information Technology', 'Information Systems', 'Computer Engineering'],\n        'computer engineering': ['Computer Engineering', 'Computer Information Systems', 'Engineering', 'Computer Science'],\n        'software engineering': ['Computer Information Systems', 'Software Engineering', 'Computer Science', 'Information Technology'],\n        'information technology': ['Information Technology', 'Computer Information Systems', 'Information Systems'],\n        'information systems': ['Information Systems', 'Computer Information Systems', 'Information Technology'],\n        'business': ['Business Administration', 'Business Management', 'Business', 'Management'],\n        'business administration': ['Business Administration', 'Business Management', 'Business'],\n        'marketing': ['Marketing', 'Business Administration', 'Advertising'],\n        'finance': ['Finance', 'Business Administration', 'Accounting'],\n        'accounting': ['Accounting', 'Business Administration', 'Finance'],\n        'economics': ['Economics', 'Business Administration'],\n        'psychology': ['Psychology', 'Behavioral Sciences'],\n        'engineering': ['Engineering', 'Mechanical Engineering', 'Electrical Engineering'],\n        'mechanical engineering': ['Mechanical Engineering', 'Engineering'],\n        'electrical engineering': ['Electrical Engineering', 'Engineering'],\n        'civil engineering': ['Civil Engineering', 'Engineering'],\n        'biology': ['Biology', 'Biological Sciences'],\n        'chemistry': ['Chemistry', 'Chemical Engineering'],\n        'physics': ['Physics', 'Engineering'],\n        'mathematics': ['Mathematics', 'Applied Mathematics'],\n        'english': ['English', 'English Literature', 'Literature'],\n        'history': ['History'],\n        'political science': ['Political Science', 'Government'],\n        'communications': ['Communications', 'Journalism'],\n        'journalism': ['Journalism', 'Communications'],\n        'education': ['Education', 'Educational Leadership'],\n        'nursing': ['Nursing', 'Health Sciences'],\n        'medicine': ['Health Sciences', 'Biology'],\n        'law': ['Legal Studies', 'Political Science'],\n        'art': ['Art', 'Fine Arts', 'Visual Arts'],\n        'music': ['Music', 'Fine Arts'],\n        'philosophy': ['Philosophy'],\n        'sociology': ['Sociology', 'Social Sciences'],\n        'anthropology': ['Anthropology', 'Social Sciences']\n    };\n    // Check for exact matches first\n    if (mappings[lowerMajor]) {\n        return mappings[lowerMajor];\n    }\n    // Check for partial matches\n    for (const [key, values] of Object.entries(mappings)) {\n        if (lowerMajor.includes(key) || key.includes(lowerMajor)) {\n            return values;\n        }\n    }\n    // Return original value if no mapping found\n    return [major];\n}\n// Helper function to fill multiselect field of study using native Workday behavior\nasync function fillMultiselectFieldOfStudy(element, major) {\n    if (!major || !element)\n        return false;\n    try {\n        const input = element;\n        // Click the input to open dropdown\n        input.click();\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // Focus and clear any existing content\n        input.focus();\n        input.value = '';\n        // Type the value\n        input.value = major;\n        // Dispatch input event to trigger Workday's search\n        input.dispatchEvent(new InputEvent('input', {\n            bubbles: true,\n            cancelable: true,\n            inputType: 'insertText',\n            data: major,\n        }));\n        // Wait for dropdown to react\n        await new Promise(resolve => setTimeout(resolve, 300));\n        // Press Enter to let Workday auto-select the closest match\n        input.dispatchEvent(new KeyboardEvent('keydown', {\n            key: 'Enter',\n            code: 'Enter',\n            bubbles: true,\n        }));\n        input.dispatchEvent(new KeyboardEvent('keyup', {\n            key: 'Enter',\n            code: 'Enter',\n            bubbles: true,\n        }));\n        // Wait for selection to process\n        await new Promise(resolve => setTimeout(resolve, 300));\n        // Blur the input to close the dropdown/search interface\n        input.blur();\n        return true;\n    }\n    catch (error) {\n        console.error(`❌ Error filling multiselect field of study:`, error);\n        return false;\n    }\n}\nasync function fillSkillsInput(element, skills) {\n    if (!element || !skills || skills.length === 0)\n        return false;\n    const input = element;\n    // For each skill, type it and simulate selection\n    for (const skill of skills.slice(0, 10)) { // Limit to 10 skills to avoid overwhelming\n        try {\n            // Clear and focus using React-compatible method\n            input.focus();\n            setNativeValue(input, '');\n            // Type the skill using React-compatible method\n            setNativeValue(input, skill);\n            // Wait a bit for suggestions to appear\n            await new Promise(resolve => setTimeout(resolve, 500));\n            // Try to press Enter to add the skill\n            const enterEvent = new KeyboardEvent('keydown', {\n                key: 'Enter',\n                code: 'Enter',\n                keyCode: 13,\n                bubbles: true\n            });\n            input.dispatchEvent(enterEvent);\n            // Wait a bit before next skill\n            await new Promise(resolve => setTimeout(resolve, 300));\n            console.log(`✅ Added skill: ${skill}`);\n        }\n        catch (error) {\n            console.log(`⚠️ Could not add skill: ${skill}`, error);\n        }\n    }\n    return true;\n}\n// Convert base64 to File object for proper upload\n// Removed base64ToFile function - no longer needed with Supabase signed URLs\n// Debug function to scan all file inputs on the page\nfunction scanAllFileInputs() {\n    console.log(`🔍 Scanning all file inputs on the page...`);\n    const allFileInputs = document.querySelectorAll('input[type=\"file\"]');\n    console.log(`📄 Found ${allFileInputs.length} file input(s):`);\n    allFileInputs.forEach((input, index) => {\n        const htmlInput = input;\n        console.log(`📄 File input ${index + 1}:`, {\n            id: htmlInput.id,\n            name: htmlInput.name,\n            className: htmlInput.className,\n            accept: htmlInput.accept,\n            multiple: htmlInput.multiple,\n            'data-automation-id': htmlInput.getAttribute('data-automation-id'),\n            visible: htmlInput.offsetParent !== null,\n            parentElement: htmlInput.parentElement?.tagName\n        });\n    });\n}\n// Workday-compatible resume injection using React-friendly DOM selectors and events\nasync function handleResumeUpload(fileInput, resumeUrl) {\n    if (!resumeUrl) {\n        console.log(`⚠️ Resume upload: No resume URL provided`);\n        return false;\n    }\n    console.log(`📄 Starting Workday-compatible resume upload process...`);\n    console.log(`📄 Resume URL: ${resumeUrl}`);\n    try {\n        // Method 1: Use Workday's specific file input selector (as identified by ChatGPT)\n        console.log(`🔄 Method 1: Looking for Workday file input...`);\n        const workdayInput = document.querySelector('input[data-automation-id=\"file-upload-input-ref\"]');\n        if (workdayInput) {\n            console.log(`✅ Found Workday file input: data-automation-id=\"file-upload-input-ref\"`);\n            const success = await injectResumeIntoWorkday(workdayInput, resumeUrl);\n            if (success) {\n                console.log(`✅ Resume uploaded successfully via Workday method`);\n                return true;\n            }\n        }\n        // Method 2: Fallback to provided file input element\n        console.log(`🔄 Method 2: Using provided file input element...`);\n        if (fileInput) {\n            const success = await uploadResumeFromUrl(fileInput, resumeUrl);\n            if (success) {\n                console.log(`✅ Resume uploaded successfully via fallback method`);\n                return true;\n            }\n        }\n        // Method 3: Try to find and click \"Select Files\" button to trigger manual upload\n        console.log(`🔄 Method 3: Looking for Select Files button...`);\n        const selectFilesButton = document.querySelector('[data-automation-id=\"select-files\"]');\n        if (selectFilesButton) {\n            console.log(`✅ Found Select Files button, clicking to open file dialog...`);\n            selectFilesButton.click();\n            console.log(`ℹ️ File dialog should be open - please select your resume manually`);\n            return true; // Consider this a success since we opened the dialog\n        }\n        console.log(`⚠️ Resume upload: All Workday methods attempted`);\n        console.log(`ℹ️ You may need to manually upload your resume file`);\n        scanAllFileInputs(); // Debug: scan all file inputs\n        return false;\n    }\n    catch (error) {\n        console.log(`❌ Error in resume upload process:`, error);\n        return false;\n    }\n}\n// Workday-specific resume injection function (based on ChatGPT's analysis)\nasync function injectResumeIntoWorkday(input, resumeUrl) {\n    if (!input || !resumeUrl)\n        return false;\n    try {\n        console.log(`🔄 Fetching resume file from Supabase URL...`);\n        // Fetch the resume file\n        const response = await fetch(resumeUrl);\n        if (!response.ok) {\n            console.log(`❌ Failed to fetch resume: ${response.status} ${response.statusText}`);\n            return false;\n        }\n        const blob = await response.blob();\n        console.log(`✅ Resume fetched successfully, size: ${blob.size} bytes`);\n        // Determine filename from URL or use default\n        let fileName = 'resume.pdf';\n        try {\n            const urlPath = new URL(resumeUrl).pathname;\n            const extractedName = urlPath.split('/').pop();\n            if (extractedName && extractedName.includes('.')) {\n                fileName = extractedName;\n            }\n        }\n        catch (e) {\n            // Use default filename if URL parsing fails\n        }\n        // Create File object\n        const file = new File([blob], fileName, { type: blob.type || 'application/pdf' });\n        console.log(`✅ Created file object: ${file.name}, type: ${file.type}, size: ${file.size}`);\n        // Simulate React-compatible file selection\n        const dataTransfer = new DataTransfer();\n        dataTransfer.items.add(file);\n        input.files = dataTransfer.files;\n        // Trigger React-compatible events\n        console.log(`🔄 Dispatching React-compatible change events...`);\n        const nativeChangeEvent = new Event('change', { bubbles: true });\n        input.dispatchEvent(nativeChangeEvent);\n        // Also trigger input event for additional React compatibility\n        const inputEvent = new Event('input', { bubbles: true });\n        input.dispatchEvent(inputEvent);\n        // Optional: Click the \"Select Files\" button to ensure Workday's upload logic fires\n        const selectFilesButton = document.querySelector('[data-automation-id=\"select-files\"]');\n        if (selectFilesButton) {\n            console.log(`🔄 Clicking Select Files button to trigger Workday upload logic...`);\n            selectFilesButton.click();\n        }\n        // Wait for Workday's React upload preview to process\n        console.log(`⏳ Waiting for Workday to process the file upload...`);\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        // Check if upload preview appeared (validation)\n        const uploadPreview = document.querySelector('[data-automation-id*=\"upload\"]') ||\n            document.querySelector('.css-1hyfx7x') ||\n            document.querySelector('[class*=\"upload\"]');\n        if (uploadPreview) {\n            console.log(`✅ Resume injection complete - upload preview detected`);\n            return true;\n        }\n        else {\n            console.log(`⚠️ Resume injection complete but no upload preview detected`);\n            return true; // Still consider it successful since we injected the file\n        }\n    }\n    catch (error) {\n        console.log(`❌ Error in Workday resume injection:`, error);\n        return false;\n    }\n}\n// Helper function to create and upload file from URL\nasync function uploadResumeFromUrl(fileInput, resumeUrl) {\n    if (!resumeUrl || !fileInput)\n        return false;\n    try {\n        console.log(`🔄 Attempting to fetch resume from URL: ${resumeUrl}`);\n        // Fix double encoding: decode first, then encode properly\n        const safeUrl = encodeURI(decodeURIComponent(resumeUrl));\n        console.log(`🔄 Safe URL: ${safeUrl}`);\n        // Fetch the resume file with proper headers for Supabase\n        const response = await fetch(safeUrl, {\n            mode: 'cors',\n            credentials: 'omit',\n            headers: {\n                'Range': 'bytes=0-'\n            }\n        });\n        if (!response.ok) {\n            console.log(`⚠️ Failed to fetch resume: ${response.status} ${response.statusText}`);\n            console.log(`⚠️ Response headers:`, Object.fromEntries(response.headers.entries()));\n            console.log(`⚠️ Full response:`, response);\n            return false;\n        }\n        // Get the file blob\n        const blob = await response.blob();\n        console.log(`✅ Resume fetched successfully, size: ${blob.size} bytes`);\n        // Determine file name and type\n        let fileName = 'resume.pdf';\n        let fileType = blob.type || 'application/pdf';\n        // Try to extract filename from URL\n        const urlPath = new URL(resumeUrl).pathname;\n        const urlFileName = urlPath.split('/').pop();\n        if (urlFileName && urlFileName.includes('.')) {\n            fileName = urlFileName;\n        }\n        // Create a File object\n        const file = new File([blob], fileName, { type: fileType });\n        console.log(`✅ Created file object: ${file.name}, type: ${file.type}, size: ${file.size}`);\n        // Create a FileList-like object\n        const dataTransfer = new DataTransfer();\n        dataTransfer.items.add(file);\n        // Set the files property\n        Object.defineProperty(fileInput, 'files', {\n            value: dataTransfer.files,\n            writable: false\n        });\n        // Trigger change events\n        fileInput.dispatchEvent(new Event('change', { bubbles: true }));\n        fileInput.dispatchEvent(new Event('input', { bubbles: true }));\n        // Additional events for React components\n        const changeEvent = new Event('change', { bubbles: true });\n        Object.defineProperty(changeEvent, 'target', { value: fileInput, enumerable: true });\n        fileInput.dispatchEvent(changeEvent);\n        console.log(`✅ File upload events dispatched`);\n        // Wait a moment for processing\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        // Verify the file was set\n        if (fileInput.files && fileInput.files.length > 0) {\n            console.log(`✅ Resume file successfully set: ${fileInput.files[0].name}`);\n            return true;\n        }\n        else {\n            console.log(`⚠️ File was not set on input element`);\n            return false;\n        }\n    }\n    catch (error) {\n        console.log(`❌ Error uploading resume from URL:`, error);\n        // If CORS error, provide guidance\n        if (error instanceof TypeError && error.message.includes('CORS')) {\n            console.log(`ℹ️ CORS error - resume URL might need to be publicly accessible`);\n            console.log(`ℹ️ Please manually upload your resume file instead`);\n        }\n        return false;\n    }\n}\n// Helper function to find resume upload elements with better detection\nfunction findResumeUploadElements() {\n    console.log(`🔍 Searching for resume upload elements...`);\n    const fileInput = findElement(WORKDAY_STEP2_SELECTORS.RESUME_FILE_INPUT);\n    const uploadButton = findElement(WORKDAY_STEP2_SELECTORS.RESUME_SELECT_BUTTON);\n    const uploadArea = findElement(WORKDAY_STEP2_SELECTORS.RESUME_UPLOAD_AREA);\n    console.log(`📋 Resume upload elements found:`);\n    console.log(`  - File Input: ${!!fileInput} ${fileInput ? `(${fileInput.tagName})` : ''}`);\n    console.log(`  - Upload Button: ${!!uploadButton} ${uploadButton ? `(${uploadButton.tagName})` : ''}`);\n    console.log(`  - Upload Area: ${!!uploadArea} ${uploadArea ? `(${uploadArea.tagName})` : ''}`);\n    return { fileInput, uploadButton, uploadArea };\n}\n// Helper function to format date for Workday (detects format from placeholder)\nfunction formatWorkdayDate(month, year, element) {\n    console.log(`🔄 formatWorkdayDate called with: month=\"${month}\", year=${year}`);\n    const monthMap = {\n        // Full month names\n        'January': '01', 'February': '02', 'March': '03', 'April': '04',\n        'May': '05', 'June': '06', 'July': '07', 'August': '08',\n        'September': '09', 'October': '10', 'November': '11', 'December': '12',\n        // Abbreviated month names\n        'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',\n        'Jun': '06', 'Jul': '07', 'Aug': '08', 'Sep': '09', 'Sept': '09',\n        'Oct': '10', 'Nov': '11', 'Dec': '12',\n        // Lowercase variants\n        'january': '01', 'february': '02', 'march': '03', 'april': '04',\n        'may': '05', 'june': '06', 'july': '07', 'august': '08',\n        'september': '09', 'october': '10', 'november': '11', 'december': '12',\n        'jan': '01', 'feb': '02', 'mar': '03', 'apr': '04',\n        'jun': '06', 'jul': '07', 'aug': '08', 'sep': '09', 'sept': '09',\n        'oct': '10', 'nov': '11', 'dec': '12'\n    };\n    const monthNum = monthMap[month] || monthMap[month.toLowerCase()] || '01';\n    console.log(`🔄 Mapped month \"${month}\" to \"${monthNum}\"`);\n    // Check element placeholder to determine format\n    if (element) {\n        const input = element;\n        const placeholder = input.placeholder?.toLowerCase() || '';\n        if (placeholder.includes('yyyy')) {\n            const result = `${monthNum}/${year}`;\n            console.log(`✅ Using MM/YYYY format: ${result}`);\n            return result;\n        }\n        else if (placeholder.includes('yy')) {\n            const shortYear = year.toString().slice(-2);\n            const result = `${monthNum}/${shortYear}`;\n            console.log(`✅ Using MM/YY format: ${result}`);\n            return result;\n        }\n        else if (placeholder.includes('mm') && !placeholder.includes('/')) {\n            const result = `${monthNum}${year}`;\n            console.log(`✅ Using MMYYYY format: ${result}`);\n            return result;\n        }\n    }\n    // Default format\n    const result = `${monthNum}/${year}`;\n    console.log(`✅ Using default MM/YYYY format: ${result}`);\n    return result;\n}\n// Enhanced date conversion function to handle various date formats from database\nfunction convertToMMYYYY(dateStr) {\n    console.log(`🔄 Converting date string: \"${dateStr}\"`);\n    if (!dateStr)\n        return '';\n    const months = {\n        'jan': '01', 'january': '01',\n        'feb': '02', 'february': '02',\n        'mar': '03', 'march': '03',\n        'apr': '04', 'april': '04',\n        'may': '05',\n        'jun': '06', 'june': '06',\n        'jul': '07', 'july': '07',\n        'aug': '08', 'august': '08',\n        'sep': '09', 'september': '09', 'sept': '09',\n        'oct': '10', 'october': '10',\n        'nov': '11', 'november': '11',\n        'dec': '12', 'december': '12'\n    };\n    // Split by common separators\n    const parts = dateStr.toLowerCase().split(/[\\s/\\-.,]+/);\n    console.log(`🔄 Date parts:`, parts);\n    let monthStr = '';\n    let year = '';\n    // Try to find month and year\n    for (const part of parts) {\n        const trimmed = part.trim();\n        if (!trimmed)\n            continue;\n        // Check if it's a month\n        if (months[trimmed] || months[trimmed.slice(0, 3)]) {\n            monthStr = months[trimmed] || months[trimmed.slice(0, 3)];\n        }\n        // Check if it's a year (4 digits)\n        if (/^\\d{4}$/.test(trimmed)) {\n            year = trimmed;\n        }\n    }\n    if (monthStr && year) {\n        const result = `${monthStr}/${year}`;\n        console.log(`✅ Converted \"${dateStr}\" → \"${result}\"`);\n        return result;\n    }\n    console.log(`⚠️ Could not convert date: \"${dateStr}\"`);\n    return dateStr; // Return original if conversion fails\n}\n// Helper function to format year-only dates (for some education fields)\nfunction formatWorkdayYearOnly(year) {\n    return year.toString();\n}\n// Specialized function to fill Workday date fields (handles masked inputs)\nasync function fillWorkdayDateField(element, dateValue) {\n    if (!element || !dateValue)\n        return false;\n    const input = element;\n    try {\n        console.log(`🗓️ Attempting to fill date field with: ${dateValue}`);\n        // Method 1: Clear field and use setNativeValue (for React inputs)\n        input.focus();\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Clear the field completely\n        input.select();\n        setNativeValue(input, '');\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Set the date value using React-compatible method\n        setNativeValue(input, dateValue);\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // CRITICAL: Focus + Blur cycle to make Workday commit the value\n        input.focus(); // Simulate clicking into the field\n        await new Promise(resolve => setTimeout(resolve, 100));\n        input.blur(); // Simulate clicking away to commit the field\n        // Check if the value was set correctly\n        if (input.value === dateValue || input.value.includes(dateValue.replace('/', ''))) {\n            console.log(`✅ Date field filled successfully: ${input.value}`);\n            return true;\n        }\n        // Method 2: Character-by-character typing for masked inputs\n        console.log(`🔄 Trying character-by-character method for masked input`);\n        input.focus();\n        setNativeValue(input, '');\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // Type each character with delays (for masked inputs)\n        for (let i = 0; i < dateValue.length; i++) {\n            const char = dateValue[i];\n            // Build value character by character\n            input.value += char;\n            // Trigger comprehensive events for each character\n            input.dispatchEvent(new Event('input', { bubbles: true }));\n            input.dispatchEvent(new KeyboardEvent('keydown', { key: char, bubbles: true }));\n            input.dispatchEvent(new KeyboardEvent('keyup', { key: char, bubbles: true }));\n            // Slower typing for better reliability\n            await new Promise(resolve => setTimeout(resolve, 80));\n        }\n        // Final validation and events\n        input.dispatchEvent(new Event('blur', { bubbles: true }));\n        await new Promise(resolve => setTimeout(resolve, 100));\n        console.log(`✅ Date field filled with character method: ${input.value}`);\n        return true;\n    }\n    catch (error) {\n        console.log(`❌ Error filling date field:`, error);\n        // Method 3: Fallback - simple value assignment\n        try {\n            input.value = dateValue;\n            input.dispatchEvent(new Event('input', { bubbles: true }));\n            input.dispatchEvent(new Event('change', { bubbles: true }));\n            console.log(`✅ Date field filled with fallback method: ${input.value}`);\n            return true;\n        }\n        catch (fallbackError) {\n            console.log(`❌ All date filling methods failed:`, fallbackError);\n            return false;\n        }\n    }\n}\n// Helper function to fill work experience modal\nasync function fillWorkExperienceModal(workExp, isLastEntry = false) {\n    console.log(`🔄 Filling work experience: ${workExp.position_title} at ${workExp.company_name}`);\n    console.log(`🔄 Is last entry: ${isLastEntry}`);\n    // Wait for modal to load and DOM to stabilize\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    // CRITICAL: Always re-query elements fresh (Workday reuses modal DOM)\n    console.log(`🔄 Re-querying all modal elements (DOM may have been updated)`);\n    let filledCount = 0;\n    // Add smooth scrolling to modal for better UX\n    const modal = document.querySelector('[role=\"dialog\"], .modal, [data-automation-id*=\"modal\"]');\n    if (modal) {\n        modal.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    // ALWAYS re-query elements fresh (don't cache DOM references)\n    // Fill Job Title\n    let jobTitleEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.JOB_TITLE);\n    if (jobTitleEl) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(jobTitleEl, workExp.position_title);\n        filledCount++;\n        console.log(`✅ Filled job title: ${workExp.position_title}`);\n    }\n    else {\n        console.log(`⚠️ Job title element not found`);\n    }\n    // Fill Company\n    let companyEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.COMPANY);\n    if (companyEl) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(companyEl, workExp.company_name);\n        filledCount++;\n        console.log(`✅ Filled company: ${workExp.company_name}`);\n    }\n    else {\n        console.log(`⚠️ Company element not found`);\n    }\n    // Fill Location (if available)\n    const locationEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.LOCATION);\n    if (locationEl && workExp.location) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(locationEl, workExp.location);\n        filledCount++;\n        console.log(`✅ Filled location: ${workExp.location}`);\n    }\n    // Handle \"Currently work here\" checkbox\n    const isCurrentJob = !workExp.end_month || !workExp.end_year;\n    if (isCurrentJob) {\n        console.log(`🔄 This is a current job, attempting to check \"I currently work here\" checkbox`);\n        // Try to find checkbox using selectors first\n        let currentlyWorkEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.CURRENTLY_WORK_HERE);\n        // If not found, try finding by label text\n        if (!currentlyWorkEl) {\n            currentlyWorkEl = findCheckboxByLabelText([\n                'I currently work here',\n                'currently work here',\n                'current position',\n                'present',\n                'current job'\n            ]);\n        }\n        if (currentlyWorkEl) {\n            const success = await clickWorkdayCheckbox(currentlyWorkEl, true);\n            if (success) {\n                console.log(`✅ Successfully checked \"I currently work here\"`);\n                filledCount++;\n            }\n            else {\n                console.log(`⚠️ Could not check \"I currently work here\" checkbox`);\n            }\n        }\n        else {\n            console.log(`⚠️ Could not find \"I currently work here\" checkbox`);\n        }\n    }\n    else {\n        console.log(`ℹ️ This is not a current job, skipping \"I currently work here\" checkbox`);\n    }\n    // Fill From Date\n    let fromDateEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.FROM_DATE);\n    if (fromDateEl && workExp.start_month && workExp.start_year) {\n        const fromDate = formatWorkdayDate(workExp.start_month, workExp.start_year, fromDateEl);\n        // Add delay before date filling for better reliability\n        await new Promise(resolve => setTimeout(resolve, 400));\n        if (await fillWorkdayDateField(fromDateEl, fromDate)) {\n            filledCount++;\n            console.log(`✅ Filled start date: ${fromDate}`);\n        }\n        else {\n            console.log(`⚠️ Could not fill start date: ${fromDate}`);\n        }\n    }\n    // Fill To Date (only if not current job)\n    if (!isCurrentJob) {\n        let toDateEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.TO_DATE);\n        if (toDateEl && workExp.end_month && workExp.end_year) {\n            const toDate = formatWorkdayDate(workExp.end_month, workExp.end_year, toDateEl);\n            // Add delay before date filling for better reliability\n            await new Promise(resolve => setTimeout(resolve, 400));\n            if (await fillWorkdayDateField(toDateEl, toDate)) {\n                filledCount++;\n                console.log(`✅ Filled end date: ${toDate}`);\n            }\n            else {\n                console.log(`⚠️ Could not fill end date: ${toDate}`);\n            }\n        }\n    }\n    // Fill Description\n    const descriptionEl = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.DESCRIPTION);\n    if (descriptionEl && workExp.description) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(descriptionEl, workExp.description);\n        filledCount++;\n        console.log(`✅ Filled description`);\n    }\n    // Handle Save vs Add Another vs Done based on whether this is the last entry\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log(`🔄 Looking for buttons... isLastEntry: ${isLastEntry}`);\n    if (isLastEntry) {\n        console.log(`ℹ️ Last work experience entry - form will auto-save, no buttons needed`);\n        // No need to click Done or Save - Workday auto-saves\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    else {\n        // This is not the last entry - click Add Another to continue\n        console.log(`🔄 Looking for Add Another button for entry ${filledCount}...`);\n        let addAnotherBtn = findElement(WORKDAY_WORK_EXPERIENCE_MODAL.ADD_ANOTHER_BUTTON);\n        if (!addAnotherBtn) {\n            addAnotherBtn = findButtonByText(['Add Another', 'Add More', '+ Add', 'Add Additional']);\n        }\n        if (addAnotherBtn) {\n            console.log(`✅ Found Add Another button, clicking...`);\n            addAnotherBtn.click();\n            console.log(`✅ Clicked Add Another for work experience - staying in modal`);\n            // CRITICAL: Wait longer for DOM to update and re-render\n            await new Promise(resolve => setTimeout(resolve, 2500));\n            // Force re-query of all elements after modal updates\n            console.log(`🔄 Modal updated - DOM elements will be re-queried for next entry`);\n            // Clear any cached DOM references (they become stale after \"Add Another\")\n            // This ensures fresh element queries for the next iteration\n        }\n        else {\n            console.log(`ℹ️ Add Another button not found - form will auto-save`);\n            // No need to click Save - Workday auto-saves\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n    }\n    console.log(`✅ Filled ${filledCount} work experience fields`);\n    return filledCount > 0;\n}\n// Helper function to fill education modal\nasync function fillEducationModal(education, isLastEntry = false) {\n    // Debug the education object to fix undefined issues\n    console.log(`🎓 Filling education entry`, JSON.stringify(education, null, 2));\n    // Handle field name variations and provide fallbacks\n    const schoolName = education.institution_name || education.school_name || education.school || 'Unknown School';\n    const degreeType = education.degree_type || education.degree || education.level || 'Bachelor\\'s Degree';\n    const major = education.major || education.field_of_study || education.field || '';\n    const gpa = education.gpa || education.grade_point_average || '';\n    console.log(`🔄 Filling education: ${degreeType} from ${schoolName}`);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    let filledCount = 0;\n    // Fill School Name\n    const schoolEl = findElement(WORKDAY_EDUCATION_MODAL.SCHOOL_NAME);\n    if (schoolEl) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(schoolEl, schoolName);\n        filledCount++;\n        console.log(`✅ Filled school: ${schoolName}`);\n    }\n    // Fill Degree Type (dropdown)\n    const degreeEl = findElement(WORKDAY_EDUCATION_MODAL.DEGREE_TYPE);\n    if (degreeEl && degreeType) {\n        const success = await clickWorkdayDropdown(degreeEl, degreeType);\n        if (success) {\n            filledCount++;\n            console.log(`✅ Filled degree type: ${degreeType}`);\n        }\n        await new Promise(resolve => setTimeout(resolve, 300));\n    }\n    // Fill Field of Study/Major - Try multiselect first, then fallback to regular input\n    let majorFilled = false;\n    // Try multiselect approach first\n    const multiselectMajorEl = findElement(WORKDAY_EDUCATION_MODAL.FIELD_OF_STUDY_MULTISELECT);\n    if (multiselectMajorEl && major) {\n        console.log(`🎓 Attempting multiselect field of study fill...`);\n        majorFilled = await fillMultiselectFieldOfStudy(multiselectMajorEl, major);\n        if (majorFilled) {\n            filledCount++;\n            console.log(`✅ Filled major via multiselect: ${major}`);\n        }\n    }\n    // Fallback to regular input if multiselect didn't work\n    if (!majorFilled) {\n        const majorEl = findElement(WORKDAY_EDUCATION_MODAL.FIELD_OF_STUDY);\n        if (majorEl && major && fillInput(majorEl, major)) {\n            filledCount++;\n            console.log(`✅ Filled major via regular input: ${major}`);\n        }\n    }\n    // Fill GPA\n    const gpaEl = findElement(WORKDAY_EDUCATION_MODAL.GPA);\n    if (gpaEl && gpa && fillInput(gpaEl, gpa.toString())) {\n        filledCount++;\n        console.log(`✅ Filled GPA: ${gpa}`);\n    }\n    // Fill Graduation Date\n    const gradDateEl = findElement(WORKDAY_EDUCATION_MODAL.GRADUATION_DATE);\n    if (gradDateEl && education.graduation_month && education.graduation_year) {\n        const input = gradDateEl;\n        let gradDate;\n        // Check if this is a year-only field\n        if (input.placeholder?.toLowerCase().includes('yyyy') && !input.placeholder?.toLowerCase().includes('mm')) {\n            gradDate = formatWorkdayYearOnly(education.graduation_year);\n        }\n        else {\n            gradDate = formatWorkdayDate(education.graduation_month, education.graduation_year, gradDateEl);\n        }\n        if (await fillWorkdayDateField(gradDateEl, gradDate)) {\n            filledCount++;\n            console.log(`✅ Filled graduation date: ${gradDate}`);\n        }\n        else {\n            console.log(`⚠️ Could not fill graduation date: ${gradDate}`);\n        }\n    }\n    // Handle Save vs Add Another vs Done based on whether this is the last entry\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (isLastEntry) {\n        console.log(`ℹ️ Last education entry - form will auto-save, no buttons needed`);\n        // No need to click Done or Save - Workday auto-saves\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    else {\n        // This is not the last entry - click Add Another to continue\n        let addAnotherBtn = findElement(WORKDAY_EDUCATION_MODAL.ADD_ANOTHER_BUTTON);\n        if (!addAnotherBtn) {\n            addAnotherBtn = findButtonByText(['Add Another', 'Add More', '+ Add']);\n        }\n        if (addAnotherBtn) {\n            addAnotherBtn.click();\n            console.log(`✅ Clicked Add Another for education - staying in modal`);\n            await new Promise(resolve => setTimeout(resolve, 1500)); // Wait for new form to appear\n        }\n        else {\n            console.log(`ℹ️ Add Another button not found - form will auto-save`);\n            // No need to click Save - Workday auto-saves\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n    }\n    console.log(`✅ Filled ${filledCount} education fields`);\n    return filledCount > 0;\n}\n// Helper function to fill certifications modal\nasync function fillCertificationModal(cert, isLastEntry = false) {\n    console.log(`🔄 Filling certification: ${cert.certification_name}`);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    let filledCount = 0;\n    // Fill Certification Name\n    const certNameEl = findElement(WORKDAY_CERTIFICATIONS_MODAL.CERTIFICATION_NAME);\n    if (certNameEl && fillInput(certNameEl, cert.certification_name)) {\n        filledCount++;\n        console.log(`✅ Filled certification name: ${cert.certification_name}`);\n    }\n    // Fill Issuing Organization\n    const orgEl = findElement(WORKDAY_CERTIFICATIONS_MODAL.ISSUING_ORGANIZATION);\n    if (orgEl && cert.issuing_organization && fillInput(orgEl, cert.issuing_organization)) {\n        filledCount++;\n        console.log(`✅ Filled issuing organization: ${cert.issuing_organization}`);\n    }\n    // Fill Issue Date\n    const issueDateEl = findElement(WORKDAY_CERTIFICATIONS_MODAL.ISSUE_DATE);\n    if (issueDateEl && cert.issue_month && cert.issue_year) {\n        const issueDate = formatWorkdayDate(cert.issue_month, cert.issue_year, issueDateEl);\n        if (await fillWorkdayDateField(issueDateEl, issueDate)) {\n            filledCount++;\n            console.log(`✅ Filled issue date: ${issueDate}`);\n        }\n        else {\n            console.log(`⚠️ Could not fill issue date: ${issueDate}`);\n        }\n    }\n    // Fill Credential ID\n    const credentialEl = findElement(WORKDAY_CERTIFICATIONS_MODAL.CREDENTIAL_ID);\n    if (credentialEl && cert.credential_id && fillInput(credentialEl, cert.credential_id)) {\n        filledCount++;\n        console.log(`✅ Filled credential ID: ${cert.credential_id}`);\n    }\n    // Save the entry\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (isLastEntry) {\n        console.log(`ℹ️ Last certification entry - form will auto-save, no buttons needed`);\n        // No need to click Done or Save - Workday auto-saves\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    else {\n        // Click Add Another for non-last entries\n        const addAnotherBtn = findElement(WORKDAY_CERTIFICATIONS_MODAL.ADD_ANOTHER_BUTTON);\n        if (addAnotherBtn) {\n            addAnotherBtn.click();\n            console.log(`✅ Clicked Add Another for certification`);\n            await new Promise(resolve => setTimeout(resolve, 1500));\n        }\n        else {\n            console.log(`ℹ️ Add Another button not found - form will auto-save`);\n            // No need to click Save - Workday auto-saves\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n    }\n    console.log(`✅ Filled ${filledCount} certification fields`);\n    return filledCount > 0;\n}\n// Helper function to fill languages modal\nasync function fillLanguageModal(language, isLastEntry = false) {\n    console.log(`🔄 Filling language: ${language.language_name}`);\n    await new Promise(resolve => setTimeout(resolve, 1500));\n    let filledCount = 0;\n    // Fill Language (dropdown)\n    const langEl = findElement(WORKDAY_LANGUAGES_MODAL.LANGUAGE);\n    if (langEl && language.language_name) {\n        const success = await clickWorkdayDropdown(langEl, language.language_name);\n        if (success) {\n            filledCount++;\n            console.log(`✅ Filled language: ${language.language_name}`);\n        }\n        await new Promise(resolve => setTimeout(resolve, 300));\n    }\n    // Fill Proficiency (dropdown)\n    const profEl = findElement(WORKDAY_LANGUAGES_MODAL.PROFICIENCY);\n    if (profEl && language.proficiency_level) {\n        const success = await clickWorkdayDropdown(profEl, language.proficiency_level);\n        if (success) {\n            filledCount++;\n            console.log(`✅ Filled proficiency: ${language.proficiency_level}`);\n        }\n        await new Promise(resolve => setTimeout(resolve, 300));\n    }\n    // Save the entry\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    if (isLastEntry) {\n        console.log(`ℹ️ Last language entry - form will auto-save, no buttons needed`);\n        // No need to click Done or Save - Workday auto-saves\n        await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    else {\n        // Click Add Another for non-last entries\n        const addAnotherBtn = findElement(WORKDAY_LANGUAGES_MODAL.ADD_ANOTHER_BUTTON);\n        if (addAnotherBtn) {\n            addAnotherBtn.click();\n            console.log(`✅ Clicked Add Another for language`);\n            await new Promise(resolve => setTimeout(resolve, 1500));\n        }\n        else {\n            console.log(`ℹ️ Add Another button not found - form will auto-save`);\n            // No need to click Save - Workday auto-saves\n            await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n    }\n    console.log(`✅ Filled ${filledCount} language fields`);\n    return filledCount > 0;\n}\nfunction getGenericQuestionAnswer(questionText, profile) {\n    const text = questionText.toLowerCase();\n    console.log(`🤔 Analyzing question: \"${questionText}\"`);\n    console.log(`🔍 Profile authorization data:`, {\n        work_authorization_us: profile.work_authorization_us,\n        visa_sponsorship_required: profile.visa_sponsorship_required,\n        willing_to_relocate: profile.willing_to_relocate\n    });\n    // Work Authorization\n    if (text.includes('authorized to work') && text.includes('country')) {\n        const answer = profile.work_authorization_us ? 'Yes' : 'No';\n        console.log(`✅ Work authorization question detected - Answer: ${answer}`);\n        return answer;\n    }\n    // Visa Sponsorship\n    if (text.includes('visa sponsorship') || text.includes('immigration filing') || text.includes('sponsorship for employment')) {\n        // If visa_sponsorship_required is 'yes' or true, they need sponsorship\n        // If visa_sponsorship_required is 'no' or false, they don't need sponsorship\n        const needsSponsorship = profile.visa_sponsorship_required === 'yes' || profile.visa_sponsorship_required === true;\n        const answer = needsSponsorship ? 'Yes' : 'No';\n        console.log(`✅ Visa sponsorship question detected - Answer: ${answer}`);\n        return answer;\n    }\n    // Relocation\n    if (text.includes('relocating') || text.includes('relocation')) {\n        const answer = profile.willing_to_relocate ? 'Yes' : 'No';\n        console.log(`✅ Relocation question detected - Answer: ${answer}`);\n        return answer;\n    }\n    // Additional jobs\n    if (text.includes('additional jobs') || text.includes('other employment') || text.includes('additional job')) {\n        console.log(`✅ Additional jobs question detected - Answer: No (default safe answer)`);\n        return 'No'; // Most people don't have additional jobs\n    }\n    // Board positions\n    if (text.includes('sit on') && text.includes('board')) {\n        console.log(`✅ Board position question detected - Answer: No (default safe answer)`);\n        return 'No'; // Most people don't sit on boards\n    }\n    // Government work\n    if (text.includes('government') && (text.includes('worked') || text.includes('employed'))) {\n        console.log(`✅ Government work question detected - Answer: No (default safe answer)`);\n        return 'No'; // Most people haven't worked for government\n    }\n    // Industry-specific questions (alcohol, etc.) - Default to No for safety\n    if (text.includes('alcohol') || text.includes('beverage') || text.includes('industry')) {\n        console.log(`✅ Industry-specific question detected - Answer: No (default safe answer)`);\n        return 'No';\n    }\n    // Family/relationship questions (conflict of interest)\n    if (text.includes('family member') || text.includes('close personal relationship')) {\n        console.log(`✅ Family/relationship question detected - Answer: No (default safe answer)`);\n        return 'No';\n    }\n    // Consultant/influencer questions\n    if (text.includes('consultant') || text.includes('influencer') || text.includes('endorser') || text.includes('advisor')) {\n        console.log(`✅ Consultant/influencer question detected - Answer: No (default safe answer)`);\n        return 'No';\n    }\n    // Non-compete agreements\n    if (text.includes('non-compete') || text.includes('non-solicitation')) {\n        console.log(`✅ Non-compete question detected - Answer: No (default safe answer)`);\n        return 'No'; // Default safe answer for most people\n    }\n    // Acknowledgment questions\n    if (text.includes('acknowledge') && text.includes('truthfully')) {\n        console.log(`✅ Acknowledgment question detected - Answer: Yes`);\n        return 'Yes'; // Always acknowledge truthfulness\n    }\n    console.log(`ℹ️ No match found for this question - skipping (likely company-specific)`);\n    return null; // Skip company-specific or unknown questions\n}\nasync function clickWorkdayDropdown(button, answerText) {\n    if (!button || !answerText)\n        return false;\n    try {\n        console.log(`🔄 Attempting to set dropdown to: \"${answerText}\"`);\n        // Enhanced value mapping for common dropdown values\n        const mappedAnswer = mapDropdownValue(answerText);\n        console.log(`🔄 Mapped value: \"${answerText}\" → \"${mappedAnswer}\"`);\n        // Try multiple attempts with different strategies\n        for (let attempt = 1; attempt <= 4; attempt++) {\n            console.log(`🔄 Dropdown attempt ${attempt}/4`);\n            // Method 1: Standard click and wait approach\n            if (attempt === 1) {\n                const success = await tryStandardDropdownClick(button, mappedAnswer);\n                if (success)\n                    return true;\n            }\n            // Method 2: Enhanced click with longer wait\n            if (attempt === 2) {\n                const success = await tryEnhancedDropdownClick(button, mappedAnswer);\n                if (success)\n                    return true;\n            }\n            // Method 3: Keyboard navigation approach\n            if (attempt === 3) {\n                const success = await tryKeyboardDropdownNavigation(button, mappedAnswer);\n                if (success)\n                    return true;\n            }\n            // Method 4: Workday-specific approach\n            if (attempt === 4) {\n                const success = await tryWorkdaySpecificDropdown(button, mappedAnswer);\n                if (success)\n                    return true;\n            }\n            // Wait between attempts\n            if (attempt < 4) {\n                await new Promise(resolve => setTimeout(resolve, 800));\n            }\n        }\n        console.log(`❌ All dropdown methods failed for \"${answerText}\"`);\n        return false;\n    }\n    catch (error) {\n        console.log(`⚠️ Error handling dropdown:`, error);\n        return false;\n    }\n}\n// Simplified value mapping - only map when we need exact matches\nfunction mapDropdownValue(value) {\n    const valueLower = value.toLowerCase().trim();\n    // ONLY map specific values we know need mapping\n    // For Step 1 dropdowns, return the original value\n    // Phone device type - exact matches only\n    if (valueLower === 'mobile')\n        return 'Mobile';\n    if (valueLower === 'cell' || valueLower === 'cellular')\n        return 'Mobile';\n    if (valueLower === 'landline' || valueLower === 'home')\n        return 'Landline';\n    if (valueLower === 'fax')\n        return 'Fax';\n    if (valueLower === 'pager')\n        return 'Pager';\n    // Source - exact matches only\n    if (valueLower === 'indeed')\n        return 'Indeed';\n    if (valueLower === 'linkedin')\n        return 'LinkedIn';\n    if (valueLower === 'company website')\n        return 'Company Website';\n    if (valueLower === 'referral')\n        return 'Referral';\n    // State abbreviations - common ones only\n    if (valueLower === 'ca')\n        return 'California';\n    if (valueLower === 'tx')\n        return 'Texas';\n    if (valueLower === 'ny')\n        return 'New York';\n    if (valueLower === 'fl')\n        return 'Florida';\n    if (valueLower === 'il')\n        return 'Illinois';\n    if (valueLower === 'pa')\n        return 'Pennsylvania';\n    if (valueLower === 'oh')\n        return 'Ohio';\n    if (valueLower === 'ga')\n        return 'Georgia';\n    if (valueLower === 'nc')\n        return 'North Carolina';\n    if (valueLower === 'mi')\n        return 'Michigan';\n    if (valueLower === 'nj')\n        return 'New Jersey';\n    if (valueLower === 'va')\n        return 'Virginia';\n    if (valueLower === 'wa')\n        return 'Washington';\n    if (valueLower === 'az')\n        return 'Arizona';\n    if (valueLower === 'ma')\n        return 'Massachusetts';\n    if (valueLower === 'tn')\n        return 'Tennessee';\n    if (valueLower === 'in')\n        return 'Indiana';\n    if (valueLower === 'mo')\n        return 'Missouri';\n    if (valueLower === 'md')\n        return 'Maryland';\n    if (valueLower === 'wi')\n        return 'Wisconsin';\n    if (valueLower === 'co')\n        return 'Colorado';\n    if (valueLower === 'mn')\n        return 'Minnesota';\n    if (valueLower === 'sc')\n        return 'South Carolina';\n    if (valueLower === 'al')\n        return 'Alabama';\n    if (valueLower === 'la')\n        return 'Louisiana';\n    if (valueLower === 'ky')\n        return 'Kentucky';\n    if (valueLower === 'or')\n        return 'Oregon';\n    if (valueLower === 'ok')\n        return 'Oklahoma';\n    if (valueLower === 'ct')\n        return 'Connecticut';\n    if (valueLower === 'ut')\n        return 'Utah';\n    if (valueLower === 'ia')\n        return 'Iowa';\n    if (valueLower === 'nv')\n        return 'Nevada';\n    if (valueLower === 'ar')\n        return 'Arkansas';\n    if (valueLower === 'ms')\n        return 'Mississippi';\n    if (valueLower === 'ks')\n        return 'Kansas';\n    if (valueLower === 'nm')\n        return 'New Mexico';\n    if (valueLower === 'ne')\n        return 'Nebraska';\n    if (valueLower === 'wv')\n        return 'West Virginia';\n    if (valueLower === 'id')\n        return 'Idaho';\n    if (valueLower === 'hi')\n        return 'Hawaii';\n    if (valueLower === 'nh')\n        return 'New Hampshire';\n    if (valueLower === 'me')\n        return 'Maine';\n    if (valueLower === 'ri')\n        return 'Rhode Island';\n    if (valueLower === 'mt')\n        return 'Montana';\n    if (valueLower === 'de')\n        return 'Delaware';\n    if (valueLower === 'sd')\n        return 'South Dakota';\n    if (valueLower === 'nd')\n        return 'North Dakota';\n    if (valueLower === 'ak')\n        return 'Alaska';\n    if (valueLower === 'vt')\n        return 'Vermont';\n    if (valueLower === 'wy')\n        return 'Wyoming';\n    // For everything else, return the original value unchanged\n    return value;\n}\n// Method 1: Standard dropdown click approach\nasync function tryStandardDropdownClick(button, answerText) {\n    console.log(`🔄 Trying standard dropdown click for: \"${answerText}\"`);\n    // Click the dropdown button\n    button.click();\n    // Wait for dropdown to open\n    await new Promise(resolve => setTimeout(resolve, 700));\n    // Look for dropdown options with comprehensive selectors\n    const dropdownSelectors = [\n        '[role=\"option\"]',\n        '[role=\"listbox\"] li',\n        '[role=\"listbox\"] div',\n        '[role=\"listbox\"] span',\n        '.css-option',\n        'li[data-automation-id*=\"option\"]',\n        'div[data-automation-id*=\"option\"]',\n        'span[data-automation-id*=\"option\"]',\n        'ul li',\n        'ol li',\n        '.dropdown-option',\n        '.select-option',\n        '[class*=\"option\"]',\n        '[class*=\"item\"]',\n        '.menu-item',\n        '[data-testid*=\"option\"]'\n    ];\n    let allOptions = null;\n    // Try each selector until we find options\n    for (const selector of dropdownSelectors) {\n        const options = document.querySelectorAll(selector);\n        if (options.length > 0) {\n            allOptions = options;\n            console.log(`✅ Found ${options.length} dropdown options using selector: ${selector}`);\n            break;\n        }\n    }\n    if (!allOptions || allOptions.length === 0) {\n        console.log(`⚠️ No dropdown options found with standard method`);\n        // Try clicking the button again to close dropdown\n        button.click();\n        return false;\n    }\n    // Try enhanced matching strategies\n    const success = await tryMatchDropdownOptions(allOptions, answerText);\n    if (!success) {\n        // Close dropdown if no match found\n        button.click();\n    }\n    return success;\n}\n// Method 2: Enhanced dropdown click with longer wait and validation\nasync function tryEnhancedDropdownClick(button, answerText) {\n    console.log(`🔄 Trying enhanced dropdown click for: \"${answerText}\"`);\n    // Focus the button first\n    button.focus();\n    await new Promise(resolve => setTimeout(resolve, 200));\n    // Click the dropdown button\n    button.click();\n    // Wait longer for dropdown to open\n    await new Promise(resolve => setTimeout(resolve, 1200));\n    // Validate dropdown is open by checking for common dropdown indicators\n    const dropdownOpen = document.querySelector('[role=\"listbox\"]') ||\n        document.querySelector('.dropdown-menu') ||\n        document.querySelector('[class*=\"dropdown\"][class*=\"open\"]') ||\n        document.querySelector('[aria-expanded=\"true\"]');\n    if (!dropdownOpen) {\n        console.log(`⚠️ Dropdown doesn't appear to be open after enhanced click`);\n        return false;\n    }\n    console.log(`✅ Dropdown appears to be open, looking for options...`);\n    // Use more comprehensive selectors for options\n    const enhancedSelectors = [\n        '[role=\"option\"]',\n        '[role=\"listbox\"] *',\n        '.dropdown-menu li',\n        '.dropdown-menu div',\n        '.select-dropdown li',\n        '.select-dropdown div',\n        '[data-automation-id*=\"option\"]',\n        '[data-testid*=\"option\"]',\n        '[class*=\"option\"]:not(button)',\n        '[class*=\"item\"]:not(button)',\n        'li:not([role=\"presentation\"])',\n        'div[tabindex]',\n        'span[tabindex]'\n    ];\n    let allOptions = null;\n    for (const selector of enhancedSelectors) {\n        const options = document.querySelectorAll(selector);\n        if (options.length > 0) {\n            allOptions = options;\n            console.log(`✅ Found ${options.length} dropdown options using enhanced selector: ${selector}`);\n            break;\n        }\n    }\n    if (!allOptions || allOptions.length === 0) {\n        console.log(`⚠️ No dropdown options found with enhanced method`);\n        button.click();\n        return false;\n    }\n    const success = await tryMatchDropdownOptions(allOptions, answerText);\n    if (!success) {\n        button.click();\n    }\n    return success;\n}\n// Method 3: Keyboard navigation approach\nasync function tryKeyboardDropdownNavigation(button, answerText) {\n    console.log(`🔄 Trying keyboard navigation for: \"${answerText}\"`);\n    // Focus the button\n    button.focus();\n    await new Promise(resolve => setTimeout(resolve, 200));\n    // Open dropdown with Enter or Space\n    button.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter', bubbles: true }));\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // If Enter didn't work, try Space\n    button.dispatchEvent(new KeyboardEvent('keydown', { key: ' ', bubbles: true }));\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // If still not open, try Arrow Down\n    button.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowDown', bubbles: true }));\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // Look for options\n    const options = document.querySelectorAll('[role=\"option\"], [role=\"listbox\"] li, [role=\"listbox\"] div');\n    if (options.length === 0) {\n        console.log(`⚠️ No dropdown options found with keyboard method`);\n        // Try Escape to close\n        button.dispatchEvent(new KeyboardEvent('keydown', { key: 'Escape', bubbles: true }));\n        return false;\n    }\n    console.log(`✅ Found ${options.length} options with keyboard navigation`);\n    // Try to navigate to the correct option using keyboard\n    const answerLower = answerText.toLowerCase();\n    for (let i = 0; i < Math.min(options.length, 20); i++) { // Limit to 20 to avoid infinite loops\n        const option = options[i];\n        const optionText = option.textContent?.trim().toLowerCase() || '';\n        if (optionText.includes(answerLower) || answerLower.includes(optionText)) {\n            // Found potential match, select it\n            option.click();\n            console.log(`✅ Selected option via keyboard navigation: \"${option.textContent?.trim()}\"`);\n            await new Promise(resolve => setTimeout(resolve, 300));\n            return true;\n        }\n        // Navigate to next option\n        button.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowDown', bubbles: true }));\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    console.log(`⚠️ No matching option found via keyboard navigation`);\n    // Try Escape to close\n    button.dispatchEvent(new KeyboardEvent('keydown', { key: 'Escape', bubbles: true }));\n    return false;\n}\n// Method 4: Type-and-Select approach (like Simplify)\nasync function tryWorkdaySpecificDropdown(button, answerText) {\n    console.log(`🔄 Trying type-and-select approach for: \"${answerText}\"`);\n    try {\n        // First, ensure any previous dropdown is closed\n        const escEvent = new KeyboardEvent('keydown', { key: 'Escape', bubbles: true });\n        document.dispatchEvent(escEvent);\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // Scroll button into view and focus\n        button.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        await new Promise(resolve => setTimeout(resolve, 200));\n        button.focus();\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // Open the dropdown\n        console.log(`🔄 Opening dropdown...`);\n        button.click();\n        await new Promise(resolve => setTimeout(resolve, 500));\n        // Look for the search input that appears when dropdown opens\n        console.log(`🔍 Looking for search input...`);\n        const searchInput = await waitForSelector([\n            'input[type=\"text\"]',\n            '[role=\"combobox\"] input',\n            'input[role=\"combobox\"]',\n            'input[aria-expanded=\"true\"]',\n            'input[placeholder*=\"Search\"]',\n            'input[placeholder*=\"Type\"]',\n            'input[placeholder*=\"Select\"]',\n            '.dropdown input',\n            '.select input',\n            '[data-automation-id*=\"searchbox\"] input',\n            '[data-automation-id*=\"input\"] input'\n        ], 1500);\n        if (!searchInput) {\n            console.log(`⚠️ No search input found, trying direct option selection...`);\n            return await tryDirectOptionSelection(answerText);\n        }\n        console.log(`✅ Found search input, typing \"${answerText}\"...`);\n        // Clear any existing value\n        searchInput.value = '';\n        searchInput.dispatchEvent(new Event('input', { bubbles: true }));\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Type the answer character by character (simulate human typing)\n        for (let i = 0; i < answerText.length; i++) {\n            const char = answerText[i];\n            searchInput.value += char;\n            // Trigger input events\n            searchInput.dispatchEvent(new Event('input', { bubbles: true }));\n            searchInput.dispatchEvent(new Event('keyup', { bubbles: true }));\n            // Small delay between keystrokes\n            await new Promise(resolve => setTimeout(resolve, 80));\n        }\n        console.log(`✅ Finished typing, waiting for filtered options...`);\n        // Wait for filtered options to appear\n        await new Promise(resolve => setTimeout(resolve, 800));\n        // Look for filtered options\n        const options = await waitForElements([\n            '[role=\"option\"]',\n            '[role=\"listbox\"] > *',\n            '[data-automation-id*=\"option\"]',\n            '.dropdown-option',\n            '.select-option',\n            'li[tabindex]',\n            'div[tabindex]'\n        ], 1000);\n        if (!options || options.length === 0) {\n            console.log(`⚠️ No filtered options found after typing`);\n            return false;\n        }\n        console.log(`✅ Found ${options.length} filtered options`);\n        // Find the best match from filtered options\n        const bestMatch = findBestMatch(options, answerText);\n        if (!bestMatch) {\n            console.log(`⚠️ No suitable match found in filtered options`);\n            console.log(`📋 Available options:`, Array.from(options).slice(0, 5).map(opt => opt.textContent?.trim()));\n            return false;\n        }\n        console.log(`✅ Found best match: \"${bestMatch.textContent?.trim()}\", clicking...`);\n        // Click the best match\n        const success = await clickOption(bestMatch);\n        if (success) {\n            console.log(`✅ Successfully selected \"${bestMatch.textContent?.trim()}\"`);\n            return true;\n        }\n        return false;\n    }\n    catch (error) {\n        console.log(`⚠️ Error in type-and-select approach:`, error);\n        return false;\n    }\n}\n// Helper function to wait for a selector to appear\nasync function waitForSelector(selectors, timeout = 2000) {\n    const pollInterval = 100;\n    const maxTries = timeout / pollInterval;\n    let tries = 0;\n    return new Promise(resolve => {\n        const interval = setInterval(() => {\n            for (const selector of selectors) {\n                const el = document.querySelector(selector);\n                if (el && el.offsetParent !== null) { // Check if element is visible\n                    clearInterval(interval);\n                    resolve(el);\n                    return;\n                }\n            }\n            if (tries++ >= maxTries) {\n                clearInterval(interval);\n                resolve(null);\n            }\n        }, pollInterval);\n    });\n}\n// Helper function to wait for multiple elements to appear\nasync function waitForElements(selectors, timeout = 2000) {\n    const pollInterval = 100;\n    const maxTries = timeout / pollInterval;\n    let tries = 0;\n    return new Promise(resolve => {\n        const interval = setInterval(() => {\n            for (const selector of selectors) {\n                const elements = document.querySelectorAll(selector);\n                if (elements.length > 0) {\n                    // Filter for visible elements\n                    const visibleElements = Array.from(elements).filter(el => el.offsetParent !== null &&\n                        el.textContent?.trim());\n                    if (visibleElements.length > 0) {\n                        clearInterval(interval);\n                        resolve(visibleElements);\n                        return;\n                    }\n                }\n            }\n            if (tries++ >= maxTries) {\n                clearInterval(interval);\n                resolve(null);\n            }\n        }, pollInterval);\n    });\n}\n// Helper function to find the best match from filtered options\nfunction findBestMatch(options, answerText) {\n    const answerLower = answerText.toLowerCase().trim();\n    const optionsArray = Array.from(options);\n    // Strategy 1: Exact match\n    for (const option of optionsArray) {\n        const optionText = option.textContent?.toLowerCase().trim() || '';\n        if (optionText === answerLower) {\n            return option;\n        }\n    }\n    // Strategy 2: Starts with match\n    for (const option of optionsArray) {\n        const optionText = option.textContent?.toLowerCase().trim() || '';\n        if (optionText.startsWith(answerLower)) {\n            return option;\n        }\n    }\n    // Strategy 3: Contains match\n    for (const option of optionsArray) {\n        const optionText = option.textContent?.toLowerCase().trim() || '';\n        if (optionText.includes(answerLower)) {\n            return option;\n        }\n    }\n    // Strategy 4: Specific mappings\n    for (const option of optionsArray) {\n        const optionText = option.textContent?.toLowerCase().trim() || '';\n        // Phone device type matches\n        if (answerLower === 'mobile' && (optionText.includes('mobile') || optionText.includes('cell'))) {\n            return option;\n        }\n        // Source matches\n        if (answerLower === 'indeed' && optionText.includes('indeed')) {\n            return option;\n        }\n    }\n    // Strategy 5: Return first option if nothing else matches (fallback)\n    if (optionsArray.length > 0) {\n        console.log(`🔄 Using first option as fallback: \"${optionsArray[0].textContent?.trim()}\"`);\n        return optionsArray[0];\n    }\n    return null;\n}\n// Helper function to click an option reliably\nasync function clickOption(option) {\n    try {\n        // Scroll into view\n        option.scrollIntoView({ behavior: 'smooth', block: 'nearest' });\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Method 1: Simple click\n        option.click();\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // Method 2: Focus + click\n        option.focus();\n        await new Promise(resolve => setTimeout(resolve, 100));\n        option.click();\n        await new Promise(resolve => setTimeout(resolve, 200));\n        // Method 3: Mouse events\n        const rect = option.getBoundingClientRect();\n        const centerX = rect.left + rect.width / 2;\n        const centerY = rect.top + rect.height / 2;\n        option.dispatchEvent(new MouseEvent('mousedown', {\n            bubbles: true,\n            clientX: centerX,\n            clientY: centerY\n        }));\n        option.dispatchEvent(new MouseEvent('mouseup', {\n            bubbles: true,\n            clientX: centerX,\n            clientY: centerY\n        }));\n        option.dispatchEvent(new MouseEvent('click', {\n            bubbles: true,\n            clientX: centerX,\n            clientY: centerY\n        }));\n        await new Promise(resolve => setTimeout(resolve, 200));\n        return true;\n    }\n    catch (error) {\n        console.log(`⚠️ Error clicking option:`, error);\n        return false;\n    }\n}\n// Fallback method for dropdowns without search inputs\nasync function tryDirectOptionSelection(answerText) {\n    console.log(`🔄 Trying direct option selection for: \"${answerText}\"`);\n    // Wait a bit for options to load\n    await new Promise(resolve => setTimeout(resolve, 500));\n    // Look for options with standard selectors\n    const options = document.querySelectorAll([\n        '[role=\"option\"]',\n        '[role=\"listbox\"] > *',\n        '[data-automation-id*=\"option\"]',\n        'li[tabindex]',\n        'div[tabindex]'\n    ].join(', '));\n    if (options.length === 0) {\n        console.log(`⚠️ No options found for direct selection`);\n        return false;\n    }\n    console.log(`✅ Found ${options.length} options for direct selection`);\n    const bestMatch = findBestMatch(options, answerText);\n    if (!bestMatch) {\n        console.log(`⚠️ No match found in direct options`);\n        return false;\n    }\n    console.log(`✅ Direct selection match: \"${bestMatch.textContent?.trim()}\"`);\n    return await clickOption(bestMatch);\n}\n// Enhanced option matching with multiple strategies\nasync function tryMatchDropdownOptions(allOptions, answerText) {\n    const answerLower = answerText.toLowerCase().trim();\n    // Enhanced matching strategies with more flexibility\n    const matchingStrategies = [\n        // Exact match (case insensitive)\n        (optionText) => optionText.toLowerCase().trim() === answerLower,\n        // Contains match (case insensitive)\n        (optionText) => optionText.toLowerCase().includes(answerLower),\n        // Starts with match (case insensitive)\n        (optionText) => optionText.toLowerCase().startsWith(answerLower),\n        // Reverse contains (answer contains option)\n        (optionText) => answerLower.includes(optionText.toLowerCase().trim()),\n        // Word boundary match\n        (optionText) => {\n            const optionWords = optionText.toLowerCase().split(/\\s+/);\n            const answerWords = answerLower.split(/\\s+/);\n            return optionWords.some(ow => answerWords.some(aw => aw === ow));\n        },\n        // Partial word match (for abbreviations)\n        (optionText) => {\n            const option = optionText.toLowerCase().trim();\n            // Check if any word in option starts with answer or vice versa\n            const optionWords = option.split(/\\s+/);\n            const answerWords = answerLower.split(/\\s+/);\n            return optionWords.some(ow => answerWords.some(aw => ow.startsWith(aw) || aw.startsWith(ow)));\n        },\n        // Fuzzy match for degree types\n        (optionText) => {\n            const option = optionText.toLowerCase();\n            if (answerLower.includes('bachelor') && option.includes('bachelor'))\n                return true;\n            if (answerLower.includes('master') && option.includes('master'))\n                return true;\n            if (answerLower.includes('doctorate') && (option.includes('doctorate') || option.includes('phd')))\n                return true;\n            if (answerLower.includes('associate') && option.includes('associate'))\n                return true;\n            return false;\n        },\n        // Fuzzy match for proficiency levels\n        (optionText) => {\n            const option = optionText.toLowerCase();\n            if (answerLower.includes('native') && option.includes('native'))\n                return true;\n            if (answerLower.includes('fluent') && (option.includes('fluent') || option.includes('advanced')))\n                return true;\n            if (answerLower.includes('intermediate') && (option.includes('intermediate') || option.includes('conversational')))\n                return true;\n            if (answerLower.includes('basic') && (option.includes('basic') || option.includes('beginner')))\n                return true;\n            return false;\n        }\n    ];\n    // Try each matching strategy\n    for (let i = 0; i < matchingStrategies.length; i++) {\n        const strategy = matchingStrategies[i];\n        console.log(`🔄 Trying matching strategy ${i + 1}/${matchingStrategies.length}`);\n        for (const option of allOptions) {\n            const optionText = option.textContent?.trim() || '';\n            if (optionText && strategy(optionText)) {\n                console.log(`✅ Found matching option: \"${optionText}\" for \"${answerText}\" using strategy ${i + 1}`);\n                // Try multiple click methods\n                const clickSuccess = await tryClickOption(option);\n                if (clickSuccess) {\n                    await new Promise(resolve => setTimeout(resolve, 300));\n                    return true;\n                }\n            }\n        }\n    }\n    // If no match found, log available options for debugging\n    console.log(`⚠️ No matching option found for \"${answerText}\"`);\n    console.log(`📋 Available options:`, Array.from(allOptions).slice(0, 10).map(opt => opt.textContent?.trim()).filter(Boolean));\n    return false;\n}\n// Enhanced option clicking with multiple methods\nasync function tryClickOption(option) {\n    try {\n        // Method 1: Direct click\n        option.click();\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Check if click worked by seeing if option is selected/highlighted\n        if (option.getAttribute('aria-selected') === 'true' ||\n            option.classList.contains('selected') ||\n            option.classList.contains('active')) {\n            return true;\n        }\n        // Method 2: Focus then click\n        option.focus();\n        await new Promise(resolve => setTimeout(resolve, 50));\n        option.click();\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Method 3: Mouse events\n        option.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));\n        option.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));\n        option.dispatchEvent(new MouseEvent('click', { bubbles: true }));\n        await new Promise(resolve => setTimeout(resolve, 100));\n        // Method 4: Keyboard selection\n        option.focus();\n        option.dispatchEvent(new KeyboardEvent('keydown', { key: 'Enter', bubbles: true }));\n        await new Promise(resolve => setTimeout(resolve, 100));\n        return true;\n    }\n    catch (error) {\n        console.log(`⚠️ Error clicking option:`, error);\n        return false;\n    }\n}\n// Step 1: Fill Personal Information\nasync function fillStep1PersonalInfo(profile) {\n    console.log(\"🔄 Starting Step 1: Personal Information\");\n    // Fill Legal Name\n    const firstNameEl = findElement(WORKDAY_STEP1_SELECTORS.FIRST_NAME);\n    if (firstNameEl)\n        fillInput(firstNameEl, profile.first_name);\n    const middleNameEl = findElement(WORKDAY_STEP1_SELECTORS.MIDDLE_NAME);\n    if (middleNameEl && profile.middle_name)\n        fillInput(middleNameEl, profile.middle_name);\n    const lastNameEl = findElement(WORKDAY_STEP1_SELECTORS.LAST_NAME);\n    if (lastNameEl)\n        fillInput(lastNameEl, profile.last_name);\n    // Fill Address\n    const addressEl = findElement(WORKDAY_STEP1_SELECTORS.ADDRESS_LINE_1);\n    if (addressEl)\n        fillInput(addressEl, profile.address_line_1);\n    const cityEl = findElement(WORKDAY_STEP1_SELECTORS.CITY);\n    if (cityEl)\n        fillInput(cityEl, profile.city);\n    const postalEl = findElement(WORKDAY_STEP1_SELECTORS.POSTAL_CODE);\n    if (postalEl)\n        fillInput(postalEl, profile.postal_code);\n    // Fill Phone\n    const phoneEl = findElement(WORKDAY_STEP1_SELECTORS.PHONE_NUMBER);\n    if (phoneEl)\n        fillInput(phoneEl, profile.phone);\n    // Handle Phone Device Type dropdown (set to Mobile)\n    const phoneDeviceTypeEl = findElement(WORKDAY_STEP1_SELECTORS.PHONE_DEVICE_TYPE);\n    if (phoneDeviceTypeEl) {\n        console.log(\"🔄 Setting Phone Device Type to Mobile\");\n        await clickWorkdayDropdown(phoneDeviceTypeEl, \"Mobile\");\n    }\n    // Handle State dropdown\n    const stateEl = findElement(WORKDAY_STEP1_SELECTORS.STATE);\n    if (stateEl && profile.state) {\n        console.log(`🔄 Setting State to ${profile.state}`);\n        await clickWorkdayDropdown(stateEl, profile.state);\n    }\n    // Handle \"How Did You Hear About Us\" dropdown (set to Indeed)\n    const howDidYouHearEl = findElement(WORKDAY_STEP1_SELECTORS.HOW_DID_YOU_HEAR);\n    if (howDidYouHearEl) {\n        console.log(\"🔄 Setting How Did You Hear About Us to Indeed\");\n        await clickWorkdayDropdown(howDidYouHearEl, \"Indeed\");\n    }\n    // Handle Previous Worker question (default to No for most applicants)\n    const previousWorkerNoEl = findElement(WORKDAY_STEP1_SELECTORS.PREVIOUS_WORKER_NO);\n    if (previousWorkerNoEl)\n        clickRadioButton(previousWorkerNoEl);\n    console.log(\"✅ Step 1: Personal Information completed\");\n}\n// Step 2: Fill My Experience - Sequential Approach\nasync function fillStep2MyExperience(profile, completeProfile) {\n    console.log(\"🔄 Starting Step 2: My Experience - Sequential Approach\");\n    // Debug: Log all available data\n    console.log(\"🧠 Available work experiences:\", completeProfile?.work_experiences?.length || 0);\n    console.log(\"🧠 Available education entries:\", completeProfile?.education?.length || 0);\n    console.log(\"🧠 Available skills:\", completeProfile?.profile_skills?.length || 0);\n    // STEP 1: Work Experience First\n    await fillWorkExperienceSection(completeProfile);\n    // STEP 2: Education Second  \n    await fillEducationSection(completeProfile);\n    // STEP 3: Websites Third\n    await fillWebsitesSection(completeProfile);\n    // STEP 4: Languages Fourth\n    await fillLanguagesSection(completeProfile);\n    // STEP 5: Skills Fifth\n    await fillSkillsSection(completeProfile);\n    // STEP 6: Resume Last\n    await fillResumeSection(profile);\n    console.log(\"✅ Step 2: My Experience completed sequentially\");\n}\n// ===== UTILITY FUNCTIONS FOR NEW BLOCK-BASED APPROACH =====\nfunction getBlocks(prefix) {\n    const selector = `div[data-fkit-id^=\"${prefix}-\"]`;\n    console.log(`🔍 Looking for blocks with selector: ${selector}`);\n    const blocks = Array.from(document.querySelectorAll(selector));\n    console.log(`🔍 Found ${blocks.length} blocks for prefix \"${prefix}\"`);\n    // Debug: Show what blocks were found\n    blocks.forEach((block, index) => {\n        console.log(`🔍 Block ${index + 1}:`, {\n            id: block.id || 'no-id',\n            'data-fkit-id': block.dataset.fkitId || 'no-fkit-id',\n            className: block.className || 'no-class',\n            innerHTML: block.innerHTML.substring(0, 200) + '...' // First 200 chars\n        });\n    });\n    // If no blocks found, show what's actually on the page\n    if (blocks.length === 0) {\n        console.log(`🔍 No blocks found. Searching for alternative patterns...`);\n        // Try alternative selectors\n        const alternativeSelectors = [\n            `div[data-fkit-id*=\"${prefix}\"]`, // Contains prefix\n            `[id*=\"${prefix}\"]`, // ID contains prefix\n            `div[class*=\"${prefix}\"]`, // Class contains prefix\n            `div[data-automation-id*=\"${prefix}\"]`, // data-automation-id contains prefix\n            `div[data-fkit-id^=\"${prefix}-\"][data-fkit-id$=\"--null\"]`, // Old empty blocks pattern\n        ];\n        alternativeSelectors.forEach((altSelector, index) => {\n            const altBlocks = document.querySelectorAll(altSelector);\n            console.log(`🔍 Alternative ${index + 1}: ${altSelector} found ${altBlocks.length} elements`);\n            if (altBlocks.length > 0 && altBlocks.length <= 5) {\n                altBlocks.forEach((el, i) => {\n                    const element = el;\n                    console.log(`  ${i + 1}.`, {\n                        tagName: element.tagName,\n                        id: element.id || 'no-id',\n                        'data-fkit-id': element.dataset.fkitId || 'no-fkit-id',\n                        className: element.className || 'no-class'\n                    });\n                });\n            }\n        });\n    }\n    return blocks;\n}\n// New function to group blocks by unique root ID\nfunction getGroupedBlocks(prefix) {\n    console.log(`🔍 Getting grouped blocks for prefix: ${prefix}`);\n    const all = Array.from(document.querySelectorAll(`[data-fkit-id^=\"${prefix}-\"]`));\n    console.log(`🔍 Found ${all.length} total elements with prefix ${prefix}`);\n    const groups = {};\n    for (const el of all) {\n        const id = el.getAttribute(\"data-fkit-id\");\n        const match = id?.match(new RegExp(`^${prefix}-(\\\\d+)`));\n        if (match) {\n            const blockNum = match[1];\n            if (!groups[blockNum])\n                groups[blockNum] = [];\n            groups[blockNum].push(el);\n        }\n    }\n    const result = Object.keys(groups).map(k => ({\n        blockId: `${prefix}-${k}`,\n        elements: groups[k]\n    }));\n    console.log(`🔍 Grouped into ${result.length} unique blocks:`);\n    result.forEach((group, index) => {\n        console.log(`  ${index + 1}. Block ID: ${group.blockId} (${group.elements.length} elements)`);\n    });\n    return result;\n}\n// Helper functions for grouped blocks\nfunction fillBlockInputByGroupId(blockId, field, value) {\n    if (!value)\n        return;\n    console.log(`🔄 Filling input ${field}: \"${value}\" for block ${blockId}`);\n    // Try multiple selector strategies for finding the input\n    const possibleSelectors = [\n        `#${blockId}--${field}`, // Strategy 1: Original approach\n        `[id$=\"--${field}\"]`, // Strategy 2: Ends with field name\n        `[id*=\"${field}\"]`, // Strategy 3: Contains field name\n        `input[data-automation-id*=\"${field}\"]`, // Strategy 4: data-automation-id\n        `input[name*=\"${field}\"]`, // Strategy 5: name attribute\n    ];\n    console.log(`🔍 Trying ${possibleSelectors.length} selector strategies for ${field}:`);\n    let input = null;\n    for (let i = 0; i < possibleSelectors.length; i++) {\n        const selector = possibleSelectors[i];\n        console.log(`  ${i + 1}. ${selector}`);\n        input = document.querySelector(selector);\n        if (input) {\n            console.log(`✅ Found input using strategy ${i + 1}: ${selector}`);\n            break;\n        }\n    }\n    if (input) {\n        console.log(`🔍 Input element found:`, {\n            tagName: input.tagName,\n            id: input.id,\n            name: input.name,\n            type: input.type,\n            placeholder: input.placeholder,\n            value: input.value\n        });\n        // Use comprehensive Workday-compatible method (clears and sets value with focus+blur)\n        setWorkdayInputValue(input, value);\n        console.log(`✅ Filled ${field} with: \"${value}\"`);\n        console.log(`🔍 Final input value: \"${input.value}\"`);\n    }\n    else {\n        console.log(`❌ Input not found for ${field} using any strategy`);\n    }\n}\nfunction fillCheckboxByGroupId(blockId, field, checked) {\n    const checkboxId = `${blockId}--${field}`;\n    const checkbox = document.querySelector(`#${checkboxId}`);\n    console.log(`🔄 Setting checkbox ${field}: ${checked} for block ${blockId}`);\n    console.log(`🔍 Looking for checkbox with ID: ${checkboxId}`);\n    if (checkbox) {\n        if (checkbox.checked !== checked) {\n            checkbox.click();\n            console.log(`✅ Clicked checkbox ${field} to set to: ${checked}`);\n        }\n        else {\n            console.log(`ℹ️ Checkbox ${field} already set to: ${checked}`);\n        }\n    }\n    else {\n        console.log(`⚠️ Checkbox not found for ${field} (ID: ${checkboxId})`);\n    }\n}\n// Clean, working date field function (like before when it was working)\n// Simple, focused date input function based on user's working example\nfunction setDateInputValue(input, value) {\n    input.value = value;\n    input.setAttribute('aria-valuenow', value);\n    input.setAttribute('aria-valuetext', value);\n    input.dispatchEvent(new Event('input', { bubbles: true }));\n    input.dispatchEvent(new Event('change', { bubbles: true }));\n    input.dispatchEvent(new Event('blur', { bubbles: true }));\n}\nasync function fillWorkdayDateInputs(monthInput, yearInput, month, year) {\n    console.log(`📅 Filling date inputs in YEAR-FIRST order: year=\"${year}\", month=\"${month}\"`);\n    // Find the date container that wraps both month and year\n    const dateWrapper = monthInput.closest('[data-automation-id=\"dateInputWrapper\"]');\n    if (!dateWrapper) {\n        console.warn(`⚠️ Could not find dateInputWrapper container`);\n        return;\n    }\n    console.log(`📅 Step 0: Focusing the WHOLE date field container`);\n    dateWrapper.focus();\n    // Wait a moment for focus to register\n    await new Promise((res) => setTimeout(res, 50));\n    // CRITICAL: Fill YEAR FIRST (Simplify's working approach)\n    // This will temporarily show \"Invalid Date\" error, which is expected and OK\n    console.log(`📅 Step 1: Filling YEAR first (will show temp error)`);\n    yearInput.value = year;\n    yearInput.setAttribute('aria-valuenow', year);\n    yearInput.setAttribute('aria-valuetext', year);\n    yearInput.dispatchEvent(new Event('input', { bubbles: true }));\n    yearInput.dispatchEvent(new Event('change', { bubbles: true }));\n    // Wait a moment for the temporary error to render\n    await new Promise((res) => setTimeout(res, 100));\n    // Now fill MONTH (this should resolve the error and make date valid)\n    console.log(`📅 Step 2: Filling MONTH (should resolve the error)`);\n    monthInput.value = month;\n    monthInput.setAttribute('aria-valuenow', month);\n    monthInput.setAttribute('aria-valuetext', month);\n    monthInput.dispatchEvent(new Event('input', { bubbles: true }));\n    monthInput.dispatchEvent(new Event('change', { bubbles: true }));\n    // Wait for React to process both changes\n    await new Promise((res) => setTimeout(res, 100));\n    // CRITICAL: Blur the WHOLE date field container (like user clicking away)\n    console.log(`📅 Step 3: Blurring the WHOLE date field container`);\n    dateWrapper.blur();\n    dateWrapper.dispatchEvent(new Event('blur', { bubbles: true }));\n    dateWrapper.dispatchEvent(new Event('focusout', { bubbles: true }));\n    // Wait for validation to complete\n    await new Promise((res) => setTimeout(res, 200));\n    // Check the final results\n    console.log(`📅 Month input final state: value=\"${monthInput.value}\", aria-valuenow=\"${monthInput.getAttribute('aria-valuenow')}\"`);\n    console.log(`📅 Year input final state: value=\"${yearInput.value}\", aria-valuenow=\"${yearInput.getAttribute('aria-valuenow')}\"`);\n    const wrapperId = dateWrapper?.getAttribute(\"id\") ?? \"unknown\";\n    const wrapperAria = dateWrapper?.getAttribute(\"aria-labelledby\") ?? \"\";\n    console.log(`📅 Final validation check for: ${wrapperId}`);\n    console.log(`📅 aria-labelledby: ${wrapperAria}`);\n    // Check if the container focus/blur approach resolved the validation\n    if (wrapperAria.includes('ERROR')) {\n        console.warn(`⚠️ Date validation error still present after container focus/blur approach`);\n    }\n    else {\n        console.log(`✅ Date filled successfully using CONTAINER FOCUS/BLUR method - error resolved!`);\n    }\n}\n// Self Identity date filling function (adapted from work experience approach)\nasync function fillSelfIdentityDateInputs(monthInput, dayInput, yearInput, month, day, year) {\n    console.log(`📅 Filling Self Identity date inputs in YEAR-FIRST order: year=\"${year}\", month=\"${month}\", day=\"${day}\"`);\n    // Find the date container that wraps month, day, and year\n    const dateWrapper = monthInput.closest('[data-automation-id=\"dateInputWrapper\"]');\n    if (!dateWrapper) {\n        console.warn(`⚠️ Could not find dateInputWrapper container`);\n        return;\n    }\n    console.log(`📅 Step 0: Focusing the WHOLE date field container`);\n    dateWrapper.focus();\n    // Wait a moment for focus to register\n    await new Promise((res) => setTimeout(res, 50));\n    // CRITICAL: Fill YEAR FIRST (same as work experience)\n    // This will temporarily show \"Invalid Date\" error, which is expected and OK\n    console.log(`📅 Step 1: Filling YEAR first (will show temp error)`);\n    yearInput.value = year;\n    yearInput.setAttribute('aria-valuenow', year);\n    yearInput.setAttribute('aria-valuetext', year);\n    yearInput.dispatchEvent(new Event('input', { bubbles: true }));\n    yearInput.dispatchEvent(new Event('change', { bubbles: true }));\n    // Wait a moment for the temporary error to render\n    await new Promise((res) => setTimeout(res, 100));\n    // Now fill MONTH (this should partially resolve the error)\n    console.log(`📅 Step 2: Filling MONTH (should partially resolve the error)`);\n    monthInput.value = month;\n    monthInput.setAttribute('aria-valuenow', month);\n    monthInput.setAttribute('aria-valuetext', month);\n    monthInput.dispatchEvent(new Event('input', { bubbles: true }));\n    monthInput.dispatchEvent(new Event('change', { bubbles: true }));\n    // Wait for React to process the change\n    await new Promise((res) => setTimeout(res, 100));\n    // Finally fill DAY (this should completely resolve the error)\n    console.log(`📅 Step 3: Filling DAY (should fully resolve the error)`);\n    dayInput.value = day;\n    dayInput.setAttribute('aria-valuenow', day);\n    dayInput.setAttribute('aria-valuetext', day);\n    dayInput.dispatchEvent(new Event('input', { bubbles: true }));\n    dayInput.dispatchEvent(new Event('change', { bubbles: true }));\n    // Wait for React to process all changes\n    await new Promise((res) => setTimeout(res, 100));\n    // CRITICAL: Blur the WHOLE date field container (like user clicking away)\n    console.log(`📅 Step 4: Blurring the WHOLE date field container`);\n    dateWrapper.blur();\n    dateWrapper.dispatchEvent(new Event('blur', { bubbles: true }));\n    dateWrapper.dispatchEvent(new Event('focusout', { bubbles: true }));\n    // Wait for validation to complete\n    await new Promise((res) => setTimeout(res, 200));\n    // Check the final results\n    console.log(`📅 Month input final state: value=\"${monthInput.value}\", aria-valuenow=\"${monthInput.getAttribute('aria-valuenow')}\"`);\n    console.log(`📅 Day input final state: value=\"${dayInput.value}\", aria-valuenow=\"${dayInput.getAttribute('aria-valuenow')}\"`);\n    console.log(`📅 Year input final state: value=\"${yearInput.value}\", aria-valuenow=\"${yearInput.getAttribute('aria-valuenow')}\"`);\n    const wrapperId = dateWrapper?.getAttribute(\"id\") ?? \"unknown\";\n    const wrapperAria = dateWrapper?.getAttribute(\"aria-labelledby\") ?? \"\";\n    console.log(`📅 Final validation check for: ${wrapperId}`);\n    console.log(`📅 aria-labelledby: ${wrapperAria}`);\n    // Check if the container focus/blur approach resolved the validation\n    if (wrapperAria.includes('ERROR')) {\n        console.warn(`⚠️ Date validation error still present after container focus/blur approach`);\n    }\n    else {\n        console.log(`✅ Date filled successfully using CONTAINER FOCUS/BLUR method - error resolved!`);\n    }\n}\nasync function fillDateByGroupId(blockId, dateField, date) {\n    if (!date)\n        return;\n    console.log(`🔄 Filling date ${dateField}: \"${date}\" for block ${blockId}`);\n    // Parse MM/YYYY format\n    const [mm, yyyy] = date.split('/');\n    if (!mm || !yyyy) {\n        console.log(`⚠️ Invalid date format: ${date} (expected MM/YYYY)`);\n        return;\n    }\n    // Find inputs using data-automation-id (more reliable)\n    const blockElement = document.querySelector(`[data-fkit-id=\"${blockId}\"]`);\n    if (!blockElement) {\n        console.log(`❌ Could not find block element with ID: ${blockId}`);\n        return;\n    }\n    const monthInput = blockElement.querySelector('[data-automation-id=\"dateSectionMonth-input\"]');\n    const yearInput = blockElement.querySelector('[data-automation-id=\"dateSectionYear-input\"]');\n    console.log(`🔍 Looking for month/year inputs in block ${blockId}`);\n    if (monthInput && yearInput) {\n        await fillWorkdayDateInputs(monthInput, yearInput, mm, yyyy);\n        console.log(`✅ Filled date ${dateField}: ${mm}/${yyyy} (WORKING METHOD)`);\n    }\n    else {\n        console.log(`⚠️ Date inputs not found for ${dateField}`);\n        console.log(`⚠️ Month input found: ${!!monthInput}`);\n        console.log(`⚠️ Year input found: ${!!yearInput}`);\n    }\n}\nfunction fillYearByGroupId(blockId, field, year) {\n    if (!year)\n        return;\n    const inputId = `${blockId}--${field}-dateSectionYear-input`;\n    const input = document.querySelector(`#${inputId}`);\n    console.log(`🔄 Filling year ${field}: \"${year}\" for block ${blockId}`);\n    console.log(`🔍 Looking for year input: ${inputId}`);\n    if (input) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(input, year);\n        console.log(`✅ Filled year ${field}: ${year}`);\n    }\n    else {\n        console.log(`⚠️ Year input not found for ${field} (ID: ${inputId})`);\n    }\n}\nfunction fillBlockInput(block, field, value) {\n    if (!value)\n        return;\n    const blockId = block.dataset.fkitId;\n    console.log(`🔄 Filling input ${field}: \"${value}\"`);\n    console.log(`🔍 Block ID: ${blockId}`);\n    // Try multiple selector strategies for finding the input\n    const possibleSelectors = [\n        `#${blockId}--${field}`, // Strategy 1: Original approach\n        `[id$=\"--${field}\"]`, // Strategy 2: Ends with field name\n        `[id*=\"${field}\"]`, // Strategy 3: Contains field name\n        `input[data-automation-id*=\"${field}\"]`, // Strategy 4: data-automation-id\n        `input[name*=\"${field}\"]`, // Strategy 5: name attribute\n    ];\n    console.log(`🔍 Trying ${possibleSelectors.length} selector strategies for ${field}:`);\n    let input = null;\n    for (let i = 0; i < possibleSelectors.length; i++) {\n        const selector = possibleSelectors[i];\n        console.log(`  ${i + 1}. ${selector}`);\n        // First try within the block\n        input = block.querySelector(selector);\n        if (input) {\n            console.log(`✅ Found input using strategy ${i + 1} (within block): ${selector}`);\n            break;\n        }\n        // Then try globally\n        input = document.querySelector(selector);\n        if (input) {\n            console.log(`✅ Found input using strategy ${i + 1} (globally): ${selector}`);\n            break;\n        }\n    }\n    if (input) {\n        console.log(`🔍 Input element found:`, {\n            tagName: input.tagName,\n            id: input.id,\n            name: input.name,\n            type: input.type,\n            placeholder: input.placeholder,\n            value: input.value\n        });\n        // Use comprehensive Workday-compatible method (clears and sets value with focus+blur)\n        setWorkdayInputValue(input, value);\n        console.log(`✅ Filled ${field} with: \"${value}\"`);\n        console.log(`🔍 Final input value: \"${input.value}\"`);\n    }\n    else {\n        console.log(`❌ Input not found for ${field} using any strategy`);\n        // Debug: Show what inputs are actually in the block\n        const allInputs = block.querySelectorAll('input, textarea, select');\n        console.log(`🔍 DEBUG: Found ${allInputs.length} form elements in block:`);\n        allInputs.forEach((el, index) => {\n            const element = el;\n            console.log(`  ${index + 1}.`, {\n                tagName: element.tagName,\n                id: element.id || 'no-id',\n                name: element.name || 'no-name',\n                type: element.type || 'no-type',\n                placeholder: element.placeholder || 'no-placeholder',\n                className: element.className || 'no-class'\n            });\n        });\n    }\n}\nfunction fillCheckbox(block, field, checked) {\n    const blockId = block.dataset.fkitId;\n    const checkboxId = `${blockId}--${field}`;\n    const checkbox = document.querySelector(`#${checkboxId}`);\n    console.log(`🔄 Setting checkbox ${field}: ${checked}`);\n    console.log(`🔍 Looking for checkbox with ID: ${checkboxId}`);\n    if (checkbox) {\n        if (checkbox.checked !== checked) {\n            checkbox.click();\n            console.log(`✅ Clicked checkbox ${field} to set to: ${checked}`);\n        }\n        else {\n            console.log(`ℹ️ Checkbox ${field} already set to: ${checked}`);\n        }\n    }\n    else {\n        console.log(`⚠️ Checkbox not found for ${field} (ID: ${checkboxId})`);\n    }\n}\nfunction fillDate(block, dateField, date) {\n    if (!date)\n        return;\n    console.log(`🔄 Filling date ${dateField}: \"${date}\"`);\n    // Parse MM/YYYY format\n    const [mm, yyyy] = date.split('/');\n    if (!mm || !yyyy) {\n        console.log(`⚠️ Invalid date format: ${date} (expected MM/YYYY)`);\n        return;\n    }\n    const blockId = block.dataset.fkitId;\n    const monthInputId = `${blockId}--${dateField}-dateSectionMonth-input`;\n    const yearInputId = `${blockId}--${dateField}-dateSectionYear-input`;\n    const monthInput = document.querySelector(`#${monthInputId}`);\n    const yearInput = document.querySelector(`#${yearInputId}`);\n    console.log(`🔍 Looking for month input: ${monthInputId}`);\n    console.log(`🔍 Looking for year input: ${yearInputId}`);\n    if (monthInput && yearInput) {\n        // Fill YEAR FIRST (Workday validates month against year context)\n        setWorkdayInputValue(yearInput, yyyy);\n        // Then fill month (now has year context for validation)\n        setWorkdayInputValue(monthInput, mm);\n        console.log(`✅ Filled date ${dateField}: ${mm}/${yyyy} (year first strategy)`);\n    }\n    else {\n        console.log(`⚠️ Date inputs not found for ${dateField}`);\n        console.log(`⚠️ Month input found: ${!!monthInput}`);\n        console.log(`⚠️ Year input found: ${!!yearInput}`);\n    }\n}\nfunction fillYear(block, field, year) {\n    if (!year)\n        return;\n    const blockId = block.dataset.fkitId;\n    const inputId = `${blockId}--${field}-dateSectionYear-input`;\n    const input = document.querySelector(`#${inputId}`);\n    console.log(`🔄 Filling year ${field}: \"${year}\"`);\n    console.log(`🔍 Looking for year input: ${inputId}`);\n    if (input) {\n        // Use comprehensive Workday-compatible method\n        setWorkdayInputValue(input, year);\n        console.log(`✅ Filled year ${field}: ${year}`);\n    }\n    else {\n        console.log(`⚠️ Year input not found for ${field} (ID: ${inputId})`);\n    }\n}\n// Helper function to fill a single work experience block (updated for grouped blocks)\nasync function fillWorkExperienceBlock(blockGroup, workExp) {\n    console.log(`🔄 Filling work experience block group: ${blockGroup.blockId}`);\n    console.log(`🔄 Block has ${blockGroup.elements.length} elements`);\n    // Fill job title\n    fillBlockInputByGroupId(blockGroup.blockId, 'jobTitle', workExp.position_title);\n    // Fill company name\n    fillBlockInputByGroupId(blockGroup.blockId, 'companyName', workExp.company_name);\n    // Fill location\n    if (workExp.location) {\n        fillBlockInputByGroupId(blockGroup.blockId, 'location', workExp.location);\n    }\n    // Fill start date\n    if (workExp.start_year) {\n        const startMonth = workExp.start_month || '1'; // Default to January if month is missing\n        const startDate = formatWorkdayDate(startMonth, workExp.start_year);\n        console.log(`🔄 Formatted start date: ${startDate} (month: ${startMonth}, year: ${workExp.start_year})`);\n        // Find the actual block element and use fillDate function\n        for (const blockElement of blockGroup.elements) {\n            const monthInput = blockElement.querySelector('[id*=\"startDate\"][data-automation-id=\"dateSectionMonth-input\"]');\n            const yearInput = blockElement.querySelector('[id*=\"startDate\"][data-automation-id=\"dateSectionYear-input\"]');\n            if (monthInput && yearInput) {\n                const [mm, yyyy] = startDate.split('/');\n                console.log(`📅 Found start date inputs, filling: ${mm}/${yyyy}`);\n                await fillWorkdayDateInputs(monthInput, yearInput, mm, yyyy);\n                break;\n            }\n        }\n    }\n    // Handle current job checkbox\n    const isCurrentJob = !workExp.end_month || !workExp.end_year;\n    if (isCurrentJob) {\n        console.log(`🔄 Checking \"currently work here\" for current job`);\n        fillCheckboxByGroupId(blockGroup.blockId, 'currentlyWorkHere', true);\n    }\n    else {\n        // Fill end date for non-current jobs\n        const endMonth = workExp.end_month || '12'; // Default to December if month is missing\n        const endDate = formatWorkdayDate(endMonth, workExp.end_year);\n        console.log(`🔄 Formatted end date: ${endDate} (month: ${endMonth}, year: ${workExp.end_year})`);\n        // Find the actual block element and use fillDate function\n        for (const blockElement of blockGroup.elements) {\n            const monthInput = blockElement.querySelector('[id*=\"endDate\"][data-automation-id=\"dateSectionMonth-input\"]');\n            const yearInput = blockElement.querySelector('[id*=\"endDate\"][data-automation-id=\"dateSectionYear-input\"]');\n            if (monthInput && yearInput) {\n                const [mm, yyyy] = endDate.split('/');\n                console.log(`📅 Found end date inputs, filling: ${mm}/${yyyy}`);\n                await fillWorkdayDateInputs(monthInput, yearInput, mm, yyyy);\n                break;\n            }\n        }\n    }\n    // Fill description\n    if (workExp.description) {\n        fillBlockInputByGroupId(blockGroup.blockId, 'roleDescription', workExp.description);\n    }\n}\n// Helper function to fill a single education block (updated for grouped blocks)\nasync function fillEducationBlock(blockGroup, education) {\n    console.log(`🔄 Filling education block group: ${blockGroup.blockId}`);\n    console.log(`🔄 Block has ${blockGroup.elements.length} elements`);\n    // 🔍 CRITICAL DEBUG: Log the raw education object to see what's actually being passed\n    console.log(`🔍 RAW education object:`, JSON.stringify(education, null, 2));\n    console.log(`🔄 Education data:`, {\n        institution: education.institution_name,\n        degree: education.degree_type,\n        major: education.major,\n        gpa: education.gpa,\n        startYear: education.start_year,\n        endYear: education.end_year,\n        startMonth: education.start_month,\n        endMonth: education.end_month\n    });\n    // Fill school name - try multiple field name variations\n    const schoolName = education.institution_name || education.school_name || education.school || '';\n    if (schoolName) {\n        const schoolInput = blockGroup.elements\n            .map(el => el.querySelector?.('input[id*=\"schoolName\"]') ||\n            el.querySelector?.('input[id*=\"school\"]') ||\n            el.querySelector?.('input[id*=\"institution\"]') ||\n            el.querySelector?.('input[id*=\"university\"]'))\n            .find(Boolean);\n        if (schoolInput) {\n            // Use comprehensive Workday-compatible method\n            setWorkdayInputValue(schoolInput, schoolName);\n            console.log(`✅ Filled school name: ${schoolName}`);\n        }\n        else {\n            console.log(`❌ Could not find school name input in block ${blockGroup.blockId}`);\n        }\n    }\n    // Fill degree type (dropdown) - try multiple field name variations\n    const degreeType = education.degree_type || education.degree || education.level || '';\n    if (degreeType) {\n        const degreeDropdown = blockGroup.elements\n            .map(el => el.querySelector?.('button[id*=\"degree\"]') ||\n            el.querySelector?.('button[id*=\"level\"]') ||\n            el.querySelector?.('div[id*=\"degree\"] button') ||\n            el.querySelector?.('div[role=\"button\"][id*=\"degree\"]'))\n            .find(Boolean);\n        if (degreeDropdown) {\n            console.log(`🔍 Found degree dropdown in block ${blockGroup.blockId}, attempting to select: ${degreeType}`);\n            const success = await clickWorkdayDropdown(degreeDropdown, degreeType);\n            if (success) {\n                console.log(`✅ Selected degree type: ${degreeType}`);\n            }\n            else {\n                console.log(`❌ Failed to select degree type: ${degreeType}`);\n            }\n            await new Promise(resolve => setTimeout(resolve, 500));\n        }\n        else {\n            console.log(`❌ Could not find degree dropdown in block ${blockGroup.blockId}`);\n            // Debug: Show all button elements in this block\n            const allButtons = blockGroup.elements.flatMap(el => Array.from(el.querySelectorAll('button')));\n            console.log(`🔍 DEBUG: Found ${allButtons.length} buttons in block:`, allButtons.map(btn => ({ id: btn.id, text: btn.textContent?.trim() })));\n        }\n    }\n    // Fill field of study/major - try multiselect first, then dropdown, then regular input\n    const fieldOfStudy = education.major || education.field_of_study || education.field || '';\n    if (fieldOfStudy) {\n        let fieldFilled = false;\n        // Add timing delay to ensure elements are rendered\n        await new Promise(resolve => setTimeout(resolve, 500));\n        // Method 1: Try multiselect input (scoped to current block)\n        console.log(`🎓 Attempting multiselect field of study in block ${blockGroup.blockId}...`);\n        const multiselectInput = blockGroup.elements\n            .map(el => el.querySelector?.('div[data-automation-id=\"multiSelectContainer\"] input') ||\n            el.querySelector?.('div[data-automation-id=\"multiSelectContainer\"] input[type=\"text\"]') ||\n            el.querySelector?.('input[placeholder*=\"Search\"]') ||\n            el.querySelector?.('input[id*=\"fieldOfStudy\"]') ||\n            el.querySelector?.('input[aria-label*=\"Field of Study\"]'))\n            .find(Boolean);\n        if (multiselectInput) {\n            console.log(`🔍 Found multiselect input in block ${blockGroup.blockId}, attempting to fill: ${fieldOfStudy}`);\n            fieldFilled = await fillMultiselectFieldOfStudy(multiselectInput, fieldOfStudy);\n            if (fieldFilled) {\n                console.log(`✅ Filled field of study via multiselect: ${fieldOfStudy}`);\n            }\n        }\n        // Method 2: Try dropdown button (fallback)\n        if (!fieldFilled) {\n            const fieldDropdown = blockGroup.elements\n                .map(el => el.querySelector?.('button[id*=\"fieldOfStudy\"]') ||\n                el.querySelector?.('button[id*=\"major\"]') ||\n                el.querySelector?.('button[id*=\"field\"]') ||\n                el.querySelector?.('button[id*=\"study\"]') ||\n                el.querySelector?.('div[id*=\"fieldOfStudy\"] button') ||\n                el.querySelector?.('div[role=\"button\"][id*=\"field\"]'))\n                .find(Boolean);\n            if (fieldDropdown) {\n                console.log(`🔍 Found field of study dropdown in block ${blockGroup.blockId}, attempting to select: ${fieldOfStudy}`);\n                const success = await clickWorkdayDropdown(fieldDropdown, fieldOfStudy);\n                if (success) {\n                    console.log(`✅ Selected field of study via dropdown: ${fieldOfStudy}`);\n                    fieldFilled = true;\n                }\n                else {\n                    console.log(`❌ Failed to select field of study via dropdown: ${fieldOfStudy}`);\n                }\n                await new Promise(resolve => setTimeout(resolve, 500));\n            }\n        }\n        // Method 3: Try regular input (final fallback)\n        if (!fieldFilled) {\n            const fieldInput = blockGroup.elements\n                .map(el => el.querySelector?.('input[id*=\"fieldOfStudy\"]') ||\n                el.querySelector?.('input[id*=\"major\"]') ||\n                el.querySelector?.('input[placeholder*=\"Field of Study\"]') ||\n                el.querySelector?.('input[placeholder*=\"Major\"]'))\n                .find(Boolean);\n            if (fieldInput) {\n                // Use React-compatible method\n                setNativeValue(fieldInput, fieldOfStudy);\n                console.log(`✅ Filled field of study via regular input: ${fieldOfStudy}`);\n                fieldFilled = true;\n            }\n        }\n        // Enhanced debugging if nothing worked\n        if (!fieldFilled) {\n            console.log(`❌ Could not find field of study input in block ${blockGroup.blockId}`);\n            // Debug: Show all elements in this specific block\n            console.warn(\"❌ Field of Study input not found in:\", blockGroup.elements[0]);\n            // Debug: Show all inputs/buttons in this block\n            const allElements = blockGroup.elements.flatMap(el => Array.from(el.querySelectorAll('input, button, div[data-automation-id]')));\n            console.log(`🔍 DEBUG: Found ${allElements.length} elements in education block ${blockGroup.blockId}:`);\n            allElements.forEach((el, index) => {\n                const element = el;\n                console.log(`  ${index + 1}.`, {\n                    tagName: element.tagName,\n                    id: element.id || 'no-id',\n                    type: element.tagName === 'INPUT' ? element.type : 'not-input',\n                    placeholder: element.tagName === 'INPUT' ? element.placeholder : 'not-input',\n                    'data-automation-id': element.getAttribute('data-automation-id') || 'none',\n                    className: element.className || 'no-class',\n                    textContent: element.textContent?.trim().slice(0, 50) || 'no-text'\n                });\n            });\n        }\n    }\n    // Fill GPA - try multiple field name variations\n    const gpa = education.gpa || education.grade_point_average || '';\n    if (gpa) {\n        const gpaInput = blockGroup.elements\n            .map(el => el.querySelector?.('input[id*=\"gpa\"]') ||\n            el.querySelector?.('input[id*=\"grade\"]') ||\n            el.querySelector?.('input[id*=\"gradeAverage\"]') ||\n            el.querySelector?.('input[id*=\"gradePointAverage\"]') ||\n            el.querySelector?.('input[type=\"number\"]'))\n            .find(Boolean);\n        if (gpaInput) {\n            gpaInput.value = gpa.toString();\n            gpaInput.dispatchEvent(new Event('input', { bubbles: true }));\n            gpaInput.dispatchEvent(new Event('change', { bubbles: true }));\n            gpaInput.dispatchEvent(new Event('blur', { bubbles: true }));\n            console.log(`✅ Filled GPA: ${gpa}`);\n        }\n        else {\n            console.log(`❌ Could not find GPA input in block ${blockGroup.blockId}`);\n        }\n    }\n    // Fill start year/date\n    if (education.start_year) {\n        const startYearInput = blockGroup.elements\n            .map(el => el.querySelector?.('input[id*=\"firstYearAttended\"]') ||\n            el.querySelector?.('input[id*=\"startYear\"]') ||\n            el.querySelector?.('input[id*=\"start\"]') ||\n            el.querySelector?.('input[id*=\"from\"]'))\n            .find(Boolean);\n        if (startYearInput) {\n            // Check if this expects a full date or just year\n            const placeholder = startYearInput.placeholder?.toLowerCase() || '';\n            let dateValue;\n            if (placeholder.includes('mm') && placeholder.includes('yyyy')) {\n                // Expects MM/YYYY format\n                const month = education.start_month || 1;\n                dateValue = `${month.toString().padStart(2, '0')}/${education.start_year}`;\n            }\n            else {\n                // Just year\n                dateValue = education.start_year.toString();\n            }\n            // Use comprehensive Workday-compatible method\n            setWorkdayInputValue(startYearInput, dateValue);\n            console.log(`✅ Filled start date: ${dateValue}`);\n        }\n        else {\n            console.log(`❌ Could not find start year input in block ${blockGroup.blockId}`);\n        }\n    }\n    // Fill end year/graduation date\n    if (education.end_year) {\n        const endYearInput = blockGroup.elements\n            .map(el => el.querySelector?.('input[id*=\"lastYearAttended\"]') ||\n            el.querySelector?.('input[id*=\"endYear\"]') ||\n            el.querySelector?.('input[id*=\"graduationYear\"]') ||\n            el.querySelector?.('input[id*=\"graduation\"]') ||\n            el.querySelector?.('input[id*=\"end\"]') ||\n            el.querySelector?.('input[id*=\"to\"]'))\n            .find(Boolean);\n        if (endYearInput) {\n            // Check if this expects a full date or just year\n            const placeholder = endYearInput.placeholder?.toLowerCase() || '';\n            let dateValue;\n            if (placeholder.includes('mm') && placeholder.includes('yyyy')) {\n                // Expects MM/YYYY format\n                const month = education.end_month || 12;\n                dateValue = `${month.toString().padStart(2, '0')}/${education.end_year}`;\n            }\n            else {\n                // Just year\n                dateValue = education.end_year.toString();\n            }\n            // Use comprehensive Workday-compatible method\n            setWorkdayInputValue(endYearInput, dateValue);\n            console.log(`✅ Filled end date: ${dateValue}`);\n        }\n        else {\n            console.log(`❌ Could not find end year input in block ${blockGroup.blockId}`);\n        }\n    }\n    // Debug: Show all input elements in this block for troubleshooting\n    const allInputs = blockGroup.elements.flatMap(el => Array.from(el.querySelectorAll('input, button')));\n    console.log(`🔍 DEBUG: Found ${allInputs.length} inputs/buttons in education block:`, allInputs.map(input => ({\n        id: input.id,\n        type: input.tagName.toLowerCase() === 'input' ? input.type : 'button',\n        placeholder: input.tagName.toLowerCase() === 'input' ? input.placeholder : '',\n        text: input.textContent?.trim() || ''\n    })));\n}\n// Helper function to check if a section has any visible blocks\nfunction isSectionEmpty(prefix) {\n    return getGroupedBlocks(prefix).length === 0;\n}\n// Helper function to find the initial \"Add\" button for a section (scoped to correct section)\nfunction findSectionAddButton(sectionName) {\n    console.log(`🔍 Looking for \"Add\" button for ${sectionName} section`);\n    // First, try to find the section header and scope the search to that container\n    const headers = Array.from(document.querySelectorAll(\"h1, h2, h3, h4, h5, h6, strong, span, div[role='heading']\"));\n    for (const header of headers) {\n        const headerText = header.textContent?.toLowerCase() || \"\";\n        const sectionNameLower = sectionName.toLowerCase();\n        // Check if this header contains the section name\n        if (headerText.includes(sectionNameLower) ||\n            headerText.includes(sectionNameLower.replace(/\\s+/g, '')) ||\n            (sectionName === \"Work Experience\" && headerText.includes(\"experience\")) ||\n            (sectionName === \"Education\" && headerText.includes(\"education\"))) {\n            console.log(`🔍 Found potential section header: \"${headerText.trim()}\"`);\n            // Find the container for this section\n            const container = header.closest(\"section, div, fieldset\") ||\n                header.parentElement?.closest(\"section, div\") ||\n                header.parentElement;\n            if (container) {\n                console.log(`🔍 Searching for Add button within section container`);\n                // Look for buttons within this container\n                const buttons = container.querySelectorAll(\"button\");\n                for (const btn of buttons) {\n                    const buttonText = (btn.textContent || \"\").toLowerCase().trim();\n                    console.log(`🔍 Checking button in section: \"${buttonText}\"`);\n                    // Look for \"Add\" buttons but exclude \"Add Another\"\n                    if (buttonText.includes(\"add\") &&\n                        !buttonText.includes(\"another\") &&\n                        !buttonText.includes(\"more\")) {\n                        console.log(`✅ Found scoped Add button in section '${sectionName}': \"${buttonText}\"`);\n                        return btn;\n                    }\n                }\n            }\n        }\n    }\n    // Fallback: Try section-specific selectors\n    console.log(`🔍 Trying fallback selectors for ${sectionName}`);\n    const sectionSpecificSelectors = [\n        `div[aria-labelledby=\"${sectionName}-section\"] button[data-automation-id=\"add-button\"]`,\n        `div[aria-labelledby=\"${sectionName}\"] button[data-automation-id=\"add-button\"]`,\n        `button[data-automation-id=\"add${sectionName.replace(/\\s+/g, '')}\"]`,\n        `button[data-automation-id=\"${sectionName.toLowerCase().replace(/\\s+/g, '')}-add-button\"]`,\n        `div[data-automation-id=\"${sectionName}\"] button`,\n        `div[data-automation-id=\"${sectionName.toLowerCase()}\"] button`\n    ];\n    for (const selector of sectionSpecificSelectors) {\n        const button = document.querySelector(selector);\n        if (button) {\n            console.log(`✅ Found \"Add\" button using fallback selector: ${selector}`);\n            return button;\n        }\n    }\n    // Final fallback: Look for any Add button with section-specific text\n    const addButtonTexts = [\n        `Add ${sectionName}`,\n        `+ Add ${sectionName}`,\n        \"Add Entry\",\n        \"+ Add Entry\",\n        \"Add\"\n    ];\n    for (const buttonText of addButtonTexts) {\n        const buttons = Array.from(document.querySelectorAll(\"button\"));\n        for (const button of buttons) {\n            const text = (button.textContent || \"\").toLowerCase().trim();\n            if (text === buttonText.toLowerCase() ||\n                (buttonText === \"Add\" && text === \"add\" && !text.includes(\"another\"))) {\n                console.log(`✅ Found \"Add\" button with exact text match: \"${text}\"`);\n                return button;\n            }\n        }\n    }\n    console.warn(`❌ Could not find scoped Add button for section: ${sectionName}`);\n    return null;\n}\n// Helper function to ensure a section is visible by clicking Add if needed\nasync function ensureSectionVisible(sectionName, prefix) {\n    console.log(`🔍 Ensuring ${sectionName} section is visible`);\n    if (isSectionEmpty(prefix)) {\n        console.log(`📝 ${sectionName} section is empty, clicking \"Add\" button`);\n        const addButton = findSectionAddButton(sectionName);\n        if (addButton) {\n            addButton.click();\n            console.log(`✅ Clicked \"Add\" button for ${sectionName}`);\n            await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for DOM to render block\n            // Verify block was created\n            const blocks = getGroupedBlocks(prefix);\n            if (blocks.length > 0) {\n                console.log(`✅ ${sectionName} block successfully created`);\n            }\n            else {\n                console.log(`⚠️ ${sectionName} block not created after clicking Add`);\n            }\n        }\n        else {\n            console.log(`❌ Could not find \"Add\" button for ${sectionName}`);\n        }\n    }\n    else {\n        console.log(`✅ ${sectionName} section already has visible blocks`);\n    }\n}\nasync function clickAddAnother(sectionLabel) {\n    console.log(`🔄 Looking for \"Add Another\" button for section: ${sectionLabel}`);\n    const buttons = Array.from(document.querySelectorAll('button[data-automation-id=\"add-button\"]'));\n    console.log(`🔍 Found ${buttons.length} add buttons`);\n    const labelMatches = new RegExp(sectionLabel, 'i');\n    for (const btn of buttons) {\n        const group = btn.closest('div[role=\"group\"]');\n        const h3 = group?.querySelector('h3')?.textContent;\n        console.log(`🔍 Checking button with section header: \"${h3}\"`);\n        if (h3 && labelMatches.test(h3)) {\n            console.log(`✅ Found matching \"Add Another\" button for ${sectionLabel}`);\n            btn.click();\n            await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for new block to appear\n            return;\n        }\n    }\n    console.log(`⚠️ No \"Add Another\" button found for section: ${sectionLabel}`);\n}\n// Helper function to fill Work Experience section using Add Button Aware logic\nasync function fillWorkExperienceSection(completeProfile) {\n    console.log(\"💼 === STARTING WORK EXPERIENCE SECTION ===\");\n    if (!completeProfile?.work_experiences?.length) {\n        console.log(\"❌ No work experiences found in profile\");\n        return;\n    }\n    const workExperiences = completeProfile.work_experiences.slice(0, 3);\n    console.log(`🧠 Processing ${workExperiences.length} work experiences:`);\n    // 🔍 CRITICAL DEBUG: Log all work experience titles to verify array iteration\n    console.log(`🔍 DEBUG - All work experience titles:`, workExperiences.map((exp) => exp.position_title));\n    console.log(`🔍 DEBUG - All work experience companies:`, workExperiences.map((exp) => exp.company_name));\n    workExperiences.forEach((exp, i) => {\n        console.log(`  ${i + 1}. ${exp.position_title} at ${exp.company_name}`);\n    });\n    // Step 1: Ensure Work Experience section is visible (click Add if needed)\n    await ensureSectionVisible(\"Work Experience\", \"workExperience\");\n    // Step 2: Fill each work experience using improved block-based approach\n    for (let i = 0; i < workExperiences.length; i++) {\n        const workExp = workExperiences[i];\n        console.log(`\\n💼 === FILLING WORK EXPERIENCE ${i + 1}/${workExperiences.length} ===`);\n        console.log(`📋 Job: ${workExp.position_title}`);\n        console.log(`🏢 Company: ${workExp.company_name}`);\n        console.log(`📍 Location: ${workExp.location || 'N/A'}`);\n        console.log(`🗓️ Dates: ${workExp.start_month}/${workExp.start_year} - ${workExp.end_month || 'Present'}/${workExp.end_year || ''}`);\n        // Get current grouped blocks\n        let workBlocks = getGroupedBlocks('workExperience');\n        console.log(`🔍 Found ${workBlocks.length} work experience block groups before processing entry ${i + 1}`);\n        // Only click \"Add Another\" if we need more blocks for THIS entry\n        if (i >= workBlocks.length) {\n            console.log(`🔄 Need more blocks (entry ${i + 1} needs block ${i + 1}, but only ${workBlocks.length} blocks exist). Clicking Add Another.`);\n            await clickAddAnother(\"Work Experience\");\n            await new Promise(resolve => setTimeout(resolve, 500)); // Wait for new block to appear\n            // Refresh blocks after clicking \"Add Another\"\n            workBlocks = getGroupedBlocks('workExperience');\n            console.log(`🔍 Refreshed blocks after Add Another: ${workBlocks.length} work experience block groups`);\n        }\n        // Use the block group at index i\n        const blockGroup = workBlocks[i];\n        if (blockGroup) {\n            console.log(`🔄 Using block group ${i + 1} with ID: ${blockGroup.blockId}`);\n            // Fill the work experience\n            fillWorkExperienceBlock(blockGroup, workExp);\n            console.log(`✅ Filled work experience ${i + 1}/${workExperiences.length}`);\n        }\n        else {\n            console.log(`❌ Could not find work experience block group ${i + 1} after ensuring it exists`);\n        }\n        // Wait between entries\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    console.log(\"✅ Work Experience section completed\");\n}\n// Helper function to fill Education section using Add Button Aware logic\nasync function fillEducationSection(completeProfile) {\n    console.log(\"\\n🎓 === STARTING EDUCATION SECTION ===\");\n    // Wait for work experience to complete\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    if (!completeProfile?.education?.length) {\n        console.log(\"❌ No education entries found in profile\");\n        return;\n    }\n    const educationEntries = completeProfile.education.slice(0, 2);\n    console.log(`🧠 Processing ${educationEntries.length} education entries:`);\n    // 🔍 CRITICAL DEBUG: Log all education entries to verify array iteration\n    console.log(`🔍 DEBUG - All education degrees:`, educationEntries.map((edu) => edu.degree_type || 'Unknown'));\n    console.log(`🔍 DEBUG - All education schools:`, educationEntries.map((edu) => edu.institution_name || 'Unknown'));\n    educationEntries.forEach((edu, i) => {\n        console.log(`  ${i + 1}. ${edu.degree_type || 'Unknown Degree'} from ${edu.institution_name || 'Unknown School'}`);\n    });\n    // Step 1: Ensure Education section is visible (click Add if needed)\n    await ensureSectionVisible(\"Education\", \"education\");\n    // Step 2: Fill each education entry using improved block-based approach\n    for (let i = 0; i < educationEntries.length; i++) {\n        const education = educationEntries[i];\n        console.log(`\\n🎓 === FILLING EDUCATION ${i + 1}/${educationEntries.length} ===`);\n        console.log(`🔍 RAW education entry ${i + 1}:`, JSON.stringify(education, null, 2));\n        console.log(`🏫 School: ${education.institution_name || 'Unknown'}`);\n        console.log(`🎓 Degree: ${education.degree_type || 'Unknown'}`);\n        console.log(`📚 Major: ${education.major || education.field_of_study || 'N/A'}`);\n        console.log(`📊 GPA: ${education.gpa || 'N/A'}`);\n        console.log(`🗓️ Dates: ${education.start_month || 'N/A'}/${education.start_year || 'N/A'} - ${education.end_month || 'N/A'}/${education.end_year || 'N/A'}`);\n        // Get current grouped blocks\n        let educationBlocks = getGroupedBlocks('education');\n        console.log(`🔍 Found ${educationBlocks.length} education block groups before processing entry ${i + 1}`);\n        // Only click \"Add Another\" if we need more blocks for THIS entry\n        if (i >= educationBlocks.length) {\n            console.log(`🔄 Need more blocks (entry ${i + 1} needs block ${i + 1}, but only ${educationBlocks.length} blocks exist). Clicking Add Another.`);\n            await clickAddAnother(\"Education\");\n            await new Promise(resolve => setTimeout(resolve, 500)); // Wait for new block to appear\n            // Refresh blocks after clicking \"Add Another\"\n            educationBlocks = getGroupedBlocks('education');\n            console.log(`🔍 Refreshed blocks after Add Another: ${educationBlocks.length} education block groups`);\n        }\n        // Use the block group at index i\n        const blockGroup = educationBlocks[i];\n        if (blockGroup) {\n            console.log(`🔄 Using block group ${i + 1} with ID: ${blockGroup.blockId}`);\n            // Fill the education (now async)\n            await fillEducationBlock(blockGroup, education);\n            console.log(`✅ Filled education ${i + 1}/${educationEntries.length}`);\n        }\n        else {\n            console.log(`❌ Could not find education block group ${i + 1} after ensuring it exists`);\n        }\n        // Wait between entries\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    console.log(\"✅ Education section completed\");\n}\n// Helper function to fill a single website block (grouped blocks approach)\nfunction fillWebsiteBlock(blockGroup, websiteUrl) {\n    console.log(`🔄 Filling website block group: ${blockGroup.blockId}`);\n    console.log(`🔄 Block has ${blockGroup.elements.length} elements`);\n    // Find the input within this specific block group (scoped search)\n    const input = blockGroup.elements\n        .map(el => el.querySelector?.('input[id$=\"--url\"]') || el.querySelector?.('input[id*=\"webAddress\"]') || el.querySelector?.('input[type=\"text\"]'))\n        .find(Boolean);\n    if (input) {\n        console.log(`🔍 Found scoped input in block ${blockGroup.blockId}:`, {\n            id: input.id,\n            name: input.name,\n            type: input.type,\n            placeholder: input.placeholder\n        });\n        // Use comprehensive Workday-compatible method (clears and sets value with focus+blur)\n        setWorkdayInputValue(input, websiteUrl);\n        console.log(`✅ Website filled in block ${blockGroup.blockId}: ${websiteUrl}`);\n        console.log(`🔍 Final input value: \"${input.value}\"`);\n    }\n    else {\n        console.warn(`❌ Could not find website input in block group ${blockGroup.blockId}`);\n        // Debug: Show what elements are in this block group\n        console.log(`🔍 DEBUG: Block group elements:`, blockGroup.elements.map(el => ({\n            tagName: el.tagName,\n            id: el.id || 'no-id',\n            className: el.className || 'no-class',\n            innerHTML: el.innerHTML.substring(0, 100) + '...'\n        })));\n    }\n}\n// Helper function to fill Websites section using Add Button Aware logic\nasync function fillWebsitesSection(completeProfile) {\n    console.log(\"\\n🌐 === STARTING WEBSITES SECTION ===\");\n    // Wait for education to complete\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    // Get website URLs from portfolio_links\n    const websites = completeProfile?.portfolio_links?.map((link) => link.url).filter((url) => url) || [];\n    if (!websites.length) {\n        console.log(\"❌ No websites found in profile\");\n        return;\n    }\n    console.log(`🧠 Found ${websites.length} websites to add:`, websites);\n    // Step 1: Ensure Websites section is visible (click Add if needed)\n    await ensureSectionVisible(\"Websites\", \"webAddress\");\n    // Step 2: Fill each website using improved block-based approach\n    for (let i = 0; i < websites.length && i < 3; i++) { // Limit to 3 websites\n        const website = websites[i];\n        console.log(`\\n🌐 === FILLING WEBSITE ${i + 1}/${Math.min(websites.length, 3)} ===`);\n        console.log(`🔗 URL: ${website}`);\n        // Get current grouped blocks\n        let websiteBlocks = getGroupedBlocks('webAddress');\n        console.log(`🔍 Found ${websiteBlocks.length} website block groups before processing entry ${i + 1}`);\n        // Only click \"Add Another\" if we need more blocks for THIS entry\n        if (i >= websiteBlocks.length) {\n            console.log(`🔄 Need more blocks (entry ${i + 1} needs block ${i + 1}, but only ${websiteBlocks.length} blocks exist). Clicking Add Another.`);\n            await clickAddAnother(\"Websites\");\n            await new Promise(resolve => setTimeout(resolve, 500)); // Wait for new block to appear\n            // Refresh blocks after clicking \"Add Another\"\n            websiteBlocks = getGroupedBlocks('webAddress');\n            console.log(`🔍 Refreshed blocks after Add Another: ${websiteBlocks.length} website block groups`);\n        }\n        // Use the block group at index i\n        const blockGroup = websiteBlocks[i];\n        if (blockGroup) {\n            console.log(`🔄 Using block group ${i + 1} with ID: ${blockGroup.blockId}`);\n            // Fill the website\n            fillWebsiteBlock(blockGroup, website);\n            console.log(`✅ Filled website ${i + 1}/${Math.min(websites.length, 3)}: ${website}`);\n        }\n        else {\n            console.log(`❌ Could not find website block group ${i + 1} after ensuring it exists`);\n        }\n        // Wait between entries\n        await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    console.log(\"✅ Websites section completed\");\n}\n// Helper function to fill Languages section\nasync function fillLanguagesSection(completeProfile) {\n    console.log(\"\\n🗣️ === STARTING LANGUAGES SECTION ===\");\n    // Wait for websites to complete\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    if (!completeProfile?.profile_languages?.length) {\n        console.log(\"❌ No languages found in profile\");\n        return;\n    }\n    console.log(`🧠 Found ${completeProfile.profile_languages.length} languages to add`);\n    // Languages implementation will come next\n    console.log(\"🚧 Languages section - implementation pending\");\n}\n// Helper function to fill Skills section\nasync function fillSkillsSection(completeProfile) {\n    console.log(\"\\n🎯 === STARTING SKILLS SECTION ===\");\n    const skillsEl = findElement(WORKDAY_STEP2_SELECTORS.SKILLS_INPUT);\n    if (!skillsEl) {\n        console.log(\"❌ Skills input not found\");\n        return;\n    }\n    if (!completeProfile?.profile_skills?.length) {\n        console.log(\"❌ No skills found in profile\");\n        return;\n    }\n    const skills = completeProfile.profile_skills.map((skill) => skill.skill_name);\n    console.log(`🧠 Found ${skills.length} skills:`, skills.slice(0, 5));\n    const success = await fillSkillsInput(skillsEl, skills);\n    if (success) {\n        console.log(\"✅ Skills section completed\");\n    }\n    else {\n        console.log(\"❌ Skills section failed\");\n    }\n}\n// Helper function to fill Resume section using locally stored resume data\nasync function fillResumeSection(profile) {\n    console.log(\"\\n📄 === STARTING RESUME SECTION ===\");\n    const resumeInputEl = findElement(WORKDAY_STEP2_SELECTORS.RESUME_FILE_INPUT);\n    if (!resumeInputEl) {\n        console.log(\"❌ Resume upload element not found\");\n        return;\n    }\n    try {\n        // Check for resume URL in locally stored profile data\n        const resumeUrl = profile.resume_url || profile.resumeUrl || profile.resume;\n        if (!resumeUrl) {\n            console.log(\"⚠️ No resume URL found in local profile data\");\n            console.log(\"🔍 Available profile keys:\", Object.keys(profile));\n            return;\n        }\n        console.log(\"✅ Found resume URL in local profile data\");\n        console.log(\"📄 Resume URL:\", resumeUrl.substring(0, 100) + \"...\");\n        console.log(\"📄 Found resume upload element, attempting upload...\");\n        const success = await handleResumeUpload(resumeInputEl, resumeUrl);\n        if (success) {\n            console.log(\"✅ Resume section completed successfully\");\n        }\n        else {\n            console.log(\"❌ Resume section failed\");\n        }\n    }\n    catch (error) {\n        console.log(\"❌ Error in resume section:\", error);\n    }\n}\n// Main Workday Autofill Function - Entry Point\nasync function autofillWorkday(userData) {\n    console.log(\"🔄 Starting Workday autofill process with user data:\", userData);\n    // 🔍 CRITICAL DEBUG: Log the structure of userData to understand what we're working with\n    console.log(\"🔍 DEBUG - userData keys:\", Object.keys(userData));\n    console.log(\"🔍 DEBUG - userData.education type:\", typeof userData.education);\n    console.log(\"🔍 DEBUG - userData.education_records type:\", typeof userData.education_records);\n    console.log(\"🔍 DEBUG - userData.education sample:\", userData.education?.[0]);\n    console.log(\"🔍 DEBUG - userData.education_records sample:\", userData.education_records?.[0]);\n    try {\n        // Wait for page to fully load\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        // Extract profile data\n        const profile = userData;\n        // 🔍 CRITICAL FIX: Use the normalized data arrays, not the transformed legacy format\n        const completeProfile = {\n            profile: userData,\n            work_experiences: userData.work_experiences || [],\n            education: userData.education_records || [], // Use education_records (normalized) not education (legacy)\n            skills: userData.profile_skills || [],\n            languages: userData.profile_languages || [],\n            certifications: userData.certifications || [],\n            portfolio_links: userData.portfolio_links || []\n        };\n        console.log(\"📋 Profile data:\", {\n            name: `${profile.first_name} ${profile.last_name}`,\n            email: profile.email,\n            phone: profile.phone,\n            hasWorkExperience: !!(completeProfile?.work_experiences?.length),\n            hasEducation: !!(completeProfile?.education?.length),\n            hasSkills: !!(completeProfile?.profile_skills?.length),\n            hasLanguages: !!(completeProfile?.languages?.length)\n        });\n        // Detect current step and fill accordingly\n        const currentStep = detectWorkdayStep();\n        console.log(`🎯 Detected Workday step: ${currentStep}`);\n        switch (currentStep) {\n            case 1:\n                console.log(\"🔄 Processing Step 1: Personal Information\");\n                await fillStep1PersonalInfo(profile);\n                break;\n            case 2:\n                console.log(\"🔄 Processing Step 2: My Experience\");\n                await fillStep2MyExperience(profile, completeProfile);\n                break;\n            case 3:\n                console.log(\"🔄 Processing Step 3: Application Questions\");\n                await fillStep3ApplicationQuestions(profile);\n                break;\n            case 4:\n                console.log(\"🔄 Processing Step 4: Voluntary Disclosures\");\n                await fillStep4VoluntaryDisclosures(profile);\n                break;\n            case 5:\n                console.log(\"🔄 Processing Step 5: Self Identification\");\n                await fillStep5SelfIdentification(profile);\n                break;\n            default:\n                console.log(\"🔄 Processing all available steps\");\n                // Try to fill whatever step is currently visible\n                await tryFillCurrentStep(profile, completeProfile);\n                break;\n        }\n        console.log(\"✅ Workday autofill process completed successfully\");\n    }\n    catch (error) {\n        console.error(\"❌ Error in Workday autofill process:\", error);\n        throw error;\n    }\n}\n// Helper function to detect which Workday step is currently active\nfunction detectWorkdayStep() {\n    // Look for step indicators in the UI\n    const stepIndicators = [\n        { step: 1, selectors: ['[data-automation-id*=\"step1\"]', '[aria-label*=\"Step 1\"]', 'h1:contains(\"Personal Information\")', 'h2:contains(\"Personal Information\")'] },\n        { step: 2, selectors: ['[data-automation-id*=\"step2\"]', '[aria-label*=\"Step 2\"]', 'h1:contains(\"My Experience\")', 'h2:contains(\"My Experience\")'] },\n        { step: 3, selectors: ['[data-automation-id*=\"step3\"]', '[aria-label*=\"Step 3\"]', 'h1:contains(\"Application Questions\")', 'h2:contains(\"Application Questions\")'] },\n        { step: 4, selectors: ['[data-automation-id*=\"step4\"]', '[aria-label*=\"Step 4\"]', 'h1:contains(\"Voluntary\")', 'h2:contains(\"Voluntary\")'] },\n        { step: 5, selectors: ['[data-automation-id*=\"step5\"]', '[aria-label*=\"Step 5\"]', 'h1:contains(\"Self\")', 'h2:contains(\"Self\")'] }\n    ];\n    // Check each step's indicators\n    for (const { step, selectors } of stepIndicators) {\n        for (const selector of selectors) {\n            if (selector.includes(':contains(')) {\n                // Handle :contains() pseudo-selector manually\n                const textToFind = selector.match(/contains\\(\"([^\"]+)\"\\)/)?.[1];\n                if (textToFind) {\n                    const elements = document.querySelectorAll(selector.split(':contains(')[0]);\n                    for (const el of elements) {\n                        if (el.textContent?.includes(textToFind)) {\n                            console.log(`✅ Detected step ${step} by text content: \"${textToFind}\"`);\n                            return step;\n                        }\n                    }\n                }\n            }\n            else {\n                const element = document.querySelector(selector);\n                if (element) {\n                    console.log(`✅ Detected step ${step} by selector: ${selector}`);\n                    return step;\n                }\n            }\n        }\n    }\n    // Fallback: Try to detect by visible form fields\n    if (findElement(WORKDAY_STEP1_SELECTORS.FIRST_NAME)) {\n        console.log(\"✅ Detected step 1 by first name field\");\n        return 1;\n    }\n    if (findElement(WORKDAY_STEP2_SELECTORS.SKILLS_INPUT)) {\n        console.log(\"✅ Detected step 2 by skills field\");\n        return 2;\n    }\n    // Default to step 1 if we can't detect\n    console.log(\"⚠️ Could not detect specific step, defaulting to step 1\");\n    return 1;\n}\n// Helper function to try filling whatever step is currently visible\nasync function tryFillCurrentStep(profile, completeProfile) {\n    console.log(\"🔄 Attempting to fill current visible step\");\n    // Try Step 1 fields\n    if (findElement(WORKDAY_STEP1_SELECTORS.FIRST_NAME)) {\n        console.log(\"📝 Found Step 1 fields, filling...\");\n        await fillStep1PersonalInfo(profile);\n        return;\n    }\n    // Try Step 2 fields\n    if (findElement(WORKDAY_STEP2_SELECTORS.SKILLS_INPUT) || findElement(WORKDAY_STEP2_SELECTORS.WORK_EXPERIENCE_ADD)) {\n        console.log(\"📝 Found Step 2 fields, filling...\");\n        await fillStep2MyExperience(profile, completeProfile);\n        return;\n    }\n    // Try Step 3 fields\n    const step3Button = document.querySelector(WORKDAY_STEP3_SELECTORS.QUESTION_BUTTONS.join(', '));\n    if (step3Button) {\n        console.log(\"📝 Found Step 3 fields, filling...\");\n        await fillStep3ApplicationQuestions(profile);\n        return;\n    }\n    // Try Step 4 fields\n    const step4Button = findElement(WORKDAY_STEP4_SELECTORS.GENDER) || findElement(WORKDAY_STEP4_SELECTORS.ETHNICITY);\n    if (step4Button) {\n        console.log(\"📝 Found Step 4 fields, filling...\");\n        await fillStep4VoluntaryDisclosures(profile);\n        return;\n    }\n    // Try Step 5 fields\n    const step5NameField = findElement(WORKDAY_STEP5_SELECTORS.NAME);\n    const step5DisabilityField = findElement(WORKDAY_STEP5_SELECTORS.DISABILITY_CHECKBOXES);\n    if (step5NameField || step5DisabilityField) {\n        console.log(\"📝 Found Step 5 fields, filling...\");\n        await fillStep5SelfIdentification(profile);\n        return;\n    }\n    console.log(\"ℹ️ No recognizable step fields found\");\n}\n// Step 3: Application Questions\nasync function fillStep3ApplicationQuestions(profile) {\n    console.log(\"\\\\n❓ === STARTING STEP 3: APPLICATION QUESTIONS ===\");\n    // Find all question buttons using the improved selectors\n    const questionButtons = document.querySelectorAll(WORKDAY_STEP3_SELECTORS.QUESTION_BUTTONS.join(', '));\n    console.log(`🔍 Found ${questionButtons.length} application question dropdown(s)`);\n    if (questionButtons.length === 0) {\n        console.log(\"ℹ️ No application questions found on this page\");\n        return;\n    }\n    let questionsAnswered = 0;\n    for (let i = 0; i < questionButtons.length; i++) {\n        const button = questionButtons[i];\n        try {\n            // Get the question text from the legend or label\n            const fieldset = button.closest('fieldset');\n            const legend = fieldset?.querySelector('legend');\n            const questionText = legend?.textContent?.trim() || '';\n            console.log(`\\\\n❓ Question ${i + 1}: \"${questionText}\"`);\n            // Check current state of the question\n            const currentValue = button.textContent?.trim() || '';\n            const isAnswered = currentValue && currentValue !== 'Select One';\n            if (isAnswered) {\n                console.log(`🔄 Question already answered with: \"${currentValue}\" - but REFILLING as requested`);\n            }\n            if (!questionText) {\n                console.log(\"⚠️ Could not extract question text, skipping\");\n                continue;\n            }\n            // Use our existing generic question answer logic\n            const answer = getGenericQuestionAnswer(questionText, profile);\n            if (answer) {\n                console.log(`✅ Found answer: \"${answer}\"`);\n                // ALWAYS click to refill, even if already answered\n                if (isAnswered) {\n                    console.log(`🔄 Overriding existing answer \"${currentValue}\" with \"${answer}\"`);\n                }\n                // Click the dropdown to open it\n                button.click();\n                await new Promise(resolve => setTimeout(resolve, 500));\n                // Find and click the matching option\n                const success = await selectDropdownOption(answer);\n                if (success) {\n                    questionsAnswered++;\n                    console.log(`✅ Successfully ${isAnswered ? 'refilled' : 'answered'} question ${i + 1}`);\n                }\n                else {\n                    console.log(`❌ Failed to select answer for question ${i + 1}`);\n                }\n                // Wait a bit between questions\n                await new Promise(resolve => setTimeout(resolve, 300));\n            }\n            else {\n                console.log(`ℹ️ No predefined answer for this question - skipping (company-specific)`);\n                if (isAnswered) {\n                    console.log(`ℹ️ Leaving existing answer \"${currentValue}\" unchanged`);\n                }\n            }\n        }\n        catch (error) {\n            console.log(`❌ Error processing question ${i + 1}:`, error);\n        }\n    }\n    console.log(`\\\\n✅ Step 3 completed: Answered ${questionsAnswered} out of ${questionButtons.length} questions`);\n}\n// Helper function to select dropdown option by text\nasync function selectDropdownOption(optionText) {\n    // Wait for dropdown to open\n    await new Promise(resolve => setTimeout(resolve, 200));\n    // Look for the option in the dropdown\n    const options = document.querySelectorAll('[role=\"option\"], [role=\"listbox\"] li, .wd-popup li, [data-automation-id*=\"option\"]');\n    for (const option of options) {\n        const text = option.textContent?.trim() || '';\n        // Exact match or contains match\n        if (text === optionText || text.toLowerCase().includes(optionText.toLowerCase())) {\n            console.log(`🎯 Found matching option: \"${text}\"`);\n            option.click();\n            return true;\n        }\n    }\n    console.log(`❌ Could not find option matching: \"${optionText}\"`);\n    console.log(`Available options:`, Array.from(options).map(o => o.textContent?.trim()));\n    return false;\n}\n// Step 4: Voluntary Disclosures\nasync function fillStep4VoluntaryDisclosures(profile) {\n    console.log(\"\\\\n🤐 === STARTING STEP 4: VOLUNTARY DISCLOSURES ===\");\n    console.log(`🔍 Profile voluntary disclosure data:`, {\n        gender: profile.gender,\n        ethnicity: profile.ethnicity,\n        military_veteran: profile.military_veteran\n    });\n    let fieldsAttempted = 0;\n    let fieldsSuccessful = 0;\n    // Gender Selection\n    if (profile.gender) {\n        console.log(`\\\\n👤 Filling Gender: \"${profile.gender}\"`);\n        const genderButton = findElement(WORKDAY_STEP4_SELECTORS.GENDER);\n        if (genderButton) {\n            fieldsAttempted++;\n            const success = await fillVoluntaryDisclosureDropdown(genderButton, profile.gender, 'Gender');\n            if (success)\n                fieldsSuccessful++;\n        }\n        else {\n            console.log(\"❌ Gender dropdown not found\");\n        }\n    }\n    else {\n        console.log(\"ℹ️ No gender data in profile, skipping\");\n    }\n    // Ethnicity Selection  \n    if (profile.ethnicity) {\n        console.log(`\\\\n🌎 Filling Ethnicity: \"${profile.ethnicity}\"`);\n        const ethnicityButton = findElement(WORKDAY_STEP4_SELECTORS.ETHNICITY);\n        if (ethnicityButton) {\n            fieldsAttempted++;\n            const success = await fillVoluntaryDisclosureDropdown(ethnicityButton, profile.ethnicity, 'Ethnicity');\n            if (success)\n                fieldsSuccessful++;\n        }\n        else {\n            console.log(\"❌ Ethnicity dropdown not found\");\n        }\n    }\n    else {\n        console.log(\"ℹ️ No ethnicity data in profile, skipping\");\n    }\n    // Military Veteran Status\n    if (profile.military_veteran !== undefined && profile.military_veteran !== null) {\n        console.log(`\\\\n🎖️ Filling Military Veteran Status: \"${profile.military_veteran}\"`);\n        const veteranButton = findElement(WORKDAY_STEP4_SELECTORS.VETERAN_STATUS);\n        if (veteranButton) {\n            fieldsAttempted++;\n            // Convert database value to Yes/No format\n            const veteranAnswer = (profile.military_veteran === 'yes' || profile.military_veteran === true || profile.military_veteran === 'Yes') ? 'Yes' : 'No';\n            const success = await fillVoluntaryDisclosureDropdown(veteranButton, veteranAnswer, 'Military Veteran');\n            if (success)\n                fieldsSuccessful++;\n        }\n        else {\n            console.log(\"❌ Military veteran dropdown not found\");\n        }\n    }\n    else {\n        console.log(\"ℹ️ No military veteran data in profile, skipping\");\n    }\n    // NOTE: Intentionally skipping Terms & Conditions checkbox as requested\n    console.log(\"ℹ️ Skipping Terms & Conditions checkbox as requested\");\n    console.log(`\\\\n✅ Step 4 completed: ${fieldsSuccessful}/${fieldsAttempted} voluntary disclosure fields filled successfully`);\n}\n// Helper function to fill voluntary disclosure dropdowns\nasync function fillVoluntaryDisclosureDropdown(button, value, fieldName) {\n    try {\n        console.log(`🔄 Attempting to fill ${fieldName} with value: \"${value}\"`);\n        // Check current state\n        const currentValue = button.textContent?.trim() || '';\n        const isAlreadyFilled = currentValue && currentValue !== 'Select One';\n        if (isAlreadyFilled) {\n            console.log(`🔄 ${fieldName} already has value: \"${currentValue}\" - but refilling as requested`);\n        }\n        // Click to open dropdown\n        button.click();\n        await new Promise(resolve => setTimeout(resolve, 600)); // Extra time for dropdown to load\n        // Look for matching option with flexible matching\n        const success = await selectVoluntaryDisclosureOption(value, fieldName);\n        if (success) {\n            console.log(`✅ Successfully ${isAlreadyFilled ? 'refilled' : 'filled'} ${fieldName}`);\n            return true;\n        }\n        else {\n            console.log(`❌ Failed to select ${fieldName} option`);\n            return false;\n        }\n    }\n    catch (error) {\n        console.log(`❌ Error filling ${fieldName}:`, error);\n        return false;\n    }\n}\n// Helper function to select voluntary disclosure options with smart matching\nasync function selectVoluntaryDisclosureOption(targetValue, fieldName) {\n    // Wait for dropdown to fully load\n    await new Promise(resolve => setTimeout(resolve, 300));\n    // Look for options in various possible containers\n    const optionSelectors = [\n        '[role=\"option\"]',\n        '[role=\"listbox\"] li',\n        '.wd-popup li',\n        '[data-automation-id*=\"option\"]',\n        '[data-automation-id*=\"menuItem\"]',\n        'li[role=\"menuitem\"]',\n        'div[role=\"menuitem\"]'\n    ];\n    const options = document.querySelectorAll(optionSelectors.join(', '));\n    console.log(`🔍 Found ${options.length} dropdown options for ${fieldName}`);\n    if (options.length === 0) {\n        console.log(`❌ No dropdown options found for ${fieldName}`);\n        return false;\n    }\n    // Smart matching logic for different field types\n    for (const option of options) {\n        const optionText = option.textContent?.trim() || '';\n        if (matchesVoluntaryDisclosureValue(optionText, targetValue, fieldName)) {\n            console.log(`🎯 Found matching option for ${fieldName}: \"${optionText}\"`);\n            option.click();\n            await new Promise(resolve => setTimeout(resolve, 200));\n            return true;\n        }\n    }\n    console.log(`❌ No matching option found for ${fieldName} value: \"${targetValue}\"`);\n    console.log(`Available ${fieldName} options:`, Array.from(options).map(o => `\"${o.textContent?.trim()}\"`));\n    return false;\n}\n// Smart matching for voluntary disclosure values\nfunction matchesVoluntaryDisclosureValue(optionText, targetValue, fieldName) {\n    const option = optionText.toLowerCase().trim();\n    const target = targetValue.toLowerCase().trim();\n    console.log(`🔍 Matching: \"${target}\" against option: \"${option}\" for ${fieldName}`);\n    // Exact match first\n    if (option === target) {\n        console.log(`✅ Exact match found`);\n        return true;\n    }\n    // Field-specific matching rules\n    switch (fieldName.toLowerCase()) {\n        case 'gender':\n            // FIXED: Proper word-boundary matching for gender\n            if (target === 'male' && (option === 'male' || option.startsWith('male ') || option.endsWith(' male'))) {\n                console.log(`✅ Male gender match found`);\n                return true;\n            }\n            if (target === 'female' && (option === 'female' || option.startsWith('female ') || option.endsWith(' female'))) {\n                console.log(`✅ Female gender match found`);\n                return true;\n            }\n            if ((target.includes('other') || target.includes('non-binary')) && (option.includes('other') || option.includes('non-binary'))) {\n                console.log(`✅ Other/Non-binary gender match found`);\n                return true;\n            }\n            if ((target.includes('prefer not') || target.includes('decline')) && (option.includes('prefer not') || option.includes('decline'))) {\n                console.log(`✅ Prefer not to answer gender match found`);\n                return true;\n            }\n            break;\n        case 'ethnicity':\n            // Common ethnicity mappings\n            if (target.includes('hispanic') && option.includes('hispanic'))\n                return true;\n            if (target.includes('latino') && option.includes('latino'))\n                return true;\n            if (target.includes('white') && option.includes('white'))\n                return true;\n            if (target.includes('black') && option.includes('black'))\n                return true;\n            if (target.includes('african') && option.includes('african'))\n                return true;\n            if (target.includes('asian') && option.includes('asian'))\n                return true;\n            if (target.includes('native') && option.includes('native'))\n                return true;\n            if (target.includes('pacific') && option.includes('pacific'))\n                return true;\n            if ((target.includes('prefer not') || target.includes('decline')) && (option.includes('prefer not') || option.includes('decline')))\n                return true;\n            break;\n        case 'military veteran':\n            // Specific veteran status matching for Workday options\n            if (target === 'yes') {\n                // For YES - match protected veteran or general veteran identification\n                if (option.includes('protected veteran') || option.includes('yes')) {\n                    console.log(`✅ Veteran status YES match found`);\n                    return true;\n                }\n            }\n            if (target === 'no') {\n                // For NO - ONLY match \"I am not a veteran\" (exact phrase match)\n                if (option.includes('i am not a veteran') || option === 'not a veteran') {\n                    console.log(`✅ Veteran status NO match found`);\n                    return true;\n                }\n                // Explicitly REJECT the \"veteran, just not protected\" option for NO answers\n                if (option.includes('veteran, just not') || option.includes('just not a protected')) {\n                    console.log(`❌ Rejecting \"veteran but not protected\" option for NO answer`);\n                    return false;\n                }\n            }\n            break;\n    }\n    console.log(`❌ No match found for \"${target}\" against \"${option}\"`);\n    return false;\n}\n// React-compatible input value setter for Workday date fields\nfunction setReactInputValue(input, value) {\n    if (!input)\n        return;\n    console.log(`🔄 Setting React input value: \"${value}\" on ${input.id}`);\n    // Use native setter to properly sync with React state\n    const nativeSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')?.set;\n    if (nativeSetter) {\n        nativeSetter.call(input, value);\n    }\n    else {\n        input.value = value;\n    }\n    // Trigger both input and change events for React\n    input.dispatchEvent(new Event('input', { bubbles: true }));\n    input.dispatchEvent(new Event('change', { bubbles: true }));\n    console.log(`✅ React input value set and events fired: \"${input.value}\"`);\n}\nasync function fillStep5SelfIdentification(profile) {\n    console.log(\"\\n🆔 === STARTING STEP 5: SELF IDENTIFICATION ===\");\n    let fieldsAttempted = 0;\n    let fieldsSuccessful = 0;\n    // Fill Name Field\n    console.log(\"\\n👤 Filling Name field...\");\n    const nameInput = findElement(WORKDAY_STEP5_SELECTORS.NAME);\n    if (nameInput && profile.first_name) {\n        fieldsAttempted++;\n        const fullName = `${profile.first_name}${profile.last_name ? ' ' + profile.last_name : ''}`.trim();\n        console.log(`📝 Setting name: \"${fullName}\"`);\n        try {\n            // Focus, clear, and set value with blur\n            nameInput.focus();\n            setWorkdayInputValue(nameInput, fullName);\n            nameInput.blur();\n            fieldsSuccessful++;\n            console.log(\"✅ Name field filled successfully\");\n            // Wait a bit for validation\n            await new Promise(resolve => setTimeout(resolve, 300));\n        }\n        catch (error) {\n            console.log(\"❌ Error filling name field:\", error);\n        }\n    }\n    else if (!nameInput) {\n        console.log(\"❌ Name input field not found\");\n    }\n    else {\n        console.log(\"ℹ️ No name data in profile, skipping\");\n    }\n    // Fill Date Field with Today's Date\n    console.log(\"\\n📅 Filling Date field with today's date...\");\n    const monthInput = findElement(WORKDAY_STEP5_SELECTORS.DATE_MONTH);\n    const dayInput = findElement(WORKDAY_STEP5_SELECTORS.DATE_DAY);\n    const yearInput = findElement(WORKDAY_STEP5_SELECTORS.DATE_YEAR);\n    if (monthInput && dayInput && yearInput) {\n        fieldsAttempted++;\n        try {\n            // Get today's date\n            const today = new Date();\n            const month = String(today.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\n            const day = String(today.getDate()).padStart(2, '0');\n            const year = String(today.getFullYear());\n            console.log(`📅 Setting today's date: ${month}/${day}/${year}`);\n            console.log(`📅 Debug - Month: ${month}, Day: ${day}, Year: ${year}`);\n            // Use the same approach as work experience fillWorkdayDateInputs\n            await fillSelfIdentityDateInputs(monthInput, dayInput, yearInput, month, day, year);\n            fieldsSuccessful++;\n            console.log(`✅ Date field filled successfully: ${month}/${day}/${year}`);\n        }\n        catch (error) {\n            console.log(\"❌ Error filling date field:\", error);\n        }\n    }\n    else {\n        console.log(\"❌ Date input fields not found (month/day/year)\");\n    }\n    // Check Language Dropdown (usually pre-filled, but log status)\n    console.log(\"\\n🌐 Checking Language dropdown...\");\n    const languageButton = findElement(WORKDAY_STEP5_SELECTORS.LANGUAGE_DROPDOWN);\n    if (languageButton) {\n        const currentLanguage = languageButton.textContent?.trim() || '';\n        console.log(`ℹ️ Language dropdown current value: \"${currentLanguage}\"`);\n        if (currentLanguage && currentLanguage !== 'Select One') {\n            console.log(\"✅ Language already selected, leaving as-is\");\n        }\n        else {\n            console.log(\"ℹ️ Language not selected, but we'll leave it for user to choose\");\n        }\n    }\n    else {\n        console.log(\"❌ Language dropdown not found\");\n    }\n    // Fill Disability Status (use profile preference or default to \"No\")\n    console.log(\"\\n♿ Filling Disability Status...\");\n    // Default to \"No\" if no preference specified\n    let disabilityChoice = 'no'; // Default\n    if (profile.disability_status) {\n        disabilityChoice = profile.disability_status.toLowerCase();\n    }\n    console.log(`🔍 Disability status choice: \"${disabilityChoice}\"`);\n    let targetCheckbox = null;\n    // Find the right checkbox based on user preference\n    // First try direct approach by finding all checkboxes in the disability fieldset\n    const allDisabilityCheckboxes = document.querySelectorAll('fieldset[data-automation-id=\"disabilityStatus-CheckboxGroup\"] input[type=\"checkbox\"]');\n    console.log(`🔍 Found ${allDisabilityCheckboxes.length} disability checkboxes`);\n    // Log all available options\n    if (allDisabilityCheckboxes.length > 0) {\n        console.log(\"🔍 Available disability options:\");\n        allDisabilityCheckboxes.forEach((checkbox, index) => {\n            const label = document.querySelector(`label[for=\"${checkbox.id}\"]`);\n            const labelText = label?.textContent?.trim() || 'No label found';\n            console.log(`  ${index + 1}. ${labelText}`);\n        });\n    }\n    if (disabilityChoice === 'yes' || disabilityChoice === 'true' || disabilityChoice === 'have') {\n        console.log(\"🎯 Looking for 'Yes' disability option (first checkbox)\");\n        targetCheckbox = allDisabilityCheckboxes[0]; // Usually first option\n    }\n    else if (disabilityChoice === 'no answer' || disabilityChoice === 'prefer not' || disabilityChoice === 'decline') {\n        console.log(\"🎯 Looking for 'Do not want to answer' option (third checkbox)\");\n        targetCheckbox = allDisabilityCheckboxes[2]; // Usually third option\n    }\n    else {\n        // Default to \"No\" - usually second checkbox\n        console.log(\"🎯 Looking for 'No' disability option (second checkbox - default)\");\n        targetCheckbox = allDisabilityCheckboxes[1]; // Usually second option\n    }\n    if (targetCheckbox) {\n        fieldsAttempted++;\n        console.log(\"✅ Found target disability checkbox\");\n        try {\n            // Check if it's already checked\n            const isChecked = targetCheckbox.checked;\n            if (isChecked) {\n                console.log(\"✅ Disability status already selected correctly\");\n                fieldsSuccessful++;\n            }\n            else {\n                console.log(\"🔄 Clicking disability status checkbox...\");\n                // Focus and click the checkbox\n                targetCheckbox.focus();\n                await clickWorkdayCheckbox(targetCheckbox, true);\n                await new Promise(resolve => setTimeout(resolve, 300));\n                // Verify it was checked\n                const nowChecked = targetCheckbox.checked;\n                if (nowChecked) {\n                    fieldsSuccessful++;\n                    console.log(\"✅ Disability status checkbox selected successfully\");\n                }\n                else {\n                    console.log(\"❌ Disability status checkbox was not checked after click\");\n                }\n            }\n        }\n        catch (error) {\n            console.log(\"❌ Error clicking disability status checkbox:\", error);\n        }\n    }\n    else {\n        console.log(\"❌ Could not find disability status checkbox - no checkboxes available\");\n    }\n    console.log(`\\n✅ Step 5 completed: ${fieldsSuccessful}/${fieldsAttempted} fields filled successfully`);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.autofillRouter = autofillRouter;\nexports.autofillRouterSync = autofillRouterSync;\n// @ts-ignore\nconst workday_1 = require(\"./autofill/workday\");\nconsole.log(\"AutofillEngine module loaded\");\n/**\n * Enhanced autofill router that detects the current platform and routes to appropriate autofill handler\n * Supports LinkedIn, Workday, and other job application platforms\n * @param userData - User profile data for autofilling forms\n */\nasync function autofillRouter(userData) {\n    console.log(\"AutofillRouter called with user data:\", userData);\n    const hostname = window.location.hostname.toLowerCase();\n    const pathname = window.location.pathname.toLowerCase();\n    const fullUrl = window.location.href.toLowerCase();\n    console.log(\"Current page:\", { hostname, pathname, fullUrl: window.location.href });\n    try {\n        // Workday platform detection (enhanced)\n        if (isWorkdayPlatform(hostname, pathname, fullUrl)) {\n            console.log(\"✅ Detected Workday application page, running enhanced Workday autofill\");\n            await (0, workday_1.autofillWorkday)(userData);\n            console.log(\"✅ Workday autofill completed successfully\");\n            return;\n        }\n        // LinkedIn platform detection\n        if (isLinkedInPlatform(hostname, pathname)) {\n            console.log(\"✅ Detected LinkedIn page - LinkedIn autofill handled by existing automation\");\n            // LinkedIn autofill is handled by the existing automation system\n            // No additional action needed here as the \"Autofill This Page\" button\n            // on LinkedIn is primarily for the automation system\n            console.log(\"ℹ️ LinkedIn autofill delegated to existing automation system\");\n            return;\n        }\n        // Other platforms can be added here\n        // if (isGreenhousePlatform(hostname, pathname)) {\n        //   await autofillGreenhouse(userData);\n        //   return;\n        // }\n        // if (isLeverPlatform(hostname, pathname)) {\n        //   await autofillLever(userData);\n        //   return;\n        // }\n        console.warn(\"⚠️ No specific autofill handler defined for this site:\", hostname);\n        console.log(\"ℹ️ Attempting generic form autofill...\");\n        // Generic autofill fallback for unknown platforms\n        await attemptGenericAutofill(userData);\n    }\n    catch (error) {\n        console.error(\"❌ Error in autofill router:\", error);\n        throw error; // Re-throw to be handled by the message listener\n    }\n}\n/**\n * Detects if the current page is a Workday application platform\n * @param hostname - Current page hostname\n * @param pathname - Current page pathname\n * @param fullUrl - Full URL for additional checks\n * @returns boolean indicating if this is a Workday platform\n */\nfunction isWorkdayPlatform(hostname, pathname, fullUrl) {\n    // Common Workday hostname patterns\n    const workdayHostnamePatterns = [\n        'workday.com',\n        '.workday.com',\n        'myworkday.com',\n        '.myworkday.com',\n        'workdaysuccessfactors.com'\n    ];\n    // Common Workday URL path patterns\n    const workdayPathPatterns = [\n        '/workday',\n        '/careers',\n        '/job',\n        '/apply',\n        '/application',\n        '/candidate'\n    ];\n    // Check hostname patterns\n    const isWorkdayHostname = workdayHostnamePatterns.some(pattern => hostname.includes(pattern));\n    // Check path patterns\n    const isWorkdayPath = workdayPathPatterns.some(pattern => pathname.includes(pattern));\n    // Check for Workday-specific URL parameters or fragments\n    const hasWorkdayParams = fullUrl.includes('workday') ||\n        fullUrl.includes('wd-') ||\n        fullUrl.includes('wday');\n    const isWorkday = isWorkdayHostname || (isWorkdayPath && hasWorkdayParams);\n    if (isWorkday) {\n        console.log(\"🎯 Workday platform detected:\", {\n            hostname: isWorkdayHostname,\n            path: isWorkdayPath,\n            params: hasWorkdayParams\n        });\n    }\n    return isWorkday;\n}\n/**\n * Detects if the current page is LinkedIn\n * @param hostname - Current page hostname\n * @param pathname - Current page pathname\n * @returns boolean indicating if this is LinkedIn\n */\nfunction isLinkedInPlatform(hostname, pathname) {\n    const isLinkedIn = hostname.includes('linkedin.com');\n    if (isLinkedIn) {\n        console.log(\"🎯 LinkedIn platform detected\");\n    }\n    return isLinkedIn;\n}\n/**\n * Attempts generic form autofill for unknown platforms\n * Uses common field selectors and patterns\n * @param userData - User profile data\n */\nasync function attemptGenericAutofill(userData) {\n    console.log(\"🔄 Attempting generic autofill for unknown platform\");\n    // Generic field selectors for common form fields\n    const genericSelectors = {\n        firstName: [\n            'input[name*=\"first\" i][name*=\"name\" i]',\n            'input[placeholder*=\"first name\" i]',\n            'input[id*=\"first\" i][id*=\"name\" i]'\n        ],\n        lastName: [\n            'input[name*=\"last\" i][name*=\"name\" i]',\n            'input[placeholder*=\"last name\" i]',\n            'input[id*=\"last\" i][id*=\"name\" i]'\n        ],\n        email: [\n            'input[type=\"email\"]',\n            'input[name*=\"email\" i]',\n            'input[placeholder*=\"email\" i]'\n        ],\n        phone: [\n            'input[type=\"tel\"]',\n            'input[name*=\"phone\" i]',\n            'input[placeholder*=\"phone\" i]'\n        ]\n    };\n    let filledFields = 0;\n    // Try to fill basic fields\n    for (const [fieldType, selectors] of Object.entries(genericSelectors)) {\n        for (const selector of selectors) {\n            const element = document.querySelector(selector);\n            if (element && !element.value) {\n                let value = '';\n                switch (fieldType) {\n                    case 'firstName':\n                        value = userData.first_name || '';\n                        break;\n                    case 'lastName':\n                        value = userData.last_name || '';\n                        break;\n                    case 'email':\n                        value = userData.email || '';\n                        break;\n                    case 'phone':\n                        value = userData.phone || '';\n                        break;\n                }\n                if (value) {\n                    element.value = value;\n                    element.dispatchEvent(new Event('input', { bubbles: true }));\n                    element.dispatchEvent(new Event('change', { bubbles: true }));\n                    filledFields++;\n                    console.log(`✅ Filled ${fieldType} field with generic selector`);\n                    break; // Move to next field type\n                }\n            }\n        }\n    }\n    if (filledFields > 0) {\n        console.log(`✅ Generic autofill completed: ${filledFields} fields filled`);\n    }\n    else {\n        console.log(\"⚠️ No compatible fields found for generic autofill\");\n    }\n}\n// Legacy synchronous wrapper for backward compatibility\nfunction autofillRouterSync(userData) {\n    autofillRouter(userData).catch(error => {\n        console.error(\"Error in async autofill router:\", error);\n    });\n}\n","\"use strict\";\n/**\n * Automation control module for the LinkedIn Easy Apply extension\n * Handles starting, stopping, and managing the automation lifecycle\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stopAutomation = exports.startAutomation = void 0;\nconst core_1 = require(\"./core\");\n// Global reference objects that persist across start/stop cycles\nlet globalIsRunningRef = null;\nlet globalContinuingRef = null;\n/**\n * Starts the automation process\n * Sets up the main automation interval and initializes state management\n * @param state - The automation state object\n * @param setIsRunning - Function to update the isRunning state\n * @param setContinuing - Function to update the continuing state\n */\nconst startAutomation = (state, setIsRunning, setContinuing) => {\n    // Update state first\n    setIsRunning(true);\n    setContinuing(false);\n    console.log(\"🚀 Starting automation, state.isRunning:\", state.isRunning);\n    chrome.storage.local.set({ isAutomationRunning: true });\n    // Clear any existing interval\n    if (state.automationInterval) {\n        console.log(\"🧹 Clearing existing automation interval\");\n        window.clearInterval(state.automationInterval);\n        state.automationInterval = null;\n    }\n    // Create or reuse reference objects for state management\n    if (!globalIsRunningRef) {\n        globalIsRunningRef = { current: state.isRunning };\n    }\n    else {\n        globalIsRunningRef.current = state.isRunning;\n    }\n    if (!globalContinuingRef) {\n        globalContinuingRef = { current: state.continuing };\n    }\n    else {\n        globalContinuingRef.current = state.continuing;\n    }\n    const setContinuingInternal = (value) => {\n        setContinuing(value);\n        if (globalContinuingRef) {\n            globalContinuingRef.current = value;\n        }\n    };\n    state.automationInterval = window.setInterval(async () => {\n        // Always check the current state values\n        if (!state.isRunning) {\n            console.log(\"⏹️ Automation stopped, clearing interval\");\n            if (state.automationInterval) {\n                window.clearInterval(state.automationInterval);\n                state.automationInterval = null;\n            }\n            return;\n        }\n        // Update reference objects with current state\n        if (globalIsRunningRef)\n            globalIsRunningRef.current = state.isRunning;\n        if (globalContinuingRef)\n            globalContinuingRef.current = state.continuing;\n        if (!state.continuing && globalIsRunningRef && globalContinuingRef) {\n            await (0, core_1.processApplication)(globalIsRunningRef, globalContinuingRef, state.appliedJobIds, setContinuingInternal);\n        }\n    }, 2000);\n    console.log(\"✅ Automation interval started with ID:\", state.automationInterval);\n};\nexports.startAutomation = startAutomation;\n/**\n * Stops the automation process\n * Cleans up intervals and resets state\n * @param state - The automation state object\n * @param setIsRunning - Function to update the isRunning state\n * @param setContinuing - Function to update the continuing state\n */\nconst stopAutomation = (state, setIsRunning, setContinuing) => {\n    console.log(\"🛑 Stopping automation, current interval ID:\", state.automationInterval);\n    console.log(\"🛑 Current state.isRunning:\", state.isRunning);\n    // Update state first\n    setIsRunning(false);\n    setContinuing(false);\n    // CRITICAL: Update global reference objects immediately so running processes stop\n    if (globalIsRunningRef) {\n        globalIsRunningRef.current = false;\n        console.log(\"🛑 Updated globalIsRunningRef.current:\", globalIsRunningRef.current);\n    }\n    if (globalContinuingRef) {\n        globalContinuingRef.current = false;\n        console.log(\"🛑 Updated globalContinuingRef.current:\", globalContinuingRef.current);\n    }\n    console.log(\"🛑 Updated state.isRunning:\", state.isRunning);\n    // Clear the interval\n    if (state.automationInterval) {\n        console.log(\"🧹 Clearing automation interval:\", state.automationInterval);\n        window.clearInterval(state.automationInterval);\n        state.automationInterval = null;\n        console.log(\"✅ Interval cleared, state.automationInterval:\", state.automationInterval);\n    }\n    else {\n        console.log(\"⚠️ No automation interval to clear\");\n    }\n    // Store the stopped state\n    chrome.storage.local.set({ isAutomationRunning: false });\n    console.log(\"✅ Automation stopped and state saved\");\n};\nexports.stopAutomation = stopAutomation;\n","\"use strict\";\n/**\n * Automation core module for the LinkedIn Easy Apply extension\n * Contains the main application processing logic that orchestrates the entire job application flow\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.processApplication = void 0;\nconst types_1 = require(\"../../types\");\nconst utils_1 = require(\"../utils\");\nconst forms_1 = require(\"../forms\");\nconst jobs_1 = require(\"../jobs\");\nconst navigation_1 = require(\"../navigation\");\nconst application_1 = require(\"../application\");\n/**\n * Main automation function that processes job applications\n * Orchestrates the entire application flow including job finding, scrolling, form completion, and error handling\n * @param isRunning - Reference to the global running state\n * @param continuing - Reference to the global continuing state\n * @param appliedJobIds - Set of job IDs that have already been processed\n * @param setContinuing - Function to update the continuing state\n * @returns Promise<void>\n */\nconst processApplication = async (isRunning, continuing, appliedJobIds, setContinuing) => {\n    try {\n        while (isRunning.current) {\n            // Check for save application popup first\n            if (await (0, application_1.handleSaveApplicationPopup)()) {\n                await (0, utils_1.sleep)(250);\n            }\n            console.log(\"🔍 Looking for next applicable job...\");\n            const nextJob = (0, jobs_1.findNextJob)();\n            if (!nextJob) {\n                console.log(\"🔄 No applicable job found, attempting to scroll for more jobs\");\n                // Use dynamic detection instead of hardcoded selectors\n                let jobList = (0, navigation_1.findScrollableJobListContainer)();\n                let scrollPerformed = false;\n                if (jobList) {\n                    // Calculate a smooth scrolling amount (about 70% of viewport height)\n                    const scrollAmount = window.innerHeight * 0.5;\n                    const currentScrollTop = jobList.scrollTop;\n                    // Only scroll if we're not already at the bottom\n                    const isAtBottom = jobList.scrollHeight - jobList.scrollTop <= jobList.clientHeight + 50;\n                    if (!isAtBottom) {\n                        console.log(`📜 Scrolling job list by ${scrollAmount}px to load more jobs (scrollTop: ${currentScrollTop}, scrollHeight: ${jobList.scrollHeight})`);\n                        // Force scroll upward first to trigger LinkedIn's job loading\n                        jobList.scrollTo({\n                            top: Math.max(0, currentScrollTop - 100),\n                            behavior: 'smooth'\n                        });\n                        await (0, utils_1.sleep)(1000);\n                        // Then scroll down more\n                        jobList.scrollTo({\n                            top: currentScrollTop + scrollAmount,\n                            behavior: 'smooth'\n                        });\n                        scrollPerformed = true;\n                    }\n                    else {\n                        console.log(\"📄 Reached bottom of job list, trying to click next page number\");\n                        // We're at the bottom of the list, try to click the next page number button\n                        if (await (0, navigation_1.clickNextPageNumber)()) {\n                            console.log(\"✅ Successfully clicked next page number\");\n                            await (0, utils_1.sleep)(3000); // Wait for next page to load\n                            continue;\n                        }\n                        else {\n                            // Fall back to the old method if page number navigation fails\n                            console.log(\"⚠️ Falling back to 'Next' button\");\n                            const nextPageButton = document.querySelector('button[aria-label=\"Next\"]');\n                            if (nextPageButton && (0, utils_1.isElementVisible)(nextPageButton)) {\n                                console.log(\"🖱️ Clicking next page button\");\n                                nextPageButton.click();\n                                await (0, utils_1.sleep)(3000); // Wait for next page to load\n                                continue;\n                            }\n                            else {\n                                console.log(\"❌ No pagination buttons found - may have reached the end of results\");\n                                // Consider pausing automation if we've exhausted all jobs\n                                let scrollAttempts = parseInt(localStorage.getItem('scrollAttempts') || '0');\n                                scrollAttempts++;\n                                localStorage.setItem('scrollAttempts', scrollAttempts.toString());\n                                // If we've tried scrolling multiple times with no jobs, pause briefly\n                                if (scrollAttempts > 5) {\n                                    console.log(\"🛑 Multiple scroll attempts with no jobs found. Pausing automation briefly.\");\n                                    localStorage.setItem('scrollAttempts', '0');\n                                    await (0, utils_1.sleep)(10000); // Longer pause to allow user to intervene if needed\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    console.log(\"❓ Could not find the job list element, trying direct window scroll\");\n                    // If we couldn't find the job list, try scrolling the window directly\n                    window.scrollBy({\n                        top: window.innerHeight * 0.7,\n                        behavior: 'smooth'\n                    });\n                    scrollPerformed = true;\n                }\n                // Wait longer for jobs to load after scrolling\n                if (scrollPerformed) {\n                    await (0, utils_1.sleep)(3000);\n                    // Check if scrolling loaded any new jobs\n                    const newNextJob = (0, jobs_1.findNextJob)();\n                    if (newNextJob) {\n                        console.log(\"✅ Found new job after scrolling\");\n                        continue; // Skip to next iteration to process this job\n                    }\n                }\n                console.log(\"⏱️ Waiting briefly before next job check\");\n                await (0, utils_1.sleep)(2000); // Only 2 seconds wait when no jobs found\n                continue;\n            }\n            try {\n                console.log(\"Processing job: \" + nextJob.textContent?.substring(0, 30)?.trim());\n                (0, jobs_1.scrollToJob)(nextJob);\n                await (0, utils_1.sleep)(1000); // Reduced from 2000ms\n                if (!(0, jobs_1.clickJob)(nextJob)) {\n                    console.log(\"Failed to click job, moving to next\");\n                    // Mark this job as applied so we don't get stuck on it\n                    (0, jobs_1.markJobAsApplied)(nextJob);\n                    continue;\n                }\n                await (0, utils_1.sleep)(1000); // Reduced from 2000ms\n                if (!await (0, utils_1.clickElement)(types_1.SELECTORS.EASY_APPLY_BUTTON)) {\n                    console.log(\"Failed to click Easy Apply button, moving to next job\");\n                    // Mark this job as applied so we don't get stuck on it\n                    (0, jobs_1.markJobAsApplied)(nextJob);\n                    continue;\n                }\n                // Get job details\n                const jobTitleElement = document.querySelector('.t-24.job-details-jobs-unified-top-card__job-title');\n                const companyElement = document.querySelector('.job-details-jobs-unified-top-card__company-name');\n                const jobTitle = jobTitleElement?.textContent?.trim() || 'Unknown Position';\n                const companyName = companyElement?.textContent?.trim() || 'Unknown Company';\n                console.log(`Applying to: ${jobTitle} at ${companyName}`);\n                setContinuing(true);\n                let retryCount = 0;\n                const maxRetries = 3;\n                let currentFormCompleted = false;\n                // Main application loop - stays on current form until completed\n                while (continuing.current && isRunning.current) {\n                    // Check for save application popup\n                    if (await (0, application_1.handleSaveApplicationPopup)()) {\n                        await (0, utils_1.sleep)(250); // Reduced from 500ms\n                        continue;\n                    }\n                    // Display a message to the user that they can interact with the form\n                    const formElement = document.querySelector('.jobs-easy-apply-modal__content');\n                    if (formElement) {\n                        console.log(\"✍️ Form is ready - you can fill in fields and the script will wait for you to finish\");\n                    }\n                    // Wait for form completion (user filling fields)\n                    console.log(\"Waiting for form completion...\");\n                    const formCompleted = await (0, forms_1.waitForFormCompletion)(isRunning);\n                    if (!formCompleted) {\n                        console.log(\"Form completion timed out\");\n                        setContinuing(false);\n                        // Make sure to click close button before breaking\n                        await (0, utils_1.clickElement)(types_1.SELECTORS.CLOSE_BUTTON);\n                        break;\n                    }\n                    console.log(\"All fields filled, proceeding to next step\");\n                    // Try to click next/submit button\n                    const buttonClicked = await (0, application_1.handleButtonClick)(jobTitle, companyName, nextJob, appliedJobIds);\n                    if (!buttonClicked) {\n                        retryCount++;\n                        console.log(`Failed to click button, retry ${retryCount}/${maxRetries}`);\n                        if (retryCount >= maxRetries) {\n                            await (0, utils_1.clickElement)(types_1.SELECTORS.CLOSE_BUTTON);\n                            setContinuing(false);\n                            break;\n                        }\n                        await (0, utils_1.sleep)(500); // Reduced from 1000ms\n                        continue;\n                    }\n                    // Reset retry count after successful button click\n                    retryCount = 0;\n                    // Wait for new form to load or submit to complete\n                    await (0, utils_1.sleep)(1000); // Reduced from 2000ms\n                    // Check if we're still in the application modal\n                    const modal = document.querySelector('.artdeco-modal__content.jobs-easy-apply-modal__content');\n                    if (!modal) {\n                        console.log(\"Application completed successfully\");\n                        currentFormCompleted = true;\n                        break;\n                    }\n                    // After clicking any button, check for save popup\n                    if (buttonClicked) {\n                        await (0, utils_1.sleep)(250); // Reduced from 500ms\n                        if (await (0, application_1.handleSaveApplicationPopup)()) {\n                            await (0, utils_1.sleep)(250); // Reduced from 500ms\n                        }\n                    }\n                }\n                // Only mark as applied if we completed the application\n                if (currentFormCompleted) {\n                    console.log(\"Application successfully completed, waiting before moving to next job\");\n                    // Note: We don't need to call markJobAsApplied here since it's already handled in trackSuccessfulApplication\n                    await (0, utils_1.sleep)(1500); // Reduced from 3000ms - wait before moving to next job\n                }\n                else {\n                    console.log(\"Application not completed, closing modal\");\n                    // Make sure to click close button here as well\n                    await (0, utils_1.clickElement)(types_1.SELECTORS.CLOSE_BUTTON);\n                    // Still mark the job as applied to avoid getting stuck\n                    // Get the job ID if possible\n                    const jobId = nextJob.closest('[data-job-id]')?.getAttribute('data-job-id') ||\n                        window.location.href.match(/\\/view\\/(\\d+)\\//)?.[1];\n                    if (jobId && !appliedJobIds.has(jobId)) {\n                        // Add to our tracking set\n                        appliedJobIds.add(jobId);\n                        // Mark in DOM\n                        (0, jobs_1.markJobAsApplied)(nextJob);\n                        // Add to storage\n                        chrome.storage.local.get(['appliedJobIds'], result => {\n                            const storedIds = result.appliedJobIds || [];\n                            storedIds.push(jobId);\n                            chrome.storage.local.set({ appliedJobIds: [...new Set(storedIds)] });\n                        });\n                    }\n                    else {\n                        // Just mark in DOM if we can't get the ID\n                        (0, jobs_1.markJobAsApplied)(nextJob);\n                    }\n                }\n            }\n            catch (error) {\n                console.error(\"Error during application process:\", error);\n                // Check for save popup before closing\n                await (0, application_1.handleSaveApplicationPopup)();\n                await (0, utils_1.clickElement)(types_1.SELECTORS.CLOSE_BUTTON);\n                // Mark job as applied to avoid getting stuck\n                if (nextJob) {\n                    const jobId = nextJob.closest('[data-job-id]')?.getAttribute('data-job-id') ||\n                        window.location.href.match(/\\/view\\/(\\d+)\\//)?.[1];\n                    if (jobId && !appliedJobIds.has(jobId)) {\n                        // Add to our tracking set\n                        appliedJobIds.add(jobId);\n                        // Mark in DOM\n                        (0, jobs_1.markJobAsApplied)(nextJob);\n                        // Add to storage\n                        chrome.storage.local.get(['appliedJobIds'], result => {\n                            const storedIds = result.appliedJobIds || [];\n                            storedIds.push(jobId);\n                            chrome.storage.local.set({ appliedJobIds: [...new Set(storedIds)] });\n                        });\n                    }\n                    else {\n                        // Just mark in DOM if we can't get the ID\n                        (0, jobs_1.markJobAsApplied)(nextJob);\n                    }\n                }\n                continue;\n            }\n        }\n    }\n    catch (error) {\n        console.error(\"Fatal error in processApplication:\", error);\n        setContinuing(false);\n        await (0, application_1.handleSaveApplicationPopup)();\n        await (0, utils_1.clickElement)(types_1.SELECTORS.CLOSE_BUTTON);\n    }\n};\nexports.processApplication = processApplication;\n","\"use strict\";\n/**\n * Automation module exports\n * Re-exports all automation-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stopAutomation = exports.startAutomation = exports.processApplication = void 0;\n// Core automation processing\nvar core_1 = require(\"./core\");\nObject.defineProperty(exports, \"processApplication\", { enumerable: true, get: function () { return core_1.processApplication; } });\n// Automation control and lifecycle management\nvar control_1 = require(\"./control\");\nObject.defineProperty(exports, \"startAutomation\", { enumerable: true, get: function () { return control_1.startAutomation; } });\nObject.defineProperty(exports, \"stopAutomation\", { enumerable: true, get: function () { return control_1.stopAutomation; } });\n","\"use strict\";\n/**\n * Event handling module exports\n * Re-exports all event handling functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupDebugUtilities = exports.setupPageEventListeners = exports.setupMessageListener = void 0;\n// Chrome extension messaging and event handlers\nvar messaging_1 = require(\"./messaging\");\nObject.defineProperty(exports, \"setupMessageListener\", { enumerable: true, get: function () { return messaging_1.setupMessageListener; } });\nObject.defineProperty(exports, \"setupPageEventListeners\", { enumerable: true, get: function () { return messaging_1.setupPageEventListeners; } });\nObject.defineProperty(exports, \"setupDebugUtilities\", { enumerable: true, get: function () { return messaging_1.setupDebugUtilities; } });\n","\"use strict\";\n/**\n * Event handling module for the LinkedIn Easy Apply extension\n * Handles Chrome extension messaging, page events, and debugging utilities\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupDebugUtilities = exports.setupPageEventListeners = exports.setupMessageListener = void 0;\nconst autofillEngine_1 = require(\"../autofillEngine\");\nconst automation_1 = require(\"../automation\");\nconst supabase_1 = require(\"../../lib/supabase\");\n// Continuous autofill state\nlet isContinuousRunning = false;\nlet continuousInterval = null;\nlet continuousUserData = null;\nlet currentStep = 0;\nlet maxSteps = 10; // Safety limit\nlet stepNames = ['Personal Info', 'Experience', 'Application Questions', 'Voluntary Disclosures', 'Self Identity'];\nlet attemptCount = 0;\nlet maxAttempts = 3; // Max attempts per step\nlet lastDetectedStep = 0;\nlet stuckStepCount = 0;\n/**\n * Starts continuous autofill process\n * @param userData - User profile data for autofill\n */\nconst startContinuousAutofill = async (userData) => {\n    console.log(\"🚀 Starting continuous autofill process\");\n    if (isContinuousRunning) {\n        console.log(\"⚠️ Continuous autofill already running\");\n        return;\n    }\n    isContinuousRunning = true;\n    continuousUserData = userData;\n    currentStep = 0;\n    attemptCount = 0;\n    lastDetectedStep = 0;\n    stuckStepCount = 0;\n    // Update storage to reflect continuous mode state\n    await chrome.storage.local.set({\n        isContinuousRunning: true,\n        continuousProgress: {\n            currentStep: 1,\n            totalSteps: stepNames.length,\n            stepName: stepNames[0] || 'Starting...'\n        }\n    });\n    // Start the continuous process\n    await runContinuousAutofillStep();\n};\n/**\n * Stops continuous autofill process\n */\nconst stopContinuousAutofill = async () => {\n    console.log(\"🛑 Stopping continuous autofill process\");\n    isContinuousRunning = false;\n    if (continuousInterval) {\n        clearTimeout(continuousInterval);\n        continuousInterval = null;\n    }\n    // Update storage to reflect stopped state\n    await chrome.storage.local.set({\n        isContinuousRunning: false,\n        continuousProgress: null\n    });\n    continuousUserData = null;\n    currentStep = 0;\n    attemptCount = 0;\n    lastDetectedStep = 0;\n    stuckStepCount = 0;\n    console.log(\"✅ Continuous autofill stopped\");\n};\n/**\n * Runs a single step of the continuous autofill process\n */\nconst runContinuousAutofillStep = async () => {\n    if (!isContinuousRunning || !continuousUserData) {\n        console.log(\"🛑 Continuous autofill stopped or no user data\");\n        return;\n    }\n    if (currentStep >= maxSteps) {\n        console.log(\"🛑 Maximum steps reached, stopping continuous autofill\");\n        await stopContinuousAutofill();\n        return;\n    }\n    try {\n        // Detect current step\n        const detectedStep = detectCurrentWorkdayStep();\n        console.log(`🔄 Running continuous autofill - detected step: ${detectedStep} (attempt ${attemptCount + 1}/${maxAttempts})`);\n        // Check if we're stuck on the same step\n        if (detectedStep === lastDetectedStep) {\n            stuckStepCount++;\n            console.log(`⚠️ Still on step ${detectedStep}, stuck count: ${stuckStepCount}`);\n            if (stuckStepCount >= maxAttempts) {\n                console.log(\"🛑 Stuck on same step too many times, stopping continuous autofill\");\n                await stopContinuousAutofill();\n                return;\n            }\n        }\n        else {\n            // Reset stuck counter when we progress\n            stuckStepCount = 0;\n            lastDetectedStep = detectedStep;\n        }\n        // Update progress with detected step\n        const stepName = stepNames[detectedStep - 1] || `Step ${detectedStep}`;\n        await chrome.storage.local.set({\n            continuousProgress: {\n                currentStep: detectedStep,\n                totalSteps: stepNames.length,\n                stepName\n            }\n        });\n        // Run autofill for current page\n        await (0, autofillEngine_1.autofillRouter)(continuousUserData);\n        // Wait for page to process/validate\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        // Check if we're at the final submission page\n        if (isAtFinalSubmissionPage()) {\n            console.log(\"🎉 Reached final submission page, stopping continuous autofill\");\n            await stopContinuousAutofill();\n            return;\n        }\n        // Check if we can proceed to next step\n        if (canProceedToNextStep()) {\n            console.log(\"✅ Step completed successfully, proceeding to next step\");\n            // Reset attempt count for next step\n            attemptCount = 0;\n            // Schedule next step\n            continuousInterval = window.setTimeout(async () => {\n                await runContinuousAutofillStep();\n            }, 3000); // 3 second delay between steps\n        }\n        else {\n            // Increment attempt count\n            attemptCount++;\n            if (attemptCount >= maxAttempts) {\n                console.log(\"❌ Maximum attempts reached for current step, stopping continuous autofill\");\n                await stopContinuousAutofill();\n            }\n            else {\n                console.log(`⚠️ Cannot proceed yet, retrying in 5 seconds (attempt ${attemptCount}/${maxAttempts})`);\n                // Schedule retry with longer delay\n                continuousInterval = window.setTimeout(async () => {\n                    await runContinuousAutofillStep();\n                }, 5000); // 5 second delay for retries\n            }\n        }\n    }\n    catch (error) {\n        console.error(\"❌ Error in continuous autofill step:\", error);\n        attemptCount++;\n        if (attemptCount >= maxAttempts) {\n            console.log(\"❌ Maximum attempts reached due to errors, stopping continuous autofill\");\n            await stopContinuousAutofill();\n        }\n        else {\n            console.log(`⚠️ Error occurred, retrying in 5 seconds (attempt ${attemptCount}/${maxAttempts})`);\n            // Schedule retry after error\n            continuousInterval = window.setTimeout(async () => {\n                await runContinuousAutofillStep();\n            }, 5000);\n        }\n    }\n};\n/**\n * Detects the current Workday step (imported from workday.ts logic)\n */\nconst detectCurrentWorkdayStep = () => {\n    // Look for step indicators in the UI\n    const stepIndicators = [\n        { step: 1, selectors: ['[data-automation-id*=\"step1\"]', '[aria-label*=\"Step 1\"]'] },\n        { step: 2, selectors: ['[data-automation-id*=\"step2\"]', '[aria-label*=\"Step 2\"]'] },\n        { step: 3, selectors: ['[data-automation-id*=\"step3\"]', '[aria-label*=\"Step 3\"]'] },\n        { step: 4, selectors: ['[data-automation-id*=\"step4\"]', '[aria-label*=\"Step 4\"]'] },\n        { step: 5, selectors: ['[data-automation-id*=\"step5\"]', '[aria-label*=\"Step 5\"]'] }\n    ];\n    // Check each step's indicators\n    for (const { step, selectors } of stepIndicators) {\n        for (const selector of selectors) {\n            const element = document.querySelector(selector);\n            if (element) {\n                console.log(`✅ Detected step ${step} by selector: ${selector}`);\n                return step;\n            }\n        }\n    }\n    // Fallback: Try to detect by visible form fields\n    // Step 1: Personal Information\n    if (document.querySelector('input[id*=\"firstName\"], input[id*=\"legalName--firstName\"]')) {\n        console.log(\"✅ Detected step 1 by first name field\");\n        return 1;\n    }\n    // Step 2: My Experience\n    if (document.querySelector('input[id*=\"skills\"], button[data-automation-id*=\"addItemButton\"]')) {\n        console.log(\"✅ Detected step 2 by skills/experience fields\");\n        return 2;\n    }\n    // Step 3: Application Questions\n    if (document.querySelector('button[data-automation-id*=\"radioButton\"], fieldset[data-automation-id*=\"RadioButtonGroup\"]')) {\n        console.log(\"✅ Detected step 3 by radio button questions\");\n        return 3;\n    }\n    // Step 4: Voluntary Disclosures\n    if (document.querySelector('fieldset[data-automation-id*=\"gender\"], fieldset[data-automation-id*=\"ethnicity\"]')) {\n        console.log(\"✅ Detected step 4 by voluntary disclosure fields\");\n        return 4;\n    }\n    // Step 5: Self Identification\n    if (document.querySelector('input[id*=\"selfIdentifiedDisabilityData\"], fieldset[data-automation-id*=\"disabilityStatus\"]')) {\n        console.log(\"✅ Detected step 5 by self identification fields\");\n        return 5;\n    }\n    // Default to step 1 if we can't detect\n    console.log(\"⚠️ Could not detect specific step, defaulting to step 1\");\n    return 1;\n};\n/**\n * Checks if we're at the final submission page\n */\nconst isAtFinalSubmissionPage = () => {\n    // Check for final submission indicators\n    const submitButton = document.querySelector('button[aria-label*=\"Submit\"], button[data-automation-id*=\"submit\"]');\n    const reviewText = document.querySelector('h1, h2, h3, [role=\"heading\"]');\n    // Check if review text contains submission keywords\n    const hasSubmissionText = reviewText && (reviewText.textContent?.toLowerCase().includes('review') ||\n        reviewText.textContent?.toLowerCase().includes('submit') ||\n        reviewText.textContent?.toLowerCase().includes('final'));\n    const isSubmissionPage = !!(submitButton || hasSubmissionText);\n    if (isSubmissionPage) {\n        console.log(\"🎉 Final submission page detected\");\n    }\n    return isSubmissionPage;\n};\n/**\n * Checks if we can proceed to the next step\n */\nconst canProceedToNextStep = () => {\n    // Check for validation errors\n    const errors = document.querySelectorAll('[data-automation-id*=\"error\"], .error, [aria-invalid=\"true\"], [aria-labelledby*=\"ERROR\"]');\n    if (errors.length > 0) {\n        console.log(\"⚠️ Validation errors found, cannot proceed:\", errors.length);\n        return false;\n    }\n    // Check for next button or step progression\n    const nextButton = document.querySelector('button[aria-label*=\"Next\"], button[data-automation-id*=\"next\"]');\n    const continueButton = document.querySelector('button[aria-label*=\"Continue\"]');\n    const canProceed = !!(nextButton || continueButton);\n    if (canProceed) {\n        console.log(\"✅ Can proceed to next step\");\n    }\n    else {\n        console.log(\"❌ Cannot proceed - no next/continue button found\");\n    }\n    return canProceed;\n};\n/**\n * Sets up Chrome extension message listener with comprehensive message handling\n * Handles START_AUTOMATION, STOP_AUTOMATION, GET_STATE, and AUTOFILL_CURRENT_PAGE messages\n * @param deps - Dependencies required for message handling\n */\nconst setupMessageListener = (deps) => {\n    // Update message listener with more debugging\n    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        console.log(\"Content script received message:\", message);\n        console.log(\"Content script sender:\", sender);\n        try {\n            switch (message.type) {\n                case 'START_AUTOMATION':\n                    console.log(\"Handling START_AUTOMATION message\");\n                    if (message.settings) {\n                        const currentUserData = deps.getUserData();\n                        const updatedUserData = {\n                            ...currentUserData,\n                            settings: {\n                                ...currentUserData?.settings,\n                                nextJobDelay: message.settings.nextJobDelay\n                            }\n                        };\n                        deps.setUserData(updatedUserData);\n                        deps.automationState.userData = updatedUserData;\n                    }\n                    (0, automation_1.startAutomation)(deps.automationState, deps.setIsRunning, deps.setContinuing);\n                    sendResponse({ isRunning: true });\n                    break;\n                case 'STOP_AUTOMATION':\n                    console.log(\"Handling STOP_AUTOMATION message\");\n                    (0, automation_1.stopAutomation)(deps.automationState, deps.setIsRunning, deps.setContinuing);\n                    sendResponse({ isRunning: false });\n                    break;\n                case 'GET_STATE':\n                    console.log(\"Handling GET_STATE message\");\n                    sendResponse({ isRunning: deps.getIsRunning() });\n                    break;\n                case 'AUTOFILL_CURRENT_PAGE':\n                    console.log(\"Handling AUTOFILL_CURRENT_PAGE message\", message.data);\n                    (async () => {\n                        try {\n                            if (!message.data) {\n                                throw new Error(\"No user data provided for autofill\");\n                            }\n                            await (0, autofillEngine_1.autofillRouter)(message.data);\n                            sendResponse({ success: true });\n                        }\n                        catch (error) {\n                            console.error(\"Error during autofill:\", error);\n                            sendResponse({ success: false, error: error.message });\n                        }\n                    })();\n                    break;\n                case 'START_CONTINUOUS_AUTOFILL':\n                    console.log(\"🚀 Handling START_CONTINUOUS_AUTOFILL message\", message.data);\n                    (async () => {\n                        try {\n                            if (!message.data) {\n                                throw new Error(\"No user data provided for continuous autofill\");\n                            }\n                            await startContinuousAutofill(message.data);\n                            sendResponse({ success: true });\n                        }\n                        catch (error) {\n                            console.error(\"Error starting continuous autofill:\", error);\n                            sendResponse({ success: false, error: error.message });\n                        }\n                    })();\n                    break;\n                case 'STOP_CONTINUOUS_AUTOFILL':\n                    console.log(\"🛑 Handling STOP_CONTINUOUS_AUTOFILL message\");\n                    (async () => {\n                        try {\n                            await stopContinuousAutofill();\n                            sendResponse({ success: true });\n                        }\n                        catch (error) {\n                            console.error(\"Error stopping continuous autofill:\", error);\n                            sendResponse({ success: false, error: error.message });\n                        }\n                    })();\n                    break;\n                default:\n                    console.log(\"Received unknown message type:\", message.type);\n                    sendResponse({ isRunning: deps.getIsRunning() });\n            }\n        }\n        catch (e) {\n            console.error(\"Error processing message:\", e);\n            sendResponse({ error: e.message });\n        }\n        return true;\n    });\n};\nexports.setupMessageListener = setupMessageListener;\n/**\n * Sets up page event listeners including cleanup on page unload\n * @param deps - Dependencies required for event handling\n */\nconst setupPageEventListeners = (deps) => {\n    // Add cleanup on page unload\n    window.addEventListener('beforeunload', () => {\n        if (deps.getIsRunning()) {\n            (0, automation_1.stopAutomation)(deps.automationState, deps.setIsRunning, deps.setContinuing);\n        }\n    });\n};\nexports.setupPageEventListeners = setupPageEventListeners;\n/**\n * Sets up debugging utilities available from browser console\n * Creates global functions for testing database connectivity and authentication\n */\nconst setupDebugUtilities = () => {\n    // Test function for database connectivity - can be called from browser console\n    window.testDatabaseConnection = async () => {\n        console.log('🔍 Testing database connection...');\n        try {\n            // Test 1: Check session\n            const session = await (0, supabase_1.getSession)();\n            console.log('🔍 Session test:', !!session);\n            // Test 2: Check user\n            const user = await (0, supabase_1.getCurrentUser)();\n            console.log('🔍 User test:', !!user, user?.email);\n            // Test 3: Try to track a test application\n            const testResult = await (0, supabase_1.trackJobApplication)('Test Position', 'Test Company', {\n                linkedin_job_id: `test-${Date.now()}`,\n                location: 'Test Location',\n                work_type: 'remote',\n                job_description: 'Test description'\n            });\n            console.log('🔍 Database tracking test result:', testResult);\n            return {\n                hasSession: !!session,\n                hasUser: !!user,\n                userEmail: user?.email,\n                trackingWorking: testResult\n            };\n        }\n        catch (error) {\n            console.error('🔍 Database connection test failed:', error);\n            return {\n                error: error.message\n            };\n        }\n    };\n    console.log('🔧 Database test function available: window.testDatabaseConnection()');\n    // Function to check authentication status\n    window.checkAuthStatus = async () => {\n        console.log('🔍 Checking authentication status...');\n        try {\n            const session = await (0, supabase_1.getSession)();\n            const user = await (0, supabase_1.getCurrentUser)();\n            const authResult = await (0, supabase_1.ensureAuthenticated)();\n            console.log('Auth Status:', {\n                hasSession: !!session,\n                hasUser: !!user,\n                userEmail: user?.email,\n                ensureAuthResult: authResult\n            });\n            return {\n                hasSession: !!session,\n                hasUser: !!user,\n                userEmail: user?.email,\n                ensureAuthResult: authResult\n            };\n        }\n        catch (error) {\n            console.error('Auth check failed:', error);\n            return { error: error.message };\n        }\n    };\n    console.log('🔧 Auth check function available: window.checkAuthStatus()');\n};\nexports.setupDebugUtilities = setupDebugUtilities;\n","\"use strict\";\n/**\n * Form completion utility functions for the LinkedIn Easy Apply extension\n * These functions handle waiting for user form completion and automatic form field filling\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fillFormFields = exports.waitForFormCompletion = exports.waitForUserFinishTyping = void 0;\nconst utils_1 = require(\"../utils\");\nconst validation_1 = require(\"./validation\");\nconst inputs_1 = require(\"./inputs\");\n/**\n * Waits for user to finish typing in a specific element\n * Resolves when user hasn't typed for the specified timeout duration\n * @param element - The input element to monitor\n * @param timeout - Time to wait after last keystroke (default: 2000ms)\n * @returns Promise<void> that resolves when user stops typing\n */\nconst waitForUserFinishTyping = (element, timeout = 2000) => {\n    return new Promise((resolve) => {\n        let timer;\n        const resetTimer = () => {\n            clearTimeout(timer);\n            timer = setTimeout(() => {\n                element.removeEventListener('keydown', resetTimer);\n                element.removeEventListener('input', resetTimer);\n                resolve();\n            }, timeout);\n        };\n        // Listen for keydown and input events\n        element.addEventListener('keydown', resetTimer);\n        element.addEventListener('input', resetTimer);\n        // Also resolve if element loses focus\n        element.addEventListener('blur', () => {\n            clearTimeout(timer);\n            element.removeEventListener('keydown', resetTimer);\n            element.removeEventListener('input', resetTimer);\n            resolve();\n        }, { once: true });\n        // Start the timer initially in case user doesn't type\n        resetTimer();\n    });\n};\nexports.waitForUserFinishTyping = waitForUserFinishTyping;\n/**\n * Waits for form completion by monitoring required fields and user interactions\n * @param isRunning - Optional state object to check if automation should continue\n * @returns Promise<boolean> that resolves to true when form is complete, false on timeout or stop\n */\nconst waitForFormCompletion = async (isRunning) => {\n    return new Promise((resolve) => {\n        let isTyping = false;\n        let typingTimer;\n        let userInteractionInProgress = false;\n        let stateCheckInterval;\n        // Function declarations first to avoid temporal dead zone issues\n        // Periodically check if automation should stop\n        if (isRunning) {\n            stateCheckInterval = setInterval(() => {\n                if (!isRunning.current) {\n                    console.log(\"🛑 Automation stopped during form completion\");\n                    cleanup();\n                    resolve(false);\n                    return;\n                }\n            }, 500); // Check every 500ms\n        }\n        // Function to check if user is currently interacting with any field\n        const checkUserInteraction = () => {\n            const activeElement = document.activeElement;\n            if (activeElement &&\n                (activeElement.tagName === 'INPUT' ||\n                    activeElement.tagName === 'TEXTAREA' ||\n                    activeElement.tagName === 'SELECT')) {\n                return true;\n            }\n            return false;\n        };\n        const checkFields = async () => {\n            // Check automation state first\n            if (isRunning && !isRunning.current) {\n                console.log(\"🛑 Automation stopped during field check\");\n                cleanup();\n                resolve(false);\n                return;\n            }\n            // If user is currently interacting with a field, wait\n            if (checkUserInteraction()) {\n                if (!userInteractionInProgress) {\n                    userInteractionInProgress = true;\n                    console.log('User interaction detected, waiting for completion...');\n                    // Wait for the user to finish typing or interacting\n                    const activeElement = document.activeElement;\n                    await (0, exports.waitForUserFinishTyping)(activeElement, 2000);\n                    userInteractionInProgress = false;\n                    console.log('User interaction completed, continuing checks');\n                    // Run check again after interaction finishes\n                    setTimeout(checkFields, 500);\n                    return;\n                }\n                return; // Don't proceed with checks while waiting for user\n            }\n            // Find all required fields using LinkedIn's required field indicators\n            const requiredFields = document.querySelectorAll([\n                // Text inputs with required indicator\n                'label:has(span.artdeco-button__text--required) + input',\n                'label:has(span.required) + input',\n                // Radio button groups with required indicator\n                'fieldset:has(legend span.artdeco-button__text--required) input[type=\"radio\"]',\n                // Backup selectors for LinkedIn's various required field styles\n                '[data-test-single-line-text-form-component] input[required]',\n                '[data-test-form-builder-radio-button-form-component] input[aria-required=\"true\"]',\n                '.artdeco-text-input--required input',\n                '.fb-dash-form-element__label--is-required input'\n            ].join(','));\n            if (requiredFields.length === 0) {\n                console.log('No required fields found, proceeding immediately');\n                cleanup();\n                resolve(true);\n                return;\n            }\n            // Group radio buttons by name attribute\n            const radioGroups = new Map();\n            const textInputs = [];\n            requiredFields.forEach(field => {\n                const input = field;\n                if (!(0, utils_1.isElementVisible)(input))\n                    return;\n                if (input.type === 'radio') {\n                    const name = input.name;\n                    if (!radioGroups.has(name)) {\n                        radioGroups.set(name, []);\n                    }\n                    radioGroups.get(name)?.push(input);\n                }\n                else {\n                    textInputs.push(input);\n                }\n            });\n            // Check if any text input is empty or has validation errors\n            const textInputsValid = textInputs.every(input => {\n                const value = input.value.trim();\n                const hasError = (0, validation_1.hasValidationErrors)(input);\n                return value.length > 0 && !hasError;\n            });\n            // Check if all required radio groups have a selection\n            const radioGroupsValid = Array.from(radioGroups.values()).every(group => group.some(radio => radio.checked));\n            // If all fields are already filled, resolve immediately\n            if (textInputsValid && radioGroupsValid) {\n                console.log('All required fields are already filled, proceeding immediately');\n                clearTimeout(typingTimer);\n                // Still wait a small amount of time (300ms) before resolving to allow form validation to complete\n                setTimeout(() => {\n                    cleanup();\n                    resolve(true);\n                }, 300);\n                return;\n            }\n            // Only continue waiting if not all fields are filled\n            if (!textInputsValid || !radioGroupsValid) {\n                // Schedule to check fields again in 500ms\n                clearTimeout(typingTimer);\n                typingTimer = setTimeout(checkFields, 500);\n            }\n        };\n        // Add input event listeners to track typing\n        const handleInput = () => {\n            isTyping = true;\n            clearTimeout(typingTimer);\n            // Wait 1 second after user stops typing\n            typingTimer = setTimeout(() => {\n                isTyping = false;\n                checkFields();\n            }, 1000);\n        };\n        // Cleanup function - defined after all function declarations\n        const cleanup = () => {\n            clearTimeout(typingTimer);\n            if (stateCheckInterval)\n                clearInterval(stateCheckInterval);\n            document.querySelectorAll('input, textarea').forEach(input => {\n                input.removeEventListener('input', handleInput);\n                input.removeEventListener('change', checkFields);\n            });\n        };\n        // Add input listeners to all text inputs\n        document.querySelectorAll('input[type=\"text\"], input:not([type]), textarea').forEach(input => {\n            input.addEventListener('input', handleInput);\n        });\n        // Add change listeners to radio buttons\n        document.querySelectorAll('input[type=\"radio\"]').forEach(radio => {\n            radio.addEventListener('change', checkFields);\n        });\n        // Check fields immediately in case they're already filled\n        checkFields();\n        // Cleanup after 3 minutes to prevent memory leaks (reduced from 5 minutes)\n        setTimeout(() => {\n            cleanup();\n            resolve(false);\n        }, 180000);\n    });\n};\nexports.waitForFormCompletion = waitForFormCompletion;\n/**\n * Checks if all required form fields are filled\n * @returns Promise<boolean> true if all required fields are filled, false otherwise\n */\nconst fillFormFields = async () => {\n    try {\n        // Find all required fields using LinkedIn's specific classes\n        const formFields = document.querySelectorAll([\n            '[data-test-single-line-text-form-component] input[required]',\n            '[data-test-form-builder-radio-button-form-component] input[aria-required=\"true\"]',\n            '.artdeco-text-input--required input',\n            '.fb-dash-form-element__label--is-required input'\n        ].join(','));\n        const requiredFields = Array.from(formFields).filter(field => (0, utils_1.isElementVisible)(field));\n        if (requiredFields.length === 0) {\n            return true; // No required fields found\n        }\n        // Check if any field is empty\n        const emptyFields = requiredFields.filter(field => (0, inputs_1.isFieldEmpty)(field));\n        if (emptyFields.length === 0) {\n            return true; // All fields are filled\n        }\n        return false; // Some fields are still empty\n    }\n    catch (error) {\n        return false;\n    }\n};\nexports.fillFormFields = fillFormFields;\n","\"use strict\";\n/**\n * Form field type detection utility functions for the LinkedIn Easy Apply extension\n * These functions identify different types of form fields based on their structure and labels\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTextInputField = exports.isNameField = exports.isSalaryField = exports.isChoiceField = exports.isNumericField = void 0;\n/**\n * Checks if a form element is a numeric input field\n * @param element - HTML element to check\n * @returns true if the element is a numeric field, false otherwise\n */\nconst isNumericField = (element) => {\n    // Check if it's a numeric input field by class and label\n    const formComponent = element.closest('[data-test-single-line-text-form-component]');\n    if (!formComponent)\n        return false;\n    const input = formComponent.querySelector('input');\n    const label = formComponent.querySelector('label')?.textContent?.toLowerCase() || '';\n    // Check if input has numeric-specific ID\n    const isNumericInput = input?.id?.includes('numeric') || false;\n    // Also check label text as backup\n    const hasNumericLabel = label.includes('year') ||\n        label.includes('number') ||\n        label.includes('count') ||\n        label.includes('amount');\n    return isNumericInput || hasNumericLabel;\n};\nexports.isNumericField = isNumericField;\n/**\n * Checks if a form element is a choice/radio button field\n * @param element - HTML element to check\n * @returns true if the element is a choice field, false otherwise\n */\nconst isChoiceField = (element) => {\n    // Check if it's a radio button/choice field\n    return !!element.closest('[data-test-form-builder-radio-button-form-component]');\n};\nexports.isChoiceField = isChoiceField;\n/**\n * Checks if a form element is a salary-related field\n * @param element - HTML element to check\n * @returns true if the element is a salary field, false otherwise\n */\nconst isSalaryField = (element) => {\n    const label = element.querySelector('label')?.textContent?.toLowerCase() || '';\n    return label.includes('salary') ||\n        label.includes('compensation') ||\n        label.includes('pay') ||\n        label.includes('wage');\n};\nexports.isSalaryField = isSalaryField;\n/**\n * Checks if a form element is a name-related field\n * @param element - HTML element to check\n * @returns true if the element is a name field, false otherwise\n */\nconst isNameField = (element) => {\n    const label = element.querySelector('label')?.textContent?.toLowerCase() || '';\n    return label.includes('name') ||\n        label.includes('full') ||\n        label.includes('first') ||\n        label.includes('last');\n};\nexports.isNameField = isNameField;\n/**\n * Checks if a form element is a text input field (not numeric)\n * @param element - HTML element to check\n * @returns true if the element is a text input field, false otherwise\n */\nconst isTextInputField = (element) => {\n    // Check if it's a text input field by class\n    const formComponent = element.closest('[data-test-single-line-text-form-component]');\n    if (!formComponent)\n        return false;\n    const input = formComponent.querySelector('input');\n    // If input has numeric in ID, it's not a text field\n    if (input?.id?.includes('numeric'))\n        return false;\n    return true;\n};\nexports.isTextInputField = isTextInputField;\n","\"use strict\";\n/**\n * Forms module exports\n * Re-exports all form-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fillFormFields = exports.waitForFormCompletion = exports.waitForUserFinishTyping = exports.isTextInputField = exports.isNameField = exports.isSalaryField = exports.isChoiceField = exports.isNumericField = exports.areAllFieldsFilled = exports.hasValidationErrors = exports.uploadResume = exports.selectOption = exports.fillTextArea = exports.fillInput = exports.isFieldEmpty = void 0;\n// Form input utilities\nvar inputs_1 = require(\"./inputs\");\nObject.defineProperty(exports, \"isFieldEmpty\", { enumerable: true, get: function () { return inputs_1.isFieldEmpty; } });\nObject.defineProperty(exports, \"fillInput\", { enumerable: true, get: function () { return inputs_1.fillInput; } });\nObject.defineProperty(exports, \"fillTextArea\", { enumerable: true, get: function () { return inputs_1.fillTextArea; } });\nObject.defineProperty(exports, \"selectOption\", { enumerable: true, get: function () { return inputs_1.selectOption; } });\nObject.defineProperty(exports, \"uploadResume\", { enumerable: true, get: function () { return inputs_1.uploadResume; } });\n// Form validation utilities\nvar validation_1 = require(\"./validation\");\nObject.defineProperty(exports, \"hasValidationErrors\", { enumerable: true, get: function () { return validation_1.hasValidationErrors; } });\nObject.defineProperty(exports, \"areAllFieldsFilled\", { enumerable: true, get: function () { return validation_1.areAllFieldsFilled; } });\n// Form field type detection utilities\nvar field_types_1 = require(\"./field-types\");\nObject.defineProperty(exports, \"isNumericField\", { enumerable: true, get: function () { return field_types_1.isNumericField; } });\nObject.defineProperty(exports, \"isChoiceField\", { enumerable: true, get: function () { return field_types_1.isChoiceField; } });\nObject.defineProperty(exports, \"isSalaryField\", { enumerable: true, get: function () { return field_types_1.isSalaryField; } });\nObject.defineProperty(exports, \"isNameField\", { enumerable: true, get: function () { return field_types_1.isNameField; } });\nObject.defineProperty(exports, \"isTextInputField\", { enumerable: true, get: function () { return field_types_1.isTextInputField; } });\n// Form completion utilities\nvar completion_1 = require(\"./completion\");\nObject.defineProperty(exports, \"waitForUserFinishTyping\", { enumerable: true, get: function () { return completion_1.waitForUserFinishTyping; } });\nObject.defineProperty(exports, \"waitForFormCompletion\", { enumerable: true, get: function () { return completion_1.waitForFormCompletion; } });\nObject.defineProperty(exports, \"fillFormFields\", { enumerable: true, get: function () { return completion_1.fillFormFields; } });\n","\"use strict\";\n/**\n * Form input utility functions for the LinkedIn Easy Apply extension\n * These functions handle filling, selecting, and uploading data to form elements\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uploadResume = exports.selectOption = exports.fillTextArea = exports.fillInput = exports.isFieldEmpty = void 0;\nconst core_1 = require(\"../utils/core\");\n/**\n * Checks if a form element is empty\n * @param element - Input, textarea, or select element to check\n * @returns true if the element has no value, false otherwise\n */\nconst isFieldEmpty = (element) => {\n    return element.value.trim().length === 0;\n};\nexports.isFieldEmpty = isFieldEmpty;\n/**\n * Fills an input field with the specified value\n * @param selector - CSS selector for the input element\n * @param value - Value to fill into the input\n * @returns Promise<boolean> - true if successfully filled, false otherwise\n */\nconst fillInput = async (selector, value) => {\n    const input = document.querySelector(selector);\n    if (input && (0, core_1.isElementVisible)(input) && (0, exports.isFieldEmpty)(input)) {\n        // Don't modify if the field already has a value\n        if (input.value.trim()) {\n            return true;\n        }\n        // Preserve the original value\n        const originalValue = input.value;\n        try {\n            input.value = value;\n            // Use a more natural event dispatch sequence\n            input.dispatchEvent(new Event('focus', { bubbles: true }));\n            input.dispatchEvent(new Event('input', { bubbles: true }));\n            input.dispatchEvent(new Event('change', { bubbles: true }));\n            input.dispatchEvent(new Event('blur', { bubbles: true }));\n            return true;\n        }\n        catch (error) {\n            // Restore original value if there was an error\n            input.value = originalValue;\n            return false;\n        }\n    }\n    return false;\n};\nexports.fillInput = fillInput;\n/**\n * Fills a textarea field with the specified value\n * @param selector - CSS selector for the textarea element\n * @param value - Value to fill into the textarea\n * @returns Promise<boolean> - true if successfully filled, false otherwise\n */\nconst fillTextArea = async (selector, value) => {\n    const textarea = document.querySelector(selector);\n    if (textarea && (0, core_1.isElementVisible)(textarea) && (0, exports.isFieldEmpty)(textarea)) {\n        // Don't modify if the field already has a value\n        if (textarea.value.trim()) {\n            return true;\n        }\n        const originalValue = textarea.value;\n        try {\n            textarea.value = value;\n            textarea.dispatchEvent(new Event('focus', { bubbles: true }));\n            textarea.dispatchEvent(new Event('input', { bubbles: true }));\n            textarea.dispatchEvent(new Event('change', { bubbles: true }));\n            textarea.dispatchEvent(new Event('blur', { bubbles: true }));\n            return true;\n        }\n        catch (error) {\n            textarea.value = originalValue;\n            return false;\n        }\n    }\n    return false;\n};\nexports.fillTextArea = fillTextArea;\n/**\n * Selects an option in a select dropdown\n * @param selector - CSS selector for the select element\n * @param value - Value to select in the dropdown\n * @returns Promise<boolean> - true if successfully selected, false otherwise\n */\nconst selectOption = async (selector, value) => {\n    const select = document.querySelector(selector);\n    if (select && (0, exports.isFieldEmpty)(select)) {\n        select.value = value;\n        select.dispatchEvent(new Event('change', { bubbles: true }));\n        return true;\n    }\n    return false;\n};\nexports.selectOption = selectOption;\n/**\n * Uploads a resume file to a file input\n * @param selector - CSS selector for the file input element\n * @param base64Data - Base64 encoded data of the file to upload\n * @returns Promise<boolean> - true if successfully uploaded, false otherwise\n */\nconst uploadResume = async (selector, base64Data) => {\n    const input = document.querySelector(selector);\n    // Only upload if there's no file already selected\n    if (input && input.type === 'file' && (!input.files || input.files.length === 0)) {\n        const blob = await fetch(base64Data).then(res => res.blob());\n        const file = new File([blob], 'resume.pdf', { type: 'application/pdf' });\n        const container = new DataTransfer();\n        container.items.add(file);\n        input.files = container.files;\n        input.dispatchEvent(new Event('change', { bubbles: true }));\n        return true;\n    }\n    return false;\n};\nexports.uploadResume = uploadResume;\n","\"use strict\";\n/**\n * Form validation utility functions for the LinkedIn Easy Apply extension\n * These functions handle form validation, error checking, and field completion verification\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.areAllFieldsFilled = exports.hasValidationErrors = void 0;\nconst core_1 = require(\"../utils/core\");\nconst inputs_1 = require(\"./inputs\");\n/**\n * Checks if a form element has validation errors\n * @param element - HTML element to check for validation errors\n * @returns true if the element has validation errors, false otherwise\n */\nconst hasValidationErrors = (element) => {\n    // Check for LinkedIn's error classes\n    return element.classList.contains('artdeco-text-input--error') ||\n        element.getAttribute('aria-invalid') === 'true' ||\n        !!element.closest('.artdeco-text-input--error');\n};\nexports.hasValidationErrors = hasValidationErrors;\n/**\n * Checks if all required form fields are filled and have no validation errors\n * @returns Promise<boolean> - true if all fields are valid and filled, false otherwise\n */\nconst areAllFieldsFilled = async () => {\n    // Get all visible input fields, textareas, and selects that are required or have error messages\n    const formFields = document.querySelectorAll('input:not([type=\"hidden\"]), textarea, select');\n    for (const field of Array.from(formFields)) {\n        const element = field;\n        // Skip if not visible\n        if (!(0, core_1.isElementVisible)(element)) {\n            continue;\n        }\n        // Check if field is required or has error message\n        const isRequired = element.hasAttribute('required') ||\n            element.getAttribute('aria-required') === 'true' ||\n            element.closest('.required') !== null;\n        // Check for error messages\n        const hasError = element.getAttribute('aria-invalid') === 'true' ||\n            element.classList.contains('artdeco-text-input--error');\n        if (isRequired || hasError) {\n            const isEmpty = (0, inputs_1.isFieldEmpty)(element);\n            if (isEmpty) {\n                return false;\n            }\n        }\n    }\n    // Check for any error messages on the page\n    const errorMessages = document.querySelectorAll('.artdeco-inline-feedback--error');\n    if (errorMessages.length > 0) {\n        return false;\n    }\n    return true;\n};\nexports.areAllFieldsFilled = areAllFieldsFilled;\n","\"use strict\";\n/**\n * Initialization module exports\n * Re-exports all initialization-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeState = void 0;\n// State initialization utilities\nvar state_1 = require(\"./state\");\nObject.defineProperty(exports, \"initializeState\", { enumerable: true, get: function () { return state_1.initializeState; } });\n","\"use strict\";\n/**\n * Initialization state module for the LinkedIn Easy Apply extension\n * Handles extension initialization including authentication, storage loading, and automation state setup\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeState = void 0;\nconst supabase_1 = require(\"../../lib/supabase\");\n/**\n * Initializes the content script state including authentication and storage loading\n * Sets up Supabase authentication, loads persisted data, and restores automation state\n * @param deps - Dependencies required for initialization\n * @returns Promise<void>\n */\nconst initializeState = async (deps) => {\n    console.log(\"Initializing content script state\");\n    // First, ensure Supabase authentication is properly restored\n    const authResult = await (0, supabase_1.ensureAuthenticated)();\n    console.log(\"Authentication initialization result:\", authResult);\n    // Then initialize the client and try to refresh the session\n    await (0, supabase_1.initSupabaseClient)();\n    // Check if we can actually get a session\n    const session = await (0, supabase_1.getSession)();\n    if (session) {\n        console.log(\"✅ Successfully authenticated with Supabase\");\n        // Check if we have a valid user\n        const user = await (0, supabase_1.getCurrentUser)();\n        if (user) {\n            console.log(`✅ Current user: ${user.email}`);\n        }\n        else {\n            console.warn(\"⚠️ No user found despite having a session\");\n        }\n    }\n    else {\n        console.warn(\"⚠️ No valid session available - database operations may fail\");\n    }\n    chrome.storage.local.get(['isAutomationRunning', 'userData', 'appliedJobIds', 'skipped409Jobs'], (result) => {\n        console.log(\"Loaded data from storage:\", result);\n        // Load persisted applied job IDs into memory\n        if (result.appliedJobIds && Array.isArray(result.appliedJobIds)) {\n            result.appliedJobIds.forEach(id => deps.appliedJobIds.add(id));\n            console.log(`📋 Loaded ${deps.appliedJobIds.size} previously applied jobs from storage`);\n        }\n        // Load persisted skipped 409 job IDs into memory\n        if (result.skipped409Jobs && Array.isArray(result.skipped409Jobs)) {\n            result.skipped409Jobs.forEach(id => deps.skipped409Jobs.add(id));\n            console.log(`📋 Loaded ${deps.skipped409Jobs.size} previously skipped 409 jobs from storage`);\n        }\n        if (result.isAutomationRunning) {\n            const userData = result.userData;\n            deps.setUserData(userData);\n            deps.automationState.userData = userData;\n            deps.startAutomation(deps.automationState, deps.setIsRunning, deps.setContinuing);\n        }\n        else {\n            deps.setIsRunning(false);\n            deps.setContinuing(false);\n        }\n    });\n};\nexports.initializeState = initializeState;\n","\"use strict\";\n/**\n * Job detection utility functions for the LinkedIn Easy Apply extension\n * These functions handle detecting whether jobs are already applied to or are Easy Apply jobs\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isEasyApplyCard = exports.isJobAlreadyApplied = void 0;\n/**\n * Checks if a job card indicates the job has already been applied to\n * Uses multiple detection methods to be layout-agnostic\n * @param jobCard - The job card HTML element to check\n * @returns true if the job has already been applied to, false otherwise\n */\nconst isJobAlreadyApplied = (jobCard) => {\n    // Layout-agnostic check for \"Applied\" text in any span\n    const appliedTextSpans = Array.from(jobCard.querySelectorAll('span[dir=\"ltr\"]')).some(span => span.textContent?.trim().toLowerCase().includes('applied'));\n    if (appliedTextSpans) {\n        return true;\n    }\n    // Check for LinkedIn's \"Applied\" status text in any element\n    const appliedTexts = Array.from(jobCard.querySelectorAll('*')).some(el => el.textContent?.trim().toLowerCase() === 'applied');\n    if (appliedTexts) {\n        return true;\n    }\n    // Check for \"Applied\" button state\n    const appliedButton = jobCard.querySelector('.jobs-apply-button--applied, [aria-label*=\"Applied\"]');\n    if (appliedButton) {\n        return true;\n    }\n    // Check for any feedback message containing \"Applied\"\n    const feedbackMessage = jobCard.querySelector('.artdeco-inline-feedback__message');\n    if (feedbackMessage?.textContent?.trim().toLowerCase().includes('applied')) {\n        return true;\n    }\n    // Check for any footer item containing \"Applied\" text\n    const footerItems = jobCard.querySelectorAll('[class*=\"footer-item\"]');\n    for (const item of footerItems) {\n        if (item.textContent?.trim().toLowerCase().includes('applied')) {\n            return true;\n        }\n    }\n    return false;\n};\nexports.isJobAlreadyApplied = isJobAlreadyApplied;\n/**\n * Layout-agnostic check for whether a job card is an Easy Apply job.\n * Looks for a span[dir=\"ltr\"] containing \"easy apply\" (case-insensitive),\n * and optionally checks for a LinkedIn icon SVG.\n * @param card - The job card HTML element to check\n * @returns true if the job card represents an Easy Apply job, false otherwise\n */\nconst isEasyApplyCard = (card) => {\n    // Look for any span[dir=\"ltr\"] with text \"easy apply\"\n    const easyApplyLabel = Array.from(card.querySelectorAll('span[dir=\"ltr\"]')).find(span => span.textContent?.trim().toLowerCase().includes(\"easy apply\"));\n    if (!easyApplyLabel)\n        return false;\n    // Optionally, confirm with LinkedIn icon (not strictly required)\n    // const hasLinkedInIcon = !!card.querySelector('svg[data-test-icon*=\"linkedin\"]');\n    // return hasLinkedInIcon;\n    return true;\n};\nexports.isEasyApplyCard = isEasyApplyCard;\n","\"use strict\";\n/**\n * Job finding and interaction utility functions for the LinkedIn Easy Apply extension\n * These functions handle finding job cards, interacting with them, and managing their state\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clickJob = exports.markJobAsApplied = exports.scrollToJob = exports.findNextJob = void 0;\nconst types_1 = require(\"../../types\");\nconst utils_1 = require(\"../utils\");\nconst detection_1 = require(\"./detection\");\n/**\n * Finds the next applicable job card on the current page\n * Looks for visible Easy Apply jobs that haven't been applied to yet\n * @returns HTMLElement of the next job card to apply to, or null if none found\n */\nconst findNextJob = () => {\n    // Get all visible job cards on the current page using expanded selector list\n    const jobCards = Array.from(document.querySelectorAll(types_1.SELECTORS.JOB_CARD));\n    if (jobCards.length === 0) {\n        console.warn(\"⚠️ No job cards found with current selectors. LinkedIn layout might be different.\");\n        // Try logging some visible list items to help debug\n        const allListItems = Array.from(document.querySelectorAll('li'));\n        const visibleListItems = allListItems.filter(li => (0, utils_1.isElementVisible)(li));\n        console.log(`📊 Found ${visibleListItems.length} visible list items on page`);\n        return null;\n    }\n    // Look for the next non-applied Easy Apply job\n    for (const jobCard of jobCards) {\n        const card = jobCard;\n        // Skip if not visible\n        if (!(0, utils_1.isElementVisible)(card)) {\n            continue;\n        }\n        // Skip if already applied\n        if (card.getAttribute('data-applied') === 'true' || (0, detection_1.isJobAlreadyApplied)(card)) {\n            continue;\n        }\n        // Only proceed if this is an Easy Apply card\n        if (!(0, detection_1.isEasyApplyCard)(card)) {\n            continue;\n        }\n        // Found a job to apply to\n        return card;\n    }\n    // No jobs found to apply to\n    console.log(\"⚠️ No applicable job cards found - may need to scroll or load more\");\n    return null;\n};\nexports.findNextJob = findNextJob;\n/**\n * Scrolls a job element into view smoothly\n * @param jobElement - The job card element to scroll to\n */\nconst scrollToJob = (jobElement) => {\n    jobElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n};\nexports.scrollToJob = scrollToJob;\n/**\n * Marks a job element as applied by setting data attribute\n * @param jobElement - The job card element to mark as applied\n */\nconst markJobAsApplied = (jobElement) => {\n    jobElement.setAttribute('data-applied', 'true');\n};\nexports.markJobAsApplied = markJobAsApplied;\n/**\n * Attempts to click on a job card to open the job details\n * Uses multiple fallback strategies to find clickable elements\n * @param jobElement - The job card element to click\n * @returns true if click was attempted, false if no clickable element found\n */\nconst clickJob = (jobElement) => {\n    // Try finding any clickable anchor in the job card using more comprehensive selectors\n    const clickable = jobElement.querySelector('a.job-card-container__link, a[class*=\"job-card\"], a[data-control-name=\"job_card_title\"], a[href*=\"/jobs/view/\"], a');\n    if (clickable && (0, utils_1.isElementVisible)(clickable)) {\n        clickable.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        clickable.click();\n        return true;\n    }\n    // Fallback to any button if no anchor found\n    const clickableButton = jobElement.querySelector('button[data-job-id]');\n    if (clickableButton && (0, utils_1.isElementVisible)(clickableButton)) {\n        clickableButton.click();\n        return true;\n    }\n    // Last resort - try clicking the job card itself\n    console.warn(\"⚠️ No clickable anchor or button found inside job card. Trying to click the card itself.\");\n    jobElement.click();\n    return true; // Return true to avoid getting stuck, log will show if we had to resort to clicking the card\n};\nexports.clickJob = clickJob;\n","\"use strict\";\n/**\n * Jobs module exports\n * Re-exports all job-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clickJob = exports.markJobAsApplied = exports.scrollToJob = exports.findNextJob = exports.isEasyApplyCard = exports.isJobAlreadyApplied = void 0;\n// Job detection utilities\nvar detection_1 = require(\"./detection\");\nObject.defineProperty(exports, \"isJobAlreadyApplied\", { enumerable: true, get: function () { return detection_1.isJobAlreadyApplied; } });\nObject.defineProperty(exports, \"isEasyApplyCard\", { enumerable: true, get: function () { return detection_1.isEasyApplyCard; } });\n// Job finding and interaction utilities\nvar finding_1 = require(\"./finding\");\nObject.defineProperty(exports, \"findNextJob\", { enumerable: true, get: function () { return finding_1.findNextJob; } });\nObject.defineProperty(exports, \"scrollToJob\", { enumerable: true, get: function () { return finding_1.scrollToJob; } });\nObject.defineProperty(exports, \"markJobAsApplied\", { enumerable: true, get: function () { return finding_1.markJobAsApplied; } });\nObject.defineProperty(exports, \"clickJob\", { enumerable: true, get: function () { return finding_1.clickJob; } });\n","\"use strict\";\n/**\n * Navigation module exports\n * Re-exports all navigation-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findScrollableJobListContainer = exports.clickNextPageNumber = void 0;\n// Navigation and pagination utilities\nvar pagination_1 = require(\"./pagination\");\nObject.defineProperty(exports, \"clickNextPageNumber\", { enumerable: true, get: function () { return pagination_1.clickNextPageNumber; } });\nObject.defineProperty(exports, \"findScrollableJobListContainer\", { enumerable: true, get: function () { return pagination_1.findScrollableJobListContainer; } });\n","\"use strict\";\n/**\n * Navigation and pagination utility functions for the LinkedIn Easy Apply extension\n * These functions handle page navigation, pagination, and scrollable container detection\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findScrollableJobListContainer = exports.clickNextPageNumber = void 0;\nconst types_1 = require(\"../../types\");\nconst utils_1 = require(\"../utils\");\n/**\n * Attempts to click on the next page number button in LinkedIn's pagination\n * Uses multiple detection methods to find and click the next page\n * @returns Promise<boolean> true if next page button was clicked, false otherwise\n */\nconst clickNextPageNumber = async () => {\n    try {\n        // Look for pagination container from screenshot\n        const paginationContainer = document.querySelector('.jobs-search-pagination');\n        if (!paginationContainer) {\n            console.log(\"Could not find pagination container\");\n        }\n        else {\n            console.log(\"Found pagination container\");\n        }\n        // Method 1: Try to find the current active page\n        const activePageButton = document.querySelector('button[aria-current=\"page\"]');\n        if (activePageButton) {\n            // Get the current page number\n            const currentPageSpan = activePageButton.querySelector('span');\n            if (currentPageSpan) {\n                // Parse the current page number and calculate the next page number\n                const currentPage = parseInt(currentPageSpan.textContent || \"1\", 10);\n                const nextPage = currentPage + 1;\n                console.log(`Current page: ${currentPage}, looking for page ${nextPage} button`);\n                // Find all page buttons\n                const pageButtons = document.querySelectorAll('button[aria-label^=\"Page\"]');\n                // Look for the button with the next page number\n                for (const button of pageButtons) {\n                    const span = button.querySelector('span');\n                    if (span && span.textContent?.trim() === String(nextPage)) {\n                        console.log(`Found page ${nextPage} button, clicking...`);\n                        button.click();\n                        return true;\n                    }\n                }\n                // Alternative approach: look for specific button with aria-label=\"Page X\"\n                const nextPageButton = document.querySelector(`button[aria-label=\"Page ${nextPage}\"]`);\n                if (nextPageButton && (0, utils_1.isElementVisible)(nextPageButton)) {\n                    console.log(`Found page ${nextPage} button by aria-label, clicking...`);\n                    nextPageButton.click();\n                    return true;\n                }\n            }\n        }\n        // Method 2: Direct approach - try to find any numbered page buttons\n        const pageNumbers = document.querySelectorAll('.jobs-search-pagination__indicator-button, li.jobs-search-pagination__indicator button');\n        const pageNumbersArray = Array.from(pageNumbers);\n        console.log(`Found ${pageNumbersArray.length} page number buttons`);\n        // Find active page\n        let activePageIndex = -1;\n        let nextPageElement = null;\n        // Try to find the active page by checking aria-current or CSS classes\n        for (let i = 0; i < pageNumbersArray.length; i++) {\n            const button = pageNumbersArray[i];\n            // Check if this is the active page \n            if (button.getAttribute('aria-current') === 'page' ||\n                button.classList.contains('active') ||\n                button.classList.contains('jobs-search-pagination__indicator-button--active') ||\n                button.classList.contains('jobs-search-pagination__indicator-button--selected')) {\n                activePageIndex = i;\n                break;\n            }\n            // Also check parent li if button is inside a list item\n            const parentLi = button.closest('li');\n            if (parentLi && (parentLi.classList.contains('active') ||\n                parentLi.classList.contains('jobs-search-pagination__indicator--active') ||\n                parentLi.classList.contains('selected'))) {\n                activePageIndex = i;\n                break;\n            }\n        }\n        // If we found the active page, click the next one\n        if (activePageIndex !== -1 && activePageIndex < pageNumbersArray.length - 1) {\n            nextPageElement = pageNumbersArray[activePageIndex + 1];\n            console.log(`Found next page element at index ${activePageIndex + 1}`);\n            nextPageElement.click();\n            return true;\n        }\n        // Method 3: From screenshot - try to find numbered pagination buttons (1, 2, 3, ...)\n        // Look through all buttons with spans containing just numbers\n        const allButtons = document.querySelectorAll('button');\n        for (const button of allButtons) {\n            const span = button.querySelector('span');\n            if (span && /^\\d+$/.test(span.textContent?.trim() || '')) {\n                const pageNum = parseInt(span.textContent?.trim() || '0', 10);\n                console.log(`Found numeric page button: ${pageNum}`);\n                // Check if this might be the next page\n                const isCurrentPage = button.getAttribute('aria-current') === 'page' ||\n                    button.classList.contains('jobs-search-pagination__indicator-button--active');\n                if (!isCurrentPage && pageNum > 1) {\n                    console.log(`Clicking numeric page button: ${pageNum}`);\n                    button.click();\n                    return true;\n                }\n            }\n        }\n        // Method 4: Last resort - find any \"Next\" or pagination arrow button\n        const nextButtons = [\n            document.querySelector('button[aria-label=\"Next\"]'),\n            document.querySelector('button.artdeco-pagination__button--next'),\n            document.querySelector('.jobs-search-pagination__button--next'),\n            document.querySelector('button[aria-label=\"Next page\"]'),\n            // Try to find by child SVG \n            document.querySelector('button svg[data-test-icon=\"chevron-right-small\"]')?.closest('button'),\n            // Try to find by class or ID containing \"next\"\n            document.querySelector('button[id*=\"next\" i]'),\n            document.querySelector('button[class*=\"next\" i]'),\n            // From your screenshot - the ember button\n            document.querySelector('button#ember289, button[id^=\"ember\"][id$=\"next\"]')\n        ];\n        for (const button of nextButtons) {\n            if (button && (0, utils_1.isElementVisible)(button)) {\n                console.log(\"Found next button by alternative selector, clicking...\");\n                button.click();\n                return true;\n            }\n        }\n        console.log(\"Could not find any page navigation buttons\");\n        return false;\n    }\n    catch (error) {\n        console.error(\"Error in clickNextPageNumber:\", error);\n        return false;\n    }\n};\nexports.clickNextPageNumber = clickNextPageNumber;\n/**\n * Dynamically detects the scrollable job list container based on structure and behavior\n * instead of relying on hardcoded class names.\n * @returns The scrollable container div element or null if not found\n */\nconst findScrollableJobListContainer = () => {\n    // First try to find job list using known selector\n    const jobListContainer = document.querySelector(types_1.SELECTORS.JOBS_LIST);\n    if (jobListContainer &&\n        (window.getComputedStyle(jobListContainer).overflowY === 'auto' ||\n            window.getComputedStyle(jobListContainer).overflowY === 'scroll')) {\n        return jobListContainer;\n    }\n    // If not found with known selector, try dynamic detection\n    const allDivs = Array.from(document.querySelectorAll('div'));\n    let bestMatch = null;\n    let maxJobItems = 0;\n    for (const div of allDivs) {\n        const style = window.getComputedStyle(div);\n        // Must be scrollable vertically\n        const isScrollableY = (style.overflowY === 'auto' || style.overflowY === 'scroll') &&\n            div.scrollHeight > div.clientHeight;\n        if (!isScrollableY)\n            continue;\n        // Try different job card selectors to find container with most cards\n        // Use the expanded selectors similar to JOB_CARD in SELECTORS\n        const jobSelectors = [\n            'li.scaffold-layout__list-item',\n            'li.jobs-search-results__list-item',\n            'li.job-card-container',\n            'li.job-card-job-posting-card-wrapper',\n            'li[class*=\"job-card\"]',\n            'li[class*=\"job-posting\"]'\n        ];\n        let totalJobItems = 0;\n        for (const selector of jobSelectors) {\n            const items = div.querySelectorAll(selector);\n            totalJobItems += items.length;\n        }\n        // If this container has more job items than our previous best match, update\n        if (isScrollableY && totalJobItems > maxJobItems) {\n            maxJobItems = totalJobItems;\n            bestMatch = div;\n        }\n    }\n    if (bestMatch && maxJobItems >= 3) {\n        localStorage.setItem(\"lastSuccessfulScrollClass\", bestMatch.className); // optional debug\n        return bestMatch;\n    }\n    // Last resort - try to find any scrollable container with <li> elements\n    for (const div of allDivs) {\n        const style = window.getComputedStyle(div);\n        const isScrollableY = (style.overflowY === 'auto' || style.overflowY === 'scroll') &&\n            div.scrollHeight > div.clientHeight;\n        const listItems = div.querySelectorAll('li');\n        if (isScrollableY && listItems.length >= 5) {\n            return div;\n        }\n    }\n    console.warn(\"❌ Could not detect scrollable job list container\");\n    return null;\n};\nexports.findScrollableJobListContainer = findScrollableJobListContainer;\n","\"use strict\";\n/**\n * Job application tracking utility functions for the LinkedIn Easy Apply extension\n * These functions handle tracking successful job applications, extracting job data, and managing persistence\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trackSuccessfulApplication = void 0;\nconst supabase_1 = require(\"../../lib/supabase\");\n// Import global state from content.ts\n// Note: This is a temporary solution - ideally this should be managed by a state manager\n/**\n * Tracks a successful job application with comprehensive data extraction and storage\n * Extracts job details from LinkedIn's DOM and stores in database and local storage\n * @param jobTitle - The title of the job being applied to\n * @param companyName - The name of the company\n * @param jobElement - The job card HTML element for ID extraction\n * @param appliedJobIds - Set of job IDs that have already been processed\n * @returns Promise<boolean> true if tracking was successful or handled, false only on critical errors\n */\nconst trackSuccessfulApplication = async (jobTitle, companyName, jobElement, appliedJobIds) => {\n    try {\n        // Improved job ID extraction with multiple methods and consistency checks\n        let jobId = null;\n        // Method 1: Get from job element's data attribute\n        jobId = jobElement.closest('[data-job-id]')?.getAttribute('data-job-id');\n        // Method 2: Get from URL (most reliable for LinkedIn)\n        if (!jobId) {\n            const urlMatch = window.location.href.match(/currentJobId=(\\d+)/);\n            if (urlMatch && urlMatch[1]) {\n                jobId = urlMatch[1];\n            }\n        }\n        // Method 3: Alternative URL pattern\n        if (!jobId) {\n            const urlMatch = window.location.href.match(/\\/view\\/(\\d+)\\//);\n            if (urlMatch && urlMatch[1]) {\n                jobId = urlMatch[1];\n            }\n        }\n        // Method 4: Get from job details section\n        if (!jobId) {\n            const jobDetailsElement = document.querySelector('.jobs-unified-top-card, .job-details-jobs-unified-top-card');\n            if (jobDetailsElement) {\n                // Try to find any element with data-job-id\n                const jobIdElement = jobDetailsElement.querySelector('[data-job-id]');\n                if (jobIdElement) {\n                    jobId = jobIdElement.getAttribute('data-job-id');\n                }\n            }\n        }\n        // Method 5: Extract from Apply button\n        if (!jobId) {\n            const applyButton = document.querySelector('.jobs-apply-button, .jobs-s-apply button');\n            if (applyButton) {\n                const applyId = applyButton.getAttribute('data-job-id');\n                if (applyId) {\n                    jobId = applyId;\n                }\n            }\n        }\n        // Create a deterministic ID that will be the same for the same job\n        if (!jobId) {\n            // Use a hash-like approach for consistency\n            const baseString = `${jobTitle.trim()}-${companyName.trim()}`;\n            const hash = baseString.split('').reduce((a, b) => {\n                a = ((a << 5) - a) + b.charCodeAt(0);\n                return a & a; // Convert to 32-bit integer\n            }, 0);\n            jobId = `synthetic-${Math.abs(hash)}`;\n            console.log('🔧 Created deterministic synthetic job ID:', jobId);\n        }\n        if (!jobId) {\n            console.log('❌ Could not extract job ID for tracking');\n            return false;\n        }\n        // Check if this job has already been processed in this session\n        if (appliedJobIds.has(jobId)) {\n            console.log(`⏭️ Job ${jobId} already processed in this session. Skipping database tracking.`);\n            return true;\n        }\n        // Mark job as processed immediately to prevent duplicate processing\n        appliedJobIds.add(jobId);\n        console.log(`🔄 Marked job ${jobId} as processed to prevent duplicates`);\n        // Mark job as applied in the DOM immediately\n        jobElement.setAttribute('data-applied', 'true');\n        // Also mark any other instances of this job as applied right away\n        document.querySelectorAll(`[data-job-id=\"${jobId}\"]`).forEach(card => {\n            card.setAttribute('data-applied', 'true');\n        });\n        console.log(`📝 Tracking application for \"${jobTitle}\" at \"${companyName}\" (ID: ${jobId})`);\n        // Add the job ID to Chrome storage for persistence\n        chrome.storage.local.get(['appliedJobIds'], result => {\n            const storedIds = result.appliedJobIds || [];\n            storedIds.push(jobId);\n            chrome.storage.local.set({ appliedJobIds: [...new Set(storedIds)] });\n        });\n        // Get additional job details\n        const locationElement = document.querySelector('.job-details-jobs-unified-top-card__bullet');\n        const workTypeElement = document.querySelector('.job-details-jobs-unified-top-card__workplace-type');\n        const salaryElement = document.querySelector('.job-details-jobs-unified-top-card__salary-range');\n        const descriptionElement = document.querySelector('.jobs-description');\n        const companyUrlElement = document.querySelector('.job-details-jobs-unified-top-card__company-name a');\n        // Get location data safely\n        let location = locationElement?.textContent?.trim() || '';\n        // Get work type data safely\n        let workType = 'onsite'; // default\n        if (workTypeElement) {\n            const workTypeText = workTypeElement.textContent?.trim()?.toLowerCase() || '';\n            if (workTypeText.includes('remote')) {\n                workType = 'remote';\n            }\n            else if (workTypeText.includes('hybrid')) {\n                workType = 'hybrid';\n            }\n        }\n        // Get salary data safely\n        let salaryMin = null;\n        let salaryMax = null;\n        if (salaryElement) {\n            const salaryText = salaryElement.textContent?.trim() || '';\n            const numbers = salaryText.match(/\\d+/g);\n            if (numbers && numbers.length >= 1) {\n                salaryMin = parseInt(numbers[0]) || null;\n                if (numbers.length > 1) {\n                    salaryMax = parseInt(numbers[1]) || null;\n                }\n            }\n        }\n        // Job application data to save\n        const jobData = {\n            linkedin_job_id: jobId,\n            location: location,\n            work_type: workType,\n            salary_min: salaryMin,\n            salary_max: salaryMax,\n            salary_currency: 'USD',\n            job_description: descriptionElement?.textContent?.trim() || '',\n            company_url: companyUrlElement?.getAttribute('href') || undefined\n        };\n        // Enhanced debugging for database tracking\n        console.log('🔍 [DEBUG] About to track application to database with data:', {\n            jobTitle,\n            companyName,\n            jobId,\n            location: jobData.location,\n            workType: jobData.work_type,\n            hasDescription: !!jobData.job_description\n        });\n        // Try to save the application to the database\n        let result = await (0, supabase_1.trackJobApplication)(jobTitle, companyName, jobData);\n        console.log('🔍 [DEBUG] First tracking attempt result:', result);\n        // If tracking failed, try to re-authenticate and try again\n        if (!result) {\n            console.log('⚠️ Initial tracking failed, attempting to re-authenticate...');\n            // Try to ensure we're authenticated\n            const authResult = await (0, supabase_1.ensureAuthenticated)();\n            console.log('🔍 [DEBUG] Re-authentication result:', authResult);\n            if (authResult) {\n                console.log('🔄 Retrying database tracking after re-authentication...');\n                // Try to save again after re-authenticating\n                result = await (0, supabase_1.trackJobApplication)(jobTitle, companyName, jobData);\n                console.log('🔍 [DEBUG] Second tracking attempt result:', result);\n            }\n            else {\n                console.error('❌ Re-authentication failed completely');\n            }\n        }\n        if (result) {\n            console.log(`✅ Successfully tracked application for \"${jobTitle}\" at \"${companyName}\" (ID: ${jobId})`);\n            return true;\n        }\n        else {\n            console.error(`❌ FAILED to track application in database for \"${jobTitle}\" at \"${companyName}\" (ID: ${jobId})`);\n            console.log('⚠️ Continuing automation despite database tracking failure');\n            return true;\n        }\n    }\n    catch (error) {\n        console.error(`❌ Error tracking application:`, error);\n        // Still return true to continue the application process\n        return true;\n    }\n};\nexports.trackSuccessfulApplication = trackSuccessfulApplication;\n","\"use strict\";\n/**\n * Tracking module exports\n * Re-exports all tracking-related functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trackSuccessfulApplication = void 0;\n// Job application tracking utilities\nvar application_1 = require(\"./application\");\nObject.defineProperty(exports, \"trackSuccessfulApplication\", { enumerable: true, get: function () { return application_1.trackSuccessfulApplication; } });\n","\"use strict\";\n/**\n * Core utility functions for the LinkedIn Easy Apply extension\n * These are the most basic, reusable functions with no dependencies\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isElementVisible = exports.sleep = void 0;\n/**\n * Pauses execution for the specified number of milliseconds\n * @param ms - Number of milliseconds to sleep\n * @returns Promise that resolves after the specified delay\n */\nconst sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\nexports.sleep = sleep;\n/**\n * Checks if an HTML element is visible on the page\n * @param element - The HTML element to check\n * @returns true if the element is visible, false otherwise\n */\nconst isElementVisible = (element) => {\n    const style = window.getComputedStyle(element);\n    return style.display !== 'none' &&\n        style.visibility !== 'hidden' &&\n        style.opacity !== '0' &&\n        element.offsetWidth > 0 &&\n        element.offsetHeight > 0;\n};\nexports.isElementVisible = isElementVisible;\n","\"use strict\";\n/**\n * DOM utility functions for the LinkedIn Easy Apply extension\n * These functions handle DOM element interaction, clicking, and finding elements\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clickAnyElement = exports.findButtonByText = exports.findVisibleElement = exports.clickElement = void 0;\nconst core_1 = require(\"./core\");\n/**\n * Clicks an element if it exists and is visible\n * @param selector - CSS selector for the element to click\n * @returns Promise<boolean> - true if element was clicked, false otherwise\n */\nconst clickElement = async (selector) => {\n    const element = document.querySelector(selector);\n    if (element && (0, core_1.isElementVisible)(element)) {\n        element.click();\n        return true;\n    }\n    return false;\n};\nexports.clickElement = clickElement;\n/**\n * Finds a visible element by selector\n * @param selector - CSS selector for the element to find\n * @returns HTMLElement if found and visible, null otherwise\n */\nconst findVisibleElement = (selector) => {\n    const element = document.querySelector(selector);\n    if (element && (0, core_1.isElementVisible)(element)) {\n        return element;\n    }\n    return null;\n};\nexports.findVisibleElement = findVisibleElement;\n/**\n * Finds a button by its text content or aria-label\n * @param text - Text to search for in button content or aria-label\n * @returns HTMLElement if found, null otherwise\n */\nconst findButtonByText = (text) => {\n    // First try finding by aria-label\n    const buttonByAriaLabel = document.querySelector(`button[aria-label*=\"${text}\" i]`);\n    if (buttonByAriaLabel && (0, core_1.isElementVisible)(buttonByAriaLabel)) {\n        return buttonByAriaLabel;\n    }\n    // Then try finding by button text content\n    const buttons = Array.from(document.getElementsByTagName('button'));\n    const buttonByText = buttons.find(button => {\n        if (!(0, core_1.isElementVisible)(button))\n            return false;\n        // Check button's direct text content\n        if (button.textContent?.trim().toLowerCase().includes(text.toLowerCase())) {\n            return true;\n        }\n        // Check text content in span inside button\n        const span = button.querySelector('.artdeco-button__text');\n        return span?.textContent?.trim().toLowerCase().includes(text.toLowerCase());\n    });\n    return buttonByText || null;\n};\nexports.findButtonByText = findButtonByText;\n/**\n * Attempts to click any element from a list of selectors or by button text\n * @param selectors - Array of CSS selectors to try clicking\n * @returns Promise<boolean> - true if any element was clicked, false otherwise\n */\nconst clickAnyElement = async (selectors) => {\n    // First try the exact selectors\n    for (const selector of selectors) {\n        const element = document.querySelector(selector);\n        if (element && (0, core_1.isElementVisible)(element)) {\n            element.click();\n            return true;\n        }\n    }\n    // Then try finding buttons by text content\n    const buttonTexts = ['Next', 'Continue', 'Review'];\n    for (const text of buttonTexts) {\n        const button = (0, exports.findButtonByText)(text);\n        if (button) {\n            button.click();\n            return true;\n        }\n    }\n    // Need to provide full class name, there might be some other class name with same variable name,\n    // Try finding primary buttons that might be next/review buttons\n    const primaryButtons = document.querySelectorAll('.artdeco-button--primary');\n    for (const button of primaryButtons) {\n        if ((0, core_1.isElementVisible)(button)) {\n            const text = button.textContent?.trim().toLowerCase() || '';\n            if (text.includes('next') || text.includes('continue') || text.includes('review')) {\n                button.click();\n                return true;\n            }\n        }\n    }\n    return false;\n};\nexports.clickAnyElement = clickAnyElement;\n","\"use strict\";\n/**\n * Utils module exports\n * Re-exports all utility functions for easy importing\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.clickAnyElement = exports.findButtonByText = exports.findVisibleElement = exports.clickElement = exports.isElementVisible = exports.sleep = void 0;\n// Core utilities\nvar core_1 = require(\"./core\");\nObject.defineProperty(exports, \"sleep\", { enumerable: true, get: function () { return core_1.sleep; } });\nObject.defineProperty(exports, \"isElementVisible\", { enumerable: true, get: function () { return core_1.isElementVisible; } });\n// DOM utilities\nvar dom_1 = require(\"./dom\");\nObject.defineProperty(exports, \"clickElement\", { enumerable: true, get: function () { return dom_1.clickElement; } });\nObject.defineProperty(exports, \"findVisibleElement\", { enumerable: true, get: function () { return dom_1.findVisibleElement; } });\nObject.defineProperty(exports, \"findButtonByText\", { enumerable: true, get: function () { return dom_1.findButtonByText; } });\nObject.defineProperty(exports, \"clickAnyElement\", { enumerable: true, get: function () { return dom_1.clickAnyElement; } });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.saveDataVersions = exports.shouldRefreshData = exports.getDataVersions = exports.transformCompleteProfileToUserProfile = exports.getCompleteProfile = exports.getUserProfile = exports.initSupabaseClient = exports.refreshSession = exports.trackJobApplication = exports.getCurrentUser = exports.getSession = exports.ensureAuthenticated = exports.signOut = exports.signIn = exports.supabase = void 0;\nconst supabase_js_1 = require(\"@supabase/supabase-js\");\nconst supabaseUrl = 'https://tedelpcjgknjnlhezsdo.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRlZGVscGNqZ2tuam5saGV6c2RvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA5MTU4ODUsImV4cCI6MjA1NjQ5MTg4NX0.TUfoy4jG2t9YzniUbd-GnHGHYW6k4NY4yeUiBzyCYqw';\nexports.supabase = (0, supabase_js_1.createClient)(supabaseUrl, supabaseAnonKey);\n// Auth helper functions\nconst signIn = async (email, password) => {\n    const { data, error } = await exports.supabase.auth.signInWithPassword({\n        email,\n        password,\n    });\n    if (error) {\n        throw error;\n    }\n    // Store the session in chrome.storage.local\n    if (data.session) {\n        // Set session expiration to one year from now\n        const oneYearFromNow = new Date();\n        oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() + 1);\n        const extendedSession = {\n            ...data.session,\n            expires_at: oneYearFromNow.getTime()\n        };\n        await chrome.storage.local.set({\n            'supabase_session': extendedSession\n        });\n        // Notify all tabs about the authentication state change\n        const tabs = await chrome.tabs.query({});\n        for (const tab of tabs) {\n            if (tab.id) {\n                try {\n                    await chrome.tabs.sendMessage(tab.id, { type: 'AUTH_STATE_CHANGED' });\n                }\n                catch (err) {\n                    // Ignore errors for tabs that can't receive messages\n                }\n            }\n        }\n    }\n    return data;\n};\nexports.signIn = signIn;\nconst signOut = async () => {\n    const { error } = await exports.supabase.auth.signOut();\n    if (error) {\n        throw error;\n    }\n    await chrome.storage.local.remove('supabase_session');\n    const tabs = await chrome.tabs.query({});\n    for (const tab of tabs) {\n        if (tab.id) {\n            try {\n                await chrome.tabs.sendMessage(tab.id, { type: 'AUTH_STATE_CHANGED' });\n            }\n            catch (err) {\n                // Ignore errors for tabs that can't receive messages\n            }\n        }\n    }\n};\nexports.signOut = signOut;\n// Add this function to ensure session is properly restored\nconst ensureAuthenticated = async () => {\n    try {\n        const { supabase_session } = await chrome.storage.local.get('supabase_session');\n        if (!supabase_session) {\n            return false;\n        }\n        // Simply set the session without checking expiration\n        await exports.supabase.auth.setSession({\n            access_token: supabase_session.access_token,\n            refresh_token: supabase_session.refresh_token\n        });\n        const { data: { session } } = await exports.supabase.auth.getSession();\n        return !!session;\n    }\n    catch (error) {\n        return false;\n    }\n};\nexports.ensureAuthenticated = ensureAuthenticated;\nconst getSession = async () => {\n    try {\n        // Assume authentication is valid without continuously checking\n        const { data: { session } } = await exports.supabase.auth.getSession();\n        return session;\n    }\n    catch (error) {\n        return null;\n    }\n};\nexports.getSession = getSession;\nconst getCurrentUser = async () => {\n    try {\n        // Get user directly without checking authentication first\n        const { data: { user } } = await exports.supabase.auth.getUser();\n        return user;\n    }\n    catch (error) {\n        return null;\n    }\n};\nexports.getCurrentUser = getCurrentUser;\n// Update the trackJobApplication function\nconst trackJobApplication = async (position, company, additionalData) => {\n    try {\n        console.log('🔍 [DEBUG] trackJobApplication called with:', { position, company, linkedin_job_id: additionalData?.linkedin_job_id });\n        const session = await (0, exports.getSession)();\n        console.log('🔍 [DEBUG] Session check result:', !!session);\n        if (!session) {\n            console.log('❌ No session found, cannot track job application. Attempting to re-authenticate...');\n            const authResult = await (0, exports.ensureAuthenticated)();\n            console.log('🔍 [DEBUG] ensureAuthenticated result:', authResult);\n            if (!authResult) {\n                console.log('❌ Re-authentication failed');\n                return false;\n            }\n            // Get the session again after re-authentication\n            const newSession = await (0, exports.getSession)();\n            console.log('🔍 [DEBUG] New session after re-auth:', !!newSession);\n            if (!newSession) {\n                console.log('❌ Still no session after re-authentication');\n                return false;\n            }\n            console.log('✅ Re-authentication successful');\n        }\n        const user = await (0, exports.getCurrentUser)();\n        console.log('🔍 [DEBUG] getCurrentUser result:', !!user, user?.id);\n        if (!user) {\n            console.log('❌ No user found, cannot track job application');\n            return false;\n        }\n        console.log('✅ User authenticated: ', user.id);\n        // Sanitize inputs to prevent issues\n        const sanitizedPosition = position?.substring(0, 255) || 'Unknown Position';\n        const sanitizedCompany = company?.substring(0, 255) || 'Unknown Company';\n        const sanitizedLocation = additionalData?.location?.substring(0, 255) || null;\n        // Trim job description length to avoid huge texts\n        const sanitizedDescription = additionalData?.job_description?.substring(0, 2000) || null;\n        // Generate a unique ID for this application if LinkedIn ID is not available\n        const uniqueId = additionalData?.linkedin_job_id ||\n            `${Date.now()}-${Math.random().toString(36).substring(2, 10)}`;\n        // Build complete application data matching the database schema\n        const applicationData = {\n            user_id: user.id,\n            position: sanitizedPosition,\n            company: sanitizedCompany,\n            location: sanitizedLocation,\n            work_type: additionalData?.work_type || 'onsite',\n            salary_min: additionalData?.salary_min || null,\n            salary_max: additionalData?.salary_max || null,\n            salary_currency: additionalData?.salary_currency || 'USD',\n            apply_time: Math.floor(Date.now() / 1000),\n            source: 'linkedin',\n            status: 'applied',\n            company_url: additionalData?.company_url || null,\n            job_description: sanitizedDescription,\n            notes: additionalData?.notes || null,\n            linkedin_job_id: uniqueId,\n            application_type: 'easy_apply'\n        };\n        console.log('🔄 [DB] Inserting application data:', {\n            position: sanitizedPosition,\n            company: sanitizedCompany,\n            linkedin_job_id: uniqueId,\n            user_id: user.id\n        });\n        // First check if this job already exists in the database\n        console.log('🔍 [DEBUG] Checking for existing application...');\n        const { data: existingData, error: checkError } = await exports.supabase\n            .from('applications')\n            .select('id')\n            .eq('user_id', user.id)\n            .eq('linkedin_job_id', uniqueId)\n            .limit(1);\n        console.log('🔍 [DEBUG] Existing check result:', {\n            hasError: !!checkError,\n            errorMessage: checkError?.message,\n            existingCount: existingData?.length || 0\n        });\n        if (checkError) {\n            console.log(`⚠️ Error checking for existing application: ${checkError.message}`);\n            console.log('🔍 [DEBUG] Full check error:', checkError);\n        }\n        else if (existingData && existingData.length > 0) {\n            console.log('✅ Job already exists in database, no need to insert again');\n            return true;\n        }\n        // Use upsert directly to handle duplicates gracefully\n        console.log('🔍 [DEBUG] Attempting database upsert...');\n        const { error: upsertError } = await exports.supabase\n            .from('applications')\n            .upsert([applicationData], {\n            onConflict: 'user_id,linkedin_job_id',\n            ignoreDuplicates: false\n        });\n        console.log('🔍 [DEBUG] Upsert result:', {\n            hasError: !!upsertError,\n            errorCode: upsertError?.code,\n            errorMessage: upsertError?.message\n        });\n        if (upsertError) {\n            console.error('❌ Failed to track job application:', upsertError.message, upsertError);\n            console.log('🔍 [DEBUG] Full upsert error:', upsertError);\n            return false;\n        }\n        console.log(`✅ Application upserted: ${sanitizedPosition} at ${sanitizedCompany}`);\n        return true;\n    }\n    catch (error) {\n        console.error('❌ Exception tracking job application:', error);\n        return false;\n    }\n};\nexports.trackJobApplication = trackJobApplication;\n// Add a new function to refresh the session\nconst refreshSession = async () => {\n    try {\n        const { data: { session }, error } = await exports.supabase.auth.refreshSession();\n        if (error || !session) {\n            return false;\n        }\n        // Extend session expiration to one year from now\n        const oneYearFromNow = new Date();\n        oneYearFromNow.setFullYear(oneYearFromNow.getFullYear() + 1);\n        const extendedSession = {\n            ...session,\n            expires_at: oneYearFromNow.getTime()\n        };\n        await chrome.storage.local.set({\n            'supabase_session': extendedSession\n        });\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n};\nexports.refreshSession = refreshSession;\n// Update initSupabaseClient to handle session refresh\nconst initSupabaseClient = async () => {\n    try {\n        // Just return true without checking auth status - assume it's valid\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n};\nexports.initSupabaseClient = initSupabaseClient;\nconst getUserProfile = async () => {\n    try {\n        const user = await (0, exports.getCurrentUser)();\n        if (!user) {\n            return null;\n        }\n        const { data, error } = await exports.supabase\n            .from('profiles')\n            .select(`\n        id,\n        full_name,\n        title,\n        location,\n        phone,\n        bio,\n        education,\n        experience,\n        projects,\n        skills,\n        languages,\n        socials,\n        resume_url,\n        avatar_url,\n        daily_goal\n      `)\n            .eq('id', user.id)\n            .single();\n        if (error) {\n            return null;\n        }\n        if (!data) {\n            const { data: newProfile, error: insertError } = await exports.supabase\n                .from('profiles')\n                .insert([\n                {\n                    id: user.id,\n                    full_name: '',\n                    title: '',\n                    education: [],\n                    experience: [],\n                    projects: [],\n                    skills: [],\n                    languages: [],\n                    socials: {},\n                    daily_goal: 10\n                }\n            ])\n                .select()\n                .single();\n            if (insertError) {\n                return null;\n            }\n            return newProfile;\n        }\n        return data;\n    }\n    catch (error) {\n        return null;\n    }\n};\nexports.getUserProfile = getUserProfile;\n/**\n * Get complete profile data using the database RPC function\n * Returns profile with all normalized tables (work_experiences, education, skills, etc.)\n */\nconst getCompleteProfile = async () => {\n    try {\n        console.log('🔍 [DEBUG] getCompleteProfile called');\n        const user = await (0, exports.getCurrentUser)();\n        if (!user) {\n            console.log('❌ No user found, cannot get complete profile');\n            return null;\n        }\n        console.log('✅ User authenticated:', user.id);\n        // Call the database RPC function\n        const { data, error } = await exports.supabase\n            .rpc('get_complete_profile', { user_id: user.id });\n        if (error) {\n            console.error('❌ Error calling get_complete_profile RPC:', error.message);\n            console.log('🔍 [DEBUG] Full RPC error:', error);\n            return null;\n        }\n        if (!data) {\n            console.log('⚠️ No profile data returned from RPC');\n            return null;\n        }\n        console.log('✅ Complete profile data retrieved successfully');\n        console.log('🔍 [DEBUG] Profile data structure:', {\n            hasProfile: !!data.profile,\n            workExperiencesCount: data.work_experiences?.length || 0,\n            educationCount: data.education?.length || 0,\n            skillsCount: data.skills?.length || 0,\n            languagesCount: data.languages?.length || 0,\n            certificationsCount: data.certifications?.length || 0,\n            portfolioLinksCount: data.portfolio_links?.length || 0\n        });\n        return data;\n    }\n    catch (error) {\n        console.error('❌ Exception getting complete profile:', error);\n        return null;\n    }\n};\nexports.getCompleteProfile = getCompleteProfile;\n/**\n * Transform CompleteProfile data into UserProfile format for autofill engine\n */\nconst transformCompleteProfileToUserProfile = (completeProfile) => {\n    const profile = completeProfile.profile;\n    // Transform work experiences to old format\n    const experience = completeProfile.work_experiences?.map(work => ({\n        id: work.id,\n        title: work.position_title,\n        company: work.company_name,\n        location: work.location || '',\n        date: work.is_current\n            ? `${work.start_month} ${work.start_year} - Present`\n            : `${work.start_month} ${work.start_year} - ${work.end_month} ${work.end_year}`,\n        description: work.description || ''\n    })) || [];\n    // Transform education to old format\n    const education = completeProfile.education?.map(edu => ({\n        degree: edu.degree_type || '',\n        school: edu.institution_name,\n        date: edu.is_current\n            ? `${edu.start_year} - Present`\n            : `${edu.start_year} - ${edu.end_year}`,\n        description: edu.description || ''\n    })) || [];\n    // Transform skills to array of strings\n    const skills = completeProfile.skills?.map(skill => skill.skill_name) || [];\n    // Transform languages to array of strings\n    const languages = completeProfile.languages?.map(lang => lang.language_name) || [];\n    // Transform portfolio links to socials object\n    const socials = {};\n    completeProfile.portfolio_links?.forEach(link => {\n        socials[link.platform] = link.url;\n    });\n    return {\n        id: profile.id,\n        full_name: profile.full_name || '',\n        first_name: profile.first_name || '',\n        last_name: profile.last_name || '',\n        title: profile.title || '',\n        email: profile.email || '',\n        phone: profile.phone || '',\n        location: `${profile.city || ''}, ${profile.state || ''}`.replace(/^,\\s*|,\\s*$/g, '') || '',\n        // Address fields\n        address: profile.address_line_1 || '',\n        address_line_1: profile.address_line_1,\n        address_line_2: profile.address_line_2,\n        city: profile.city || '',\n        state: profile.state || '',\n        zip_code: profile.postal_code || '',\n        postal_code: profile.postal_code,\n        country: profile.country || '',\n        county: profile.county,\n        // Contact details\n        phone_device_type: profile.phone_device_type,\n        country_phone_code: profile.country_phone_code,\n        phone_extension: profile.phone_extension,\n        bio: profile.bio || '',\n        // Transform normalized data to old format\n        education,\n        experience,\n        skills,\n        languages,\n        socials,\n        // URLs and documents\n        linkedin_url: profile.linkedin_url,\n        website_url: profile.personal_website,\n        resume_url: profile.resume_url,\n        resume_filename: profile.resume_filename,\n        cover_letter_url: profile.cover_letter_url,\n        cover_letter_filename: profile.cover_letter_filename,\n        github_url: profile.github_url,\n        personal_website: profile.personal_website,\n        avatar_url: profile.avatar_url,\n        // Work authorization\n        work_authorization_status: profile.work_authorization_status,\n        visa_sponsorship_required: profile.visa_sponsorship_required,\n        work_authorization_us: profile.work_authorization_us,\n        work_authorization_canada: profile.work_authorization_canada,\n        work_authorization_uk: profile.work_authorization_uk,\n        // Application preferences\n        how_did_you_hear_about_us: profile.how_did_you_hear_about_us,\n        previously_worked_for_workday: profile.previously_worked_for_workday,\n        salary_expectation: profile.salary_expectation,\n        available_start_date: profile.available_start_date,\n        willing_to_relocate: profile.willing_to_relocate,\n        years_of_experience: profile.years_of_experience,\n        highest_education_level: profile.highest_education_level,\n        education_level: profile.highest_education_level,\n        // Voluntary disclosures\n        gender: profile.gender,\n        ethnicity: profile.ethnicity,\n        military_veteran: profile.military_veteran,\n        disability_status: profile.disability_status,\n        lgbtq_status: profile.lgbtq_status,\n        // Consent fields\n        references_available: profile.references_available,\n        background_check_consent: profile.background_check_consent,\n        drug_test_consent: profile.drug_test_consent,\n        // Other fields\n        birthday: profile.birthday,\n        daily_goal: profile.daily_goal || 10,\n        profile_completion_percentage: profile.profile_completion_percentage,\n        job_search_status: profile.job_search_status,\n        // Keep normalized data arrays for advanced usage\n        work_experiences: completeProfile.work_experiences,\n        education_records: completeProfile.education,\n        profile_skills: completeProfile.skills,\n        profile_languages: completeProfile.languages,\n        certifications: completeProfile.certifications,\n        portfolio_links: completeProfile.portfolio_links,\n        // Default values\n        projects: [],\n        custom_answers: {},\n        settings: {\n            nextJobDelay: 5000\n        }\n    };\n};\nexports.transformCompleteProfileToUserProfile = transformCompleteProfileToUserProfile;\n/**\n * Get the latest updated_at timestamps for all autofill-related tables\n * Used for version checking to determine if local cache is stale\n */\nconst getDataVersions = async () => {\n    try {\n        const user = await (0, exports.getCurrentUser)();\n        if (!user) {\n            console.log('❌ No user found, cannot get data versions');\n            return null;\n        }\n        // Get the most recent updated_at timestamp for each table\n        const { data, error } = await exports.supabase\n            .rpc('get_data_versions', { user_id: user.id });\n        if (error) {\n            console.error('❌ Error getting data versions:', error.message);\n            return null;\n        }\n        console.log('✅ Data versions retrieved:', data);\n        return data;\n    }\n    catch (error) {\n        console.error('❌ Exception getting data versions:', error);\n        return null;\n    }\n};\nexports.getDataVersions = getDataVersions;\n/**\n * Check if local cache is stale by comparing timestamps\n * Returns true if fresh data should be fetched from Supabase\n */\nconst shouldRefreshData = async () => {\n    try {\n        // Get remote versions\n        const remoteVersions = await (0, exports.getDataVersions)();\n        if (!remoteVersions) {\n            console.log('⚠️ Could not get remote versions, assuming refresh needed');\n            return true;\n        }\n        // Get cached versions from Chrome storage\n        const result = await chrome.storage.local.get(['dataVersions']);\n        const cachedVersions = result.dataVersions;\n        if (!cachedVersions) {\n            console.log('📝 No cached versions found, refresh needed');\n            return true;\n        }\n        // Compare each table's timestamp\n        const tables = ['profiles', 'education', 'work_experiences', 'profile_skills', 'profile_languages', 'portfolio_links'];\n        for (const table of tables) {\n            const remoteTime = remoteVersions[table];\n            const cachedTime = cachedVersions[table];\n            if (!cachedTime || !remoteTime) {\n                console.log(`📝 Missing timestamp for ${table}, refresh needed`);\n                return true;\n            }\n            if (new Date(remoteTime) > new Date(cachedTime)) {\n                console.log(`🔄 ${table} has newer data (remote: ${remoteTime}, cached: ${cachedTime}), refresh needed`);\n                return true;\n            }\n        }\n        console.log('✅ All data is up to date, no refresh needed');\n        return false;\n    }\n    catch (error) {\n        console.error('❌ Error checking data freshness:', error);\n        return true; // Default to refresh on error\n    }\n};\nexports.shouldRefreshData = shouldRefreshData;\n/**\n * Save data versions to Chrome storage after successful data fetch\n */\nconst saveDataVersions = async (versions) => {\n    try {\n        await chrome.storage.local.set({ dataVersions: versions });\n        console.log('✅ Data versions saved to cache');\n    }\n    catch (error) {\n        console.error('❌ Error saving data versions:', error);\n    }\n};\nexports.saveDataVersions = saveDataVersions;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SELECTORS = void 0;\nexports.SELECTORS = {\n    EASY_APPLY_BUTTON: '.jobs-apply-button',\n    NEXT_BUTTON: [\n        '[data-easy-apply-next-button]',\n        '[data-live-test-easy-apply-next-button]',\n        'button[aria-label=\"Continue to next step\"]',\n        'button.artdeco-button.artdeco-button--2.artdeco-button--primary',\n        '.artdeco-button--primary',\n        'button[type=\"button\"].artdeco-button--primary'\n    ],\n    SUBMIT_BUTTON: '[aria-label=\"Submit application\"]',\n    REVIEW_BUTTON: [\n        '[aria-label=\"Review your application\"]',\n        '[aria-label=\"Review\"]',\n        'button.artdeco-button--primary',\n        '.artdeco-button--primary'\n    ],\n    CLOSE_BUTTON: '[aria-label=\"Dismiss\"]',\n    JOB_CARD: 'li.jobs-search-results__list-item, li.scaffold-layout__list-item, li.job-card-container, li.job-card-job-posting-card-wrapper, li[class*=\"job-card\"], li[class*=\"job-posting\"]',\n    JOB_TITLE_LINK: '.job-card-container__link, a[data-control-name=\"job_card_title\"], a[class*=\"job-card\"][class*=\"title\"]',\n    JOBS_LIST: '.jobs-search-results-list, .jobs-search-results__list, div.GDWMPYlbLvJwwJkvOFRdwOcJxcoOxMsCHeyMgIQ, div[class*=\"GDWMP\"], .jobs-search-two-pane__results',\n    NEXT_PAGE_BUTTON: 'button[aria-label=\"Next\"]',\n    // Form field selectors\n    FIRST_NAME_INPUT: 'input[name*=\"first\" i]',\n    LAST_NAME_INPUT: 'input[name*=\"last\" i]',\n    EMAIL_INPUT: 'input[type=\"email\"]',\n    PHONE_INPUT: 'input[name*=\"phone\" i]',\n    LOCATION_INPUT: 'input[name*=\"location\" i], input[name*=\"city\" i]',\n    RESUME_INPUT: 'input[type=\"file\"]',\n    LINKEDIN_INPUT: 'input[name*=\"linkedin\" i]',\n    WEBSITE_INPUT: 'input[name*=\"website\" i], input[name*=\"portfolio\" i]',\n    EXPERIENCE_YEARS: 'select[name*=\"experience\" i], select[name*=\"years\" i]',\n    EDUCATION_LEVEL: 'select[name*=\"education\" i], select[name*=\"degree\" i]',\n    // Common question selectors\n    YES_NO_RADIO: 'input[type=\"radio\"]',\n    MULTIPLE_CHOICE: 'select',\n    TEXT_INPUT: 'input[type=\"text\"]',\n    TEXT_AREA: 'textarea'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"linkedin-easy-apply-automation:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"content\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunklinkedin_easy_apply_automation\"] = self[\"webpackChunklinkedin_easy_apply_automation\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst automation_1 = require(\"./automation\");\nconst initialization_1 = require(\"./initialization\");\nconst events_1 = require(\"./events\");\nconst api_1 = require(\"./api\");\nconsole.log(\"LinkedIn Easy Apply content script loaded\");\nlet isRunning = false;\nlet automationInterval = null;\nlet userData = null;\nlet continuing = false;\n// Track job IDs that have already been processed to avoid duplicates\nconst appliedJobIds = new Set();\n// Track jobs with 409 Conflict errors to avoid logging multiple times\nconst skipped409Jobs = new Set();\n// Remove all the input listeners - we don't need them\nconst setupInputListeners = () => {\n    // No listeners needed\n};\n//  Need ti cleanuo all the console logs\nconst verifySession = async () => {\n    // Simply return true without extensive checking\n    // This assumes the user is logged in based on previous auth\n    return true;\n};\n// Create automation state object\nconst automationState = {\n    isRunning: false,\n    continuing: false,\n    automationInterval: null,\n    appliedJobIds,\n    userData\n};\n// State management functions\nconst setIsRunning = (value) => {\n    isRunning = value;\n    automationState.isRunning = value;\n};\nconst setContinuing = (value) => {\n    continuing = value;\n    automationState.continuing = value;\n};\nconst setUserData = (value) => {\n    userData = value;\n    automationState.userData = value;\n};\n// Set up LinkedIn API interception\n(0, api_1.setupLinkedInAPIInterception)({ skipped409Jobs });\n// Initialize state when content script loads with dependencies\n(0, initialization_1.initializeState)({\n    appliedJobIds,\n    skipped409Jobs,\n    automationState,\n    setUserData,\n    startAutomation: automation_1.startAutomation,\n    setIsRunning,\n    setContinuing\n});\n// Set up event handling with dependencies\nconst eventDependencies = {\n    automationState,\n    getIsRunning: () => isRunning,\n    getUserData: () => userData,\n    setIsRunning,\n    setContinuing,\n    setUserData\n};\n// Initialize all event handlers\n(0, events_1.setupMessageListener)(eventDependencies);\n(0, events_1.setupPageEventListeners)(eventDependencies);\n(0, events_1.setupDebugUtilities)();\n"],"names":[],"sourceRoot":""}